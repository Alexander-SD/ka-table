{"version":3,"sources":["lib/enums.ts","lib/Models/CssClasses.ts","lib/defaultOptions.ts","lib/Utils/ArrayUtils.ts","lib/Utils/CommonUtils.ts","lib/Utils/TypeUtils.ts","lib/Utils/HeadRowUtils.ts","lib/Components/HeadCell/HeadCell.tsx","lib/Components/HeadRow/HeadRow.tsx","lib/groupMark.ts","lib/Utils/GroupUtils.ts","lib/emptyFunc.ts","lib/Components/CellEditorBoolean/CellEditorBoolean.tsx","lib/Components/CellEditorDate/CellEditorDate.tsx","lib/Components/CellEditorNumber/CellEditorNumber.tsx","lib/Components/CellEditorString/CellEditorString.tsx","lib/Components/CellEditorDataType/CellEditorDataType.tsx","lib/Components/FilterCell/FilterCell.tsx","lib/Components/FilterRow/FilterRow.tsx","lib/Utils/FilterUtils.ts","lib/Components/GroupRow/GroupRow.tsx","lib/Utils/CellUtils.ts","lib/Components/CellText/CellText.tsx","lib/Components/CellContent/CellContent.tsx","lib/Utils/EffectUtils.ts","lib/Components/CellEditorValidationMessage/CellEditorValidationMessage.tsx","lib/Components/CellEditorState/CellEditorState.tsx","lib/Utils/Validation.ts","lib/Components/CellEditor/CellEditor.tsx","lib/Components/CellComponent/CellComponent.tsx","lib/Components/Row/Row.tsx","lib/Components/TableBody/TableBody.tsx","lib/Components/Table/Table.tsx","lib/Utils/SortUtils.ts","Demos/CustomCellDemo/CustomCellDemo.tsx","Demos/CustomEditorDemo/CustomEditorDemo.tsx","Demos/Demo.ts","lib/bootstrapCssClasses.ts","Demos/DemoPage.tsx","Demos/EditingDemo/EditingDemo.tsx","Demos/FilterExtendedDemo/filterData.ts","Demos/FilterExtendedDemo/FilterExtendedDemo.tsx","Demos/FilterRowDemo/FilterRowDemo.tsx","Demos/GroupingDemo/GroupingDemo.tsx","Demos/SearchDemo/SearchDemo.tsx","Demos/SortingDemo/SortingDemo.tsx","Demos/ValidationDemo/ValidationDemo.tsx","Demos/Demos.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DataType","EditingMode","KeyboardEnum","SortDirection","SortingMode","TextAlign","CssClasses","table","thead","checkbox","dateInput","numberInput","textInput","defaultOptions","columnDataType","String","columnSortDirection","Ascend","css","getCopyOfArrayAndInsertOrReplaceItem","item","rowKey","array","newArray","rowKeyValue","index","findIndex","i","splice","push","isEmpty","value","length","convertToColumnTypes","data","columns","map","d","nd","forEach","c","field","dataType","toString","Number","Date","Boolean","toBoolean","Object","toLowerCase","trim","getNextSortDirection","previousSortdirection","Descend","HeadCell","sortClick","column","width","title","textAlign","scope","style","onClick","HeadRow","onOptionChanged","sortingMode","className","Single","newColumns","sortDirection","newColumn","newColumnIndex","undefined","sortUtilsClickHandler","key","groupMark","convertToFlat","grouped","result","groupValue","groupKey","Array","isArray","concat","getGroupedStructure","groups","expandedDeep","groupsExpanded","group","shift","groupBy","groupExpandedItems","filter","ge","some","newStructure","set","keyGetter","isEmptyValue","Map","collection","get","emptyFunc","CellEditorBoolean","rowData","close","onValueChange","autoFocus","type","ref","elem","indeterminate","checked","onChange","event","currentTarget","onBlur","CellEditorDate","fieldValue","toISOString","split","targetValue","CellEditorNumber","newValue","CellEditorString","CellEditorDataType","props","FilterCell","FilterRow","filterRow","reduce","f","optionChangeHandler","newFRValue","operator","getCopyOfArrayAndDeleteItem","filterCellValueChangeHandler","GroupRow","groupRowData","colSpan","newGroupsExpanded","JSON","stringify","groupClick","isEditableCell","editingMode","rowEditableCells","Cell","find","CellText","openEditor","CellContent","cell","getEventListenerEffect","eventName","handler","window","addEventListener","removeEventListener","CellEditorValidationMessage","message","CellEditorState","useState","changeValue","validationValue","validation","getValidationValue","closeHandler","useCallback","useEffect","escKeyHandler","enterKeyHandler","keyCode","Esc","Enter","stateProps","rowValue","CellEditor","editor","CellComponent","editableCells","onRowDataChanged","changeCellEditorToCellTextHandler","None","getCopyOfArrayAndAddItem","changeCellTextToCellEditorHandler","Row","getRowEditableCells","TableBody","onDataChanged","groupedData","getGroupedData","getExpandedGroups","newData","Table","search","searchText","initialData","indexOf","includes","searchData","sortedColumn","columnKey","sortFunc","a","b","sort","sortData","searcFunc","filterData","dataArray","id","name","score","passed","nextTry","tableOption","Right","CustomCellDemo","option","changeOptions","changeData","setValue","defaultValue","CustomEditorDemo","Demo","component","path","fileName","bootstrapCssClasses","getDemoPage","demo","text","changeText","fetch","then","res","fileText","EditingDemo","equals","filterItem","contains","notEqual","more","moreOrEqual","lessOrEqual","blank","notBlank","Error","filterGroup","groupName","items","filterGroupOr","filterGroupAnd","filteredData","fields","caption","operators","FilterExtendedDemo","filterValue","changeFilter","onFilterValueChanged","newFilterValue","FilterRowDemo","country","age","GroupingDemo","SearchDemo","SortingDemo","ValidationDemo","demos","cases","demoComponent","defaultDemo","Demos","to","exact","App","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bedd688c.chunk.js","sourcesContent":["export enum DataType {\r\n  Boolean = 'boolean',\r\n  Date = 'date',\r\n  Number = 'number',\r\n  Object = 'object',\r\n  String = 'string',\r\n}\r\n\r\nexport enum EditingMode {\r\n  None,\r\n  Cell,\r\n}\r\n\r\nexport enum KeyboardEnum {\r\n  Esc = 27,\r\n  Enter = 13,\r\n}\r\n\r\nexport enum SortDirection {\r\n  Ascend = 'ascend',\r\n  Descend = 'descend',\r\n}\r\n\r\nexport enum SortingMode {\r\n  None,\r\n  Single,\r\n}\r\n\r\nexport enum TextAlign {\r\n  Center = 'center',\r\n  Left = 'left',\r\n  Right = 'right',\r\n}\r\n","export class CssClasses {\r\n  public table?: string;\r\n  public thead?: string;\r\n  public checkbox?: string;\r\n  public dateInput?: string;\r\n  public numberInput?: string;\r\n  public textInput?: string;\r\n}\r\n","\r\nimport { DataType, SortDirection } from './enums';\r\nimport { CssClasses } from './Models/CssClasses';\r\n\r\nclass DefaultOptions {\r\n  public columnDataType = DataType.String;\r\n  public columnSortDirection: SortDirection = SortDirection.Ascend;\r\n  public css: CssClasses = new CssClasses();\r\n}\r\n\r\nconst defaultOptions = new DefaultOptions();\r\n\r\nexport default defaultOptions;\r\n","export const getCopyOfArrayAndAddItem = (item: any, array: any[] = []): any[] => {\r\n  return array.concat([item]);\r\n};\r\n\r\nexport const getCopyOfArrayAndDeleteItem = (item: any, rowKey: any, array: any[]): any[] => {\r\n  const rowKeyValue = item[rowKey];\r\n  return array.filter((i) => i[rowKey] !== rowKeyValue);\r\n};\r\n\r\nexport const getCopyOfArrayAndInsertOrReplaceItem = (item: any, rowKey: any, array: any[]): any[] => {\r\n  const newArray = [...array];\r\n  const rowKeyValue = item[rowKey];\r\n  const index = newArray.findIndex((i) => i[rowKey] === rowKeyValue);\r\n  index >= 0 ? newArray.splice(index, 1, item) : newArray.push(item);\r\n  return newArray;\r\n};\r\n","export const isEmpty = (value: any): boolean => (value == null || value.length === 0);\r\n","import { DataType } from '../enums';\r\nimport { Column } from '../Models/Column';\r\n\r\nexport const convertToColumnTypes = (data: any[], columns: Column[]) => {\r\n  const newData: any[] = data.map((d) => {\r\n    const nd = {...d};\r\n    columns.forEach((c) => {\r\n      if (nd[c.field] != null) {\r\n        switch (c.dataType) {\r\n          case DataType.String: nd[c.field] = nd[c.field].toString(); break;\r\n          case DataType.Number: nd[c.field] = Number(nd[c.field]); break;\r\n          case DataType.Date: nd[c.field] = new Date(nd[c.field]); break;\r\n          case DataType.Boolean: nd[c.field] = toBoolean(nd[c.field]); break;\r\n          case DataType.Object: nd[c.field] = nd[c.field]; break;\r\n        }\r\n      }\r\n    });\r\n    return nd;\r\n  });\r\n  return newData;\r\n};\r\n\r\nexport const toBoolean = (value: any) => {\r\n  if (typeof value === 'string') {\r\n    switch (value.toLowerCase().trim()) {\r\n      case 'true': case 'yes': case '1': return true;\r\n      case 'false': case 'no': case '0': case null: return false;\r\n    }\r\n  }\r\n  return Boolean(value);\r\n};\r\n","import defaultOptions from '../defaultOptions';\r\nimport { SortDirection } from '../enums';\r\nimport { Column } from '../Models/Column';\r\nimport { OptionChangedFunc } from '../types';\r\n\r\nexport const sortUtilsClickHandler = (\r\n  columns: Column[],\r\n  column: Column,\r\n  onOptionChanged: OptionChangedFunc,\r\n) => {\r\n  const index = columns.findIndex((c) => c === column);\r\n  const newColumns = [...columns];\r\n  const sortDirection = getNextSortDirection(column.sortDirection);\r\n\r\n  newColumns.forEach((newColumn, newColumnIndex) => {\r\n    if (newColumn.sortDirection) {\r\n      newColumns[newColumnIndex] = {...newColumn};\r\n      newColumns[newColumnIndex].sortDirection = undefined;\r\n    }\r\n  });\r\n\r\n  newColumns[index] = {...column};\r\n  newColumns[index].sortDirection = sortDirection;\r\n  onOptionChanged({ columns: newColumns });\r\n};\r\n\r\nconst getNextSortDirection = (previousSortdirection?: SortDirection) => {\r\n  let nextSortDirection;\r\n  if (previousSortdirection) {\r\n    nextSortDirection = previousSortdirection === SortDirection.Ascend\r\n      ? SortDirection.Descend : SortDirection.Ascend;\r\n  } else {\r\n    nextSortDirection = defaultOptions.columnSortDirection;\r\n  }\r\n  return nextSortDirection;\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { Column } from '../../Models/Column';\r\n\r\nexport interface IHeadCellProps {\r\n  column: Column;\r\n  sortClick?: () => void;\r\n}\r\n\r\nconst HeadCell: React.FunctionComponent<IHeadCellProps> = ({ sortClick, column: { width, title, textAlign } }) => {\r\n  return (\r\n    <th scope='col' style={{ width, textAlign }}>\r\n      <div>{title}</div>\r\n      {sortClick && <div onClick={sortClick}>Sort</div>}\r\n    </th>\r\n  );\r\n};\r\n\r\nexport default HeadCell;\r\n","import React from 'react';\r\n\r\nimport { SortingMode } from '../../enums';\r\nimport { Column } from '../../Models/Column';\r\nimport { OptionChangedFunc } from '../../types';\r\nimport { sortUtilsClickHandler } from '../../Utils/HeadRowUtils';\r\nimport HeadCell from '../HeadCell/HeadCell';\r\n\r\nexport interface IHeadRowProps {\r\n  columns: Column[];\r\n  sortingMode: SortingMode;\r\n  onOptionChanged: OptionChangedFunc;\r\n}\r\n\r\nconst HeadRow: React.FunctionComponent<IHeadRowProps> = ({ columns, onOptionChanged, sortingMode }) => {\r\n  return (\r\n    <tr className='tc-header-row'>\r\n      {columns.map((column) => {\r\n        const sortClick: any = sortingMode === SortingMode.Single && (() => {\r\n          sortUtilsClickHandler(columns, column, onOptionChanged);\r\n        });\r\n        return (\r\n          <HeadCell\r\n            key={column.field}\r\n            column={column}\r\n            sortClick={sortClick}\r\n          />\r\n        );\r\n      })}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default HeadRow;\r\n","const groupMark = {};\r\n\r\nexport default groupMark;\r\n","import groupMark from '../groupMark';\r\nimport { Group } from '../Models/Group';\r\nimport { GroupRowData } from '../Models/GroupRowData';\r\nimport { OptionChangedFunc } from '../types';\r\n\r\nexport const groupClick = (groupsExpanded: any[][], groupRowData: GroupRowData, onOptionChanged: OptionChangedFunc) => {\r\n  const newGroupsExpanded =\r\n    groupsExpanded.filter((ge) => JSON.stringify(ge) !== JSON.stringify(groupRowData.key));\r\n  if (newGroupsExpanded.length === groupsExpanded.length) {\r\n    newGroupsExpanded.push(groupRowData.key);\r\n  }\r\n  onOptionChanged({ groupsExpanded: newGroupsExpanded });\r\n};\r\n\r\nexport const getExpandedGroups = (groupedData: any[]): any[][] => {\r\n  const groupsExpanded: any[][] = [];\r\n  for (const value of groupedData) {\r\n    if (value.groupMark === groupMark) {\r\n      groupsExpanded.push(value.key);\r\n    }\r\n  }\r\n  return groupsExpanded;\r\n};\r\n\r\nexport const getGroupedData = (data: any[], groups: Group[], groupsExpanded?: any[]): any[] => {\r\n  const grouped = getGroupedStructure(data, groups, 0, groupsExpanded);\r\n  return convertToFlat(grouped);\r\n};\r\n\r\nexport const convertToFlat = (grouped: any, key: any[] = []) => {\r\n  let result: any[] = [];\r\n  grouped.forEach((value: any, groupValue: any) => {\r\n    const groupKey = [...key];\r\n    groupKey.push(groupValue);\r\n    result.push({ groupMark, key: groupKey, value: groupValue });\r\n    if (Array.isArray(value)) {\r\n      value.forEach((item) => {\r\n        result.push(item);\r\n      });\r\n    } else {\r\n      result = result.concat(convertToFlat(value, groupKey));\r\n    }\r\n  });\r\n  return result;\r\n};\r\n\r\nexport const getGroupedStructure = (\r\n  data: any[],\r\n  groups: Group[],\r\n  expandedDeep: number = 0,\r\n  groupsExpanded?: any[],\r\n): any => {\r\n  groups = [...groups];\r\n  const group = groups.shift();\r\n  if (group) {\r\n    const grouped = groupBy(data, (item: any) => item[group.field]);\r\n    grouped.forEach((value, key) => {\r\n      const groupExpandedItems = groupsExpanded && groupsExpanded.filter((ge) => ge[expandedDeep] === key);\r\n      const isThisGroupExpanded = !groupExpandedItems\r\n        || groupExpandedItems.some((ge) => ge.length === expandedDeep + 1);\r\n      if (isThisGroupExpanded) {\r\n        const newStructure = getGroupedStructure(\r\n          value,\r\n          groups,\r\n          expandedDeep + 1,\r\n          groupExpandedItems && groupExpandedItems.filter((ge) => ge.length > expandedDeep + 1),\r\n        );\r\n        if (newStructure) {\r\n          grouped.set(key, newStructure);\r\n        }\r\n      } else {\r\n        grouped.set(key, []);\r\n      }\r\n    });\r\n    return grouped;\r\n  }\r\n};\r\n\r\nexport const groupBy = (data: any[], keyGetter: any, isEmptyValue: boolean = false) => {\r\n  const map = new Map();\r\n  data.forEach((item) => {\r\n    const key = keyGetter(item);\r\n    if (isEmptyValue) {\r\n      map.set(key, []);\r\n    } else {\r\n      const collection = map.get(key);\r\n      if (!collection) {\r\n          map.set(key, [item]);\r\n      } else {\r\n          collection.push(item);\r\n      }\r\n    }\r\n  });\r\n  return map;\r\n};\r\n","const emptyFunc = () => {};\r\nexport default emptyFunc;\r\n","import React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { isEmpty } from '../../Utils/CommonUtils';\r\nimport { ICellEditorProps } from '../CellEditor/CellEditor';\r\n\r\nconst CellEditorBoolean: React.FunctionComponent<ICellEditorProps> = ({\r\n  column,\r\n  rowData,\r\n  close,\r\n  onValueChange,\r\n}) => {\r\n  const value = rowData[column.field];\r\n  return (\r\n    <input autoFocus={true}\r\n      className={defaultOptions.css.checkbox}\r\n      type='checkbox'\r\n      ref={(elem) => elem && (elem.indeterminate = isEmpty(value))}\r\n      checked={value || false}\r\n      onChange={(event) => onValueChange(event.currentTarget.checked)}\r\n      onBlur={close}/>\r\n  );\r\n};\r\n\r\nexport default CellEditorBoolean;\r\n","import React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { ICellEditorProps } from '../CellEditor/CellEditor';\r\n\r\nconst CellEditorDate: React.FunctionComponent<ICellEditorProps> = ({\r\n  column,\r\n  rowData,\r\n  close,\r\n  onValueChange,\r\n}) => {\r\n  const fieldValue = rowData[column.field];\r\n  const value = fieldValue && fieldValue.toISOString().split('T')[0];\r\n  return (\r\n    <input\r\n      autoFocus={true}\r\n      className={defaultOptions.css.dateInput}\r\n      type='date'\r\n      value={value || ''}\r\n      onChange={(event) => {\r\n        const targetValue: string = event.currentTarget.value;\r\n        onValueChange(targetValue ? new Date(targetValue) : null);\r\n      }}\r\n      onBlur={close}/>\r\n  );\r\n};\r\n\r\nexport default CellEditorDate;\r\n","import React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { ICellEditorProps } from '../CellEditor/CellEditor';\r\n\r\nconst CellEditorNumber: React.FunctionComponent<ICellEditorProps> = ({\r\n  column,\r\n  rowData,\r\n  close,\r\n  onValueChange,\r\n}) => {\r\n  const value = rowData[column.field];\r\n  return (\r\n    <input autoFocus={true}\r\n      className={defaultOptions.css.numberInput}\r\n      type='number'\r\n      value={value || ''}\r\n      onChange={(event) => {\r\n        const newValue = event.currentTarget.value;\r\n        onValueChange(Number(newValue) || null);\r\n      }}\r\n      onBlur={close}/>\r\n  );\r\n};\r\n\r\nexport default CellEditorNumber;\r\n","import React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { ICellEditorProps } from '../CellEditor/CellEditor';\r\n\r\nconst CellEditorString: React.FunctionComponent<ICellEditorProps> = ({\r\n  column, rowData, close, onValueChange,\r\n}) => {\r\n  const value = rowData[column.field] || '';\r\n  return (\r\n    <input autoFocus={true}\r\n      type='text'\r\n      className={defaultOptions.css.textInput}\r\n      value={value || ''}\r\n      onChange={(event) => onValueChange(event.currentTarget.value)}\r\n      onBlur={close}/>\r\n  );\r\n};\r\n\r\nexport default CellEditorString;\r\n","import React from 'react';\r\n\r\nimport { DataType } from '../../enums';\r\nimport { ICellEditorProps } from '../CellEditor/CellEditor';\r\nimport CellEditorBoolean from '../CellEditorBoolean/CellEditorBoolean';\r\nimport CellEditorDate from '../CellEditorDate/CellEditorDate';\r\nimport CellEditorNumber from '../CellEditorNumber/CellEditorNumber';\r\nimport CellEditorString from '../CellEditorString/CellEditorString';\r\n\r\nconst CellEditorDataType: React.FunctionComponent<ICellEditorProps> = (props) => {\r\n  switch (props.column.dataType) {\r\n    case DataType.Boolean: return <CellEditorBoolean {...props} />;\r\n    case DataType.Date: return <CellEditorDate {...props} />;\r\n    case DataType.Number: return <CellEditorNumber {...props} />;\r\n    default: return <CellEditorString {...props} />;\r\n  }\r\n};\r\n\r\nexport default CellEditorDataType;\r\n","import * as React from 'react';\r\n\r\nimport emptyFunc from '../../emptyFunc';\r\nimport { Column } from '../../Models/Column';\r\nimport { ValueChangeFunc } from '../../types';\r\nimport CellEditorDataType from '../CellEditorDataType/CellEditorDataType';\r\n\r\nexport interface IFilterCellProps  {\r\n  column: Column;\r\n  rowData: any;\r\n  close: () => void;\r\n  onValueChange: ValueChangeFunc;\r\n}\r\n\r\nconst FilterCell: React.FunctionComponent<IFilterCellProps> = ({\r\n  column,\r\n  column: { textAlign },\r\n  rowData,\r\n  onValueChange,\r\n}) => {\r\n  return (\r\n    <td style={{textAlign}}>\r\n      <CellEditorDataType\r\n        {...{ column, rowData }}\r\n        close={emptyFunc}\r\n        onValueChange={onValueChange}\r\n      />\r\n      <div className='tc-filter-row-clear-button' onClick={() => { onValueChange(null); }}>\r\n        Clear\r\n      </div>\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default FilterCell;\r\n","import React from 'react';\r\n\r\nimport emptyFunc from '../../emptyFunc';\r\nimport { Column } from '../../Models/Column';\r\nimport { FilterRowItem } from '../../Models/FilterRowItem';\r\nimport { OptionChangedFunc } from '../../types';\r\nimport { filterCellValueChangeHandler } from '../../Utils/FilterUtils';\r\nimport FilterCell from '../FilterCell/FilterCell';\r\n\r\nexport interface IFilterRowProps {\r\n  columns: Column[];\r\n  filterRow: FilterRowItem[];\r\n  onOptionChanged: OptionChangedFunc;\r\n}\r\n\r\nconst FilterRow: React.FunctionComponent<IFilterRowProps> = ({\r\n  columns,\r\n  filterRow,\r\n  onOptionChanged,\r\n}) => {\r\n  const rowData = filterRow.reduce((c: any, f, i, array) => {\r\n    c[f.field] = f.value;\r\n    return c;\r\n  }, {});\r\n  return (\r\n    <tr className='tc-filter-row'>\r\n      {columns.map((column) => {\r\n        return (\r\n          <FilterCell\r\n            key={column.field}\r\n            column={column}\r\n            rowData={rowData}\r\n            close={emptyFunc}\r\n            onValueChange={(value) => {\r\n              filterCellValueChangeHandler(value, column.field, filterRow, onOptionChanged);\r\n            }}\r\n          />\r\n        );\r\n      })}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default FilterRow;\r\n","import { Cell } from '../Models/Cell';\r\nimport { Column } from '../Models/Column';\r\nimport { FilterRowItem } from '../Models/FilterRowItem';\r\nimport { OptionChangedFunc } from '../types';\r\nimport { getCopyOfArrayAndDeleteItem, getCopyOfArrayAndInsertOrReplaceItem } from './ArrayUtils';\r\nimport { isEmpty } from './CommonUtils';\r\n\r\nexport const getRowEditableCells = (rowKeyValue: any, editableCells?: Cell[]): Cell[] => {\r\n  return editableCells ? editableCells.filter((c) => c.rowKeyValue === rowKeyValue) : [];\r\n};\r\n\r\nexport const searchData = (columns: Column[], data: any[], searchText: string): any[] => {\r\n  return columns.reduce((initialData: any[], c) => {\r\n    const filterFunction = (item: any) => {\r\n      return c.search ? c.search(searchText, item, c) : initialData.indexOf(item) < 0\r\n        && item[c.field].toString().toLowerCase().includes(searchText.toLowerCase());\r\n    };\r\n    return initialData.concat(data.filter(filterFunction));\r\n  }, []);\r\n};\r\n\r\nexport const filterData = (data: any[], filterRow: FilterRowItem[]): any[] => {\r\n  return filterRow.reduce((initialData, f) => {\r\n    const searcFunc = typeof f.value === 'string' ? (d: any) => d[f.field].toLowerCase().includes(f.value.toLowerCase())\r\n      : (d: any) => d[f.field] === f.value;\r\n    return initialData.filter(searcFunc);\r\n  }, data);\r\n};\r\n\r\nexport const filterCellValueChangeHandler = (\r\n    value: any, field: string, filterRow: FilterRowItem[], optionChangeHandler: OptionChangedFunc,\r\n  ) => {\r\n  let newFilterRow;\r\n  const newFRValue: FilterRowItem = {\r\n    field,\r\n    operator: '=',\r\n    value,\r\n  };\r\n  newFilterRow = isEmpty(value) ? getCopyOfArrayAndDeleteItem(newFRValue, 'field', filterRow)\r\n    : getCopyOfArrayAndInsertOrReplaceItem(newFRValue, 'field', filterRow);\r\n  optionChangeHandler({ filterRow: newFilterRow });\r\n};\r\n","import React from 'react';\r\n\r\nimport { Column } from '../../Models/Column';\r\nimport { GroupRowData } from '../../Models/GroupRowData';\r\nimport { OptionChangedFunc } from '../../types';\r\nimport { groupClick } from '../../Utils/GroupUtils';\r\n\r\nexport interface IGroupRowProps {\r\n  columns: Column[];\r\n  groupRowData: GroupRowData;\r\n  groupsExpanded: any[][];\r\n  onOptionChanged: OptionChangedFunc;\r\n}\r\n\r\nconst GroupRow: React.FunctionComponent<IGroupRowProps> = ({\r\n  columns,\r\n  groupRowData,\r\n  groupsExpanded,\r\n  onOptionChanged,\r\n}) => {\r\n  return (\r\n    <tr>\r\n      <td\r\n        colSpan={columns.length}\r\n        onClick={() => {\r\n          groupClick(groupsExpanded, groupRowData, onOptionChanged);\r\n        }}>{groupRowData.value.toString()}\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default GroupRow;\r\n","import { EditingMode } from '../enums';\r\nimport { Cell } from '../Models/Cell';\r\nimport { OptionChangedFunc } from '../types';\r\nimport { getCopyOfArrayAndAddItem } from './ArrayUtils';\r\n\r\nexport const isEditableCell = (editingMode: EditingMode, field: string, rowEditableCells: Cell[]): boolean => {\r\n  if (editingMode === EditingMode.Cell) {\r\n    return !!rowEditableCells.find((c) => c.field === field);\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const changeCellTextToCellEditorHandler = (\r\n  item: Cell, editableCells: Cell[], onOptionChanged: OptionChangedFunc) => {\r\n    const newEditableCells = getCopyOfArrayAndAddItem(item, editableCells);\r\n    onOptionChanged({ editableCells: newEditableCells });\r\n};\r\n\r\nexport const changeCellEditorToCellTextHandler = (\r\n  item: Cell, editableCells: Cell[], onOptionChanged: OptionChangedFunc) => {\r\n    const newEditableCells = editableCells.filter((c) => c.field !== item.field || c.rowKeyValue !== item.rowKeyValue);\r\n    onOptionChanged({ editableCells: newEditableCells });\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { isEmpty } from '../../Utils/CommonUtils';\r\nimport { ICellContentProps } from '../CellContent/CellContent';\r\n\r\nconst CellText: React.FunctionComponent<ICellContentProps> = ({\r\n  column,\r\n  rowData,\r\n  openEditor,\r\n}) => {\r\n  const value = rowData[column.field];\r\n  return (\r\n    <div className='tc-cell-text'\r\n      onClick={openEditor}\r\n    >{!isEmpty(value) ? value.toString() : <>&nbsp;</>}</div>\r\n  );\r\n};\r\n\r\nexport default CellText;\r\n","import * as React from 'react';\r\n\r\nimport { Column } from '../../Models/Column';\r\nimport CellText from '../CellText/CellText';\r\n\r\nexport interface ICellContentProps {\r\n  column: Column;\r\n  openEditor?: () => void;\r\n  rowData: any;\r\n}\r\n\r\nconst CellContent: React.FunctionComponent<ICellContentProps> = (props) => {\r\n  const { column: { cell } } = props;\r\n  return cell ? cell(props) :  <CellText {...props}/>;\r\n};\r\n\r\nexport default CellContent;\r\n","import { KeyboardEnum } from '../enums';\r\n\r\n/*\r\n  Used inside effects and returned as result from them,\r\n  it adds listener to esc & enter keys on life cycle of component\r\n*/\r\nexport const addEscEnterKeyEffect = (escKeyHandler: () => void, enterKeyHandler: () => void) => {\r\n  const handleKeyboard = (event: KeyboardEvent) => {\r\n    if (event.keyCode === KeyboardEnum.Esc) {\r\n      escKeyHandler();\r\n    }\r\n\r\n    if (event.keyCode === KeyboardEnum.Enter) {\r\n      enterKeyHandler();\r\n    }\r\n  };\r\n  return getEventListenerEffect('keyup', handleKeyboard);\r\n};\r\n\r\nexport const getEventListenerEffect = (eventName: string, handler: any) => {\r\n  window.addEventListener(eventName, handler);\r\n\r\n  return () => {\r\n    window.removeEventListener(eventName, handler);\r\n  };\r\n};\r\n","import React from 'react';\r\n\r\nexport interface ICellEditorValidationMessageProps {\r\n  message: string;\r\n}\r\n\r\nconst CellEditorValidationMessage: React.FunctionComponent<ICellEditorValidationMessageProps> = (props) => {\r\n  const { message } = props;\r\n\r\n  return (\r\n    <div className='tc validation-message'>{message}</div>\r\n  );\r\n};\r\n\r\nexport default CellEditorValidationMessage;\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\n\r\nimport { addEscEnterKeyEffect } from '../../Utils/EffectUtils';\r\nimport { getValidationValue } from '../../Utils/Validation';\r\nimport { ICellEditorProps } from '../CellEditor/CellEditor';\r\nimport CellEditorDataType from '../CellEditorDataType/CellEditorDataType';\r\nimport CellEditorValidationMessage from '../CellEditorValidationMessage/CellEditorValidationMessage';\r\n\r\nconst CellEditorState: React.FunctionComponent<ICellEditorProps> = (props) => {\r\n  const {\r\n    column,\r\n    column: {\r\n      field,\r\n    },\r\n    rowData,\r\n    close,\r\n    onValueChange,\r\n  } = props;\r\n  const [value, changeValue] = useState(rowData);\r\n\r\n  const validationValue = getValidationValue(value, column.field, column.validation);\r\n  const onValueStateChange = (newValue: any): void => {\r\n    const rowValue = { ...rowData, ...{ [field]: newValue } };\r\n    changeValue(rowValue);\r\n  };\r\n\r\n  const closeHandler = useCallback(() => {\r\n    if (!validationValue) {\r\n      onValueChange({ ...rowData, ...{ [field]: value[field] } });\r\n      close();\r\n    }\r\n  }, [validationValue, onValueChange, close, value, field, rowData]);\r\n\r\n  useEffect(() => {\r\n    return addEscEnterKeyEffect(close, closeHandler);\r\n  }, [close, closeHandler]);\r\n\r\n  const stateProps = { ...props, ...{\r\n    close: closeHandler,\r\n    onValueChange: onValueStateChange,\r\n    rowData : value,\r\n  }};\r\n\r\n  return (\r\n    <>\r\n      <CellEditorDataType {...stateProps} />\r\n      {validationValue && <CellEditorValidationMessage message={validationValue} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CellEditorState;\r\n","import { ValidationFunc } from '../types';\r\n\r\nexport const getValidationValue = (rowData: any, field: string, validation?: ValidationFunc) => {\r\n  if (validation) {\r\n    return validation(rowData[field], rowData);\r\n  }\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { Column } from '../../Models/Column';\r\nimport { ValueChangeFunc } from '../../types';\r\nimport CellEditorState from '../CellEditorState/CellEditorState';\r\n\r\nexport interface ICellEditorProps {\r\n  column: Column;\r\n  rowData: any;\r\n  close: () => void;\r\n  onValueChange: ValueChangeFunc;\r\n}\r\n\r\nconst CellEditor: React.FunctionComponent<ICellEditorProps> = (props) => {\r\n  const { editor } = props.column;\r\n  return editor ? editor(props) :  <CellEditorState {...props}/>;\r\n};\r\n\r\nexport default CellEditor;\r\n","import * as React from 'react';\r\n\r\nimport { EditingMode } from '../../enums';\r\nimport { Cell } from '../../Models/Cell';\r\nimport { Column } from '../../Models/Column';\r\nimport { OptionChangedFunc, RowDataChangedFunc } from '../../types';\r\nimport {\r\n  changeCellEditorToCellTextHandler, changeCellTextToCellEditorHandler,\r\n} from '../../Utils/CellUtils';\r\nimport CellContent from '../CellContent/CellContent';\r\nimport CellEditor from '../CellEditor/CellEditor';\r\n\r\nexport interface ICellComponentProps {\r\n  editableCells: Cell[];\r\n  column: Column;\r\n  editingMode: EditingMode;\r\n  isEditableCell: boolean;\r\n  onOptionChanged: OptionChangedFunc;\r\n  onRowDataChanged: RowDataChangedFunc;\r\n  rowData: any;\r\n  rowKey: any;\r\n}\r\n\r\nconst CellComponent: React.FunctionComponent<ICellComponentProps> = ({\r\n  editableCells,\r\n  column,\r\n  column: { textAlign },\r\n  isEditableCell,\r\n  onOptionChanged,\r\n  editingMode,\r\n  onRowDataChanged,\r\n  rowData,\r\n  rowKey,\r\n}) => {\r\n  const rowKeyValue = rowData[rowKey];\r\n  return (\r\n    <td style={{textAlign}}>\r\n      { isEditableCell ? (\r\n          <CellEditor\r\n            {...{ column, rowData }}\r\n            close={\r\n              () => changeCellEditorToCellTextHandler(\r\n                { field: column.field, rowKeyValue },\r\n                editableCells,\r\n                onOptionChanged)\r\n            }\r\n            onValueChange={onRowDataChanged}\r\n          />\r\n        )\r\n        : (\r\n          <CellContent {...{ column, rowData }}\r\n            openEditor={\r\n              () => editingMode !== EditingMode.None && changeCellTextToCellEditorHandler(\r\n                {field: column.field, rowKeyValue },\r\n                editableCells,\r\n                onOptionChanged)\r\n            }\r\n          />\r\n        )\r\n      }\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default CellComponent;\r\n","import React from 'react';\r\n\r\nimport { EditingMode } from '../../enums';\r\nimport { Cell } from '../../Models/Cell';\r\nimport { Column } from '../../Models/Column';\r\nimport { OptionChangedFunc, RowDataChangedFunc } from '../../types';\r\nimport { isEditableCell } from '../../Utils/CellUtils';\r\nimport { getRowEditableCells } from '../../Utils/FilterUtils';\r\nimport CellComponent from '../CellComponent/CellComponent';\r\n\r\nexport interface IRowProps {\r\n  editableCells: Cell[];\r\n  editingMode: EditingMode;\r\n  columns: Column[];\r\n  onRowDataChanged: RowDataChangedFunc;\r\n  onOptionChanged: OptionChangedFunc;\r\n  rowKey: any;\r\n  rowData: any;\r\n}\r\n\r\nconst Row: React.FunctionComponent<IRowProps> = ({\r\n  columns,\r\n  editableCells,\r\n  editingMode,\r\n  onOptionChanged,\r\n  onRowDataChanged,\r\n  rowData,\r\n  rowKey,\r\n}) => {\r\n  const rowEditableCells = getRowEditableCells(rowData[rowKey], editableCells);\r\n  return (\r\n    <tr className='tc-row'>\r\n      {columns.map((column) => (\r\n        <CellComponent\r\n          key={column.field}\r\n          rowData={rowData}\r\n          column={column}\r\n          rowKey={rowKey}\r\n          editingMode={editingMode}\r\n          isEditableCell={isEditableCell(editingMode, column.field, rowEditableCells)}\r\n          editableCells={editableCells}\r\n          onOptionChanged={onOptionChanged}\r\n          onRowDataChanged={onRowDataChanged}\r\n        />\r\n      ))}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default Row;\r\n","import * as React from 'react';\r\n\r\nimport { EditingMode } from '../../enums';\r\nimport groupMark from '../../groupMark';\r\nimport { Cell } from '../../Models/Cell';\r\nimport { Column } from '../../Models/Column';\r\nimport { FilterRowItem } from '../../Models/FilterRowItem';\r\nimport { Group } from '../../Models/Group';\r\nimport { DataChangedFunc, OptionChangedFunc } from '../../types';\r\nimport { getCopyOfArrayAndInsertOrReplaceItem } from '../../Utils/ArrayUtils';\r\nimport { getExpandedGroups, getGroupedData } from '../../Utils/GroupUtils';\r\nimport FilterRow from '../FilterRow/FilterRow';\r\nimport GroupRow from '../GroupRow/GroupRow';\r\nimport Row from '../Row/Row';\r\n\r\nexport interface ITableBodyProps {\r\n  columns: Column[];\r\n  data: any[];\r\n  editableCells?: Cell[];\r\n  editingMode?: EditingMode;\r\n  filterRow?: FilterRowItem[];\r\n  groups?: Group[];\r\n  groupsExpanded?: any[][];\r\n  onDataChanged?: DataChangedFunc;\r\n  onOptionChanged: OptionChangedFunc;\r\n  rowKey: string;\r\n}\r\n\r\nconst TableBody: React.FunctionComponent<ITableBodyProps> = ({\r\n  columns,\r\n  data,\r\n  editableCells = [],\r\n  editingMode = EditingMode.None,\r\n  filterRow,\r\n  groups,\r\n  groupsExpanded,\r\n  onDataChanged = () => {},\r\n  onOptionChanged,\r\n  rowKey,\r\n}) => {\r\n  const groupedData = groups ? getGroupedData(data, groups, groupsExpanded) : data;\r\n\r\n  if (groups && !groupsExpanded) {\r\n    groupsExpanded = getExpandedGroups(groupedData);\r\n  }\r\n  return (\r\n    <tbody>\r\n      {filterRow && <FilterRow columns={columns} filterRow={filterRow} onOptionChanged={onOptionChanged}/>}\r\n      {groupedData.map((d) => {\r\n        return (\r\n          d.groupMark === groupMark\r\n          ? (\r\n            <GroupRow\r\n              key={d.key}\r\n              columns={columns}\r\n              groupRowData={d}\r\n              groupsExpanded={groupsExpanded || []}\r\n              onOptionChanged={onOptionChanged} />\r\n          ) : (\r\n            <Row\r\n              key={d[rowKey]}\r\n              columns={columns}\r\n              rowData={d}\r\n              rowKey={rowKey}\r\n              onOptionChanged={onOptionChanged}\r\n              editableCells={editableCells}\r\n              editingMode={editingMode}\r\n              onRowDataChanged={(rowData: any) => {\r\n                const newData = getCopyOfArrayAndInsertOrReplaceItem(rowData, rowKey, data);\r\n                onDataChanged(newData);\r\n              }}\r\n            />\r\n          )\r\n        );\r\n      })}\r\n    </tbody>\r\n  );\r\n};\r\n\r\nexport default TableBody;\r\n","import * as React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { EditingMode, SortingMode } from '../../enums';\r\nimport { Cell } from '../../Models/Cell';\r\nimport { Column } from '../../Models/Column';\r\nimport { FilterRowItem } from '../../Models/FilterRowItem';\r\nimport { Group } from '../../Models/Group';\r\nimport { DataChangedFunc, OptionChangedFunc } from '../../types';\r\nimport { filterData, searchData } from '../../Utils/FilterUtils';\r\nimport { sortData } from '../../Utils/SortUtils';\r\nimport { convertToColumnTypes } from '../../Utils/TypeUtils';\r\nimport HeadRow from '../HeadRow/HeadRow';\r\nimport TableBody from '../TableBody/TableBody';\r\n\r\n/**\r\n * Sets the options of the table which are related to its looks\r\n */\r\nexport interface ITableOption {\r\n  /** Column's settings */\r\n  columns: Column[];\r\n  /** Specifies the array of cells which are being edited */\r\n  editableCells?: Cell[];\r\n  /** Sets the editing mode */\r\n  editingMode?: EditingMode;\r\n  /** Sets filters for columns */\r\n  filterRow?: FilterRowItem[];\r\n  /** Sets the groups option */\r\n  groups?: Group[];\r\n  /** Sets the expanded groups */\r\n  groupsExpanded?: any[][];\r\n  /** Specifies the column unique field which will be used as a key */\r\n  rowKey: string;\r\n  /** Sets the sorting mode */\r\n  sortingMode?: SortingMode;\r\n  /** Sets the search by data columns */\r\n  search?: string;\r\n}\r\n\r\ninterface ITableEvents {\r\n  /** Called each time Data is changed */\r\n  onDataChanged?: DataChangedFunc;\r\n  /** Called each time ITableOption changed */\r\n  onOptionChanged: OptionChangedFunc;\r\n}\r\n\r\ninterface IAllProps extends ITableEvents, ITableOption {\r\n  /** The data which is shown in Table's rows */\r\n  data: any[];\r\n}\r\n\r\nexport const Table: React.FunctionComponent<IAllProps> = (props) => {\r\n  const {\r\n    columns,\r\n    filterRow,\r\n    onOptionChanged,\r\n    search,\r\n    sortingMode = SortingMode.None,\r\n  } = props;\r\n  let { data } = props;\r\n  data = search ? searchData(columns, data, search) : data;\r\n  data = convertToColumnTypes(data, columns);\r\n  data = filterRow ? filterData(data, filterRow) : data;\r\n  data = sortData(columns, data);\r\n  return (\r\n    <div className='tc'>\r\n      <table className={defaultOptions.css.table}>\r\n        <thead className={defaultOptions.css.thead}>\r\n          <HeadRow columns={columns} onOptionChanged={onOptionChanged} sortingMode={sortingMode}/>\r\n        </thead>\r\n        <TableBody {...props} data={data}/>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n","import { SortDirection } from '../enums';\r\nimport { Column } from '../Models/Column';\r\n\r\nexport const sortData = (columns: Column[], data: any): any[] => {\r\n  const sortedColumn = columns.find((column) => column.sortDirection);\r\n  if (!sortedColumn) { return data; }\r\n  const columnKey = sortedColumn.field;\r\n  const sortFunc = sortedColumn.sortDirection === SortDirection.Ascend ?\r\n    ((a: any, b: any) => a[columnKey] < b[columnKey] ? -1 : 1)\r\n    : ((a: any, b: any) => a[columnKey] > b[columnKey] ? -1 : 1);\r\n  const newData = [...data].sort(sortFunc);\r\n  return newData;\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, EditingMode, TextAlign } from '../../lib/enums';\r\nimport { CellFuncPropsWithChildren, OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 55, passed: false, nextTry: new Date(2019, 10, 8, 10) },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false, nextTry: new Date(2019, 11, 8, 10) },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Marshall Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false, nextTry: new Date(2019, 10, 9, 10) },\r\n];\r\n\r\nconst CustomCell: React.FC<CellFuncPropsWithChildren> = ({\r\n  column: { field }, rowData, openEditor,\r\n}) => {\r\n  return (\r\n    <div onClick={openEditor}>\r\n      {rowData[field] ? 'Passed' : 'Failed'}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { dataType: DataType.String, field: 'name', title: 'Name', width: '30%' },\r\n    { field: 'score', title: 'Score', dataType: DataType.Number, width: '10%', textAlign: TextAlign.Right },\r\n    {\r\n      cell: CustomCell,\r\n      dataType: DataType.Boolean,\r\n      field: 'passed',\r\n      textAlign: TextAlign.Right,\r\n      title: 'Results',\r\n      width: '10%',\r\n    },\r\n    { field: 'nextTry', title: 'Next Try', dataType: DataType.Date, textAlign: TextAlign.Right  },\r\n  ],\r\n  editingMode: EditingMode.Cell,\r\n  rowKey: 'id',\r\n};\r\n\r\nconst CustomCellDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n\r\n  const [data, changeData] = useState(dataArray);\r\n  const onDataChanged: OptionChangedFunc = (newValue) => {\r\n    changeData(newValue);\r\n  };\r\n  return (\r\n    <Table\r\n      {...option}\r\n      data={data}\r\n      onOptionChanged={onOptionChanged}\r\n      onDataChanged={onDataChanged}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CustomCellDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, EditingMode } from '../../lib/enums';\r\nimport { EditorFuncPropsWithChildren, OptionChangedFunc } from '../../lib/types';\r\nimport { toBoolean } from '../../lib/Utils/TypeUtils';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 55, passed: false, nextTry: new Date(2019, 10, 8, 10) },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false, nextTry: new Date(2019, 11, 8, 10) },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Marshall Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false, nextTry: new Date(2019, 10, 9, 10) },\r\n];\r\n\r\nconst CustomEditor: React.FC<EditorFuncPropsWithChildren> = ({\r\n  column: { field }, rowData, close, onValueChange,\r\n}) => {\r\n  const [value, setValue] = useState(rowData[field]);\r\n  return (\r\n    <div>\r\n    <input\r\n      className='form-control'\r\n      type='text'\r\n      value={value}\r\n      onChange={(event) => setValue(event.currentTarget.value)}/>\r\n    <button onClick={() => {\r\n      onValueChange({ ...rowData, ...{ [field]: value } });\r\n      close();\r\n    }}>Save</button>\r\n    <button onClick={close}>Cancel</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CustomLookupEditor: React.FC<EditorFuncPropsWithChildren> = ({\r\n  column: { field }, rowData, close,  onValueChange,\r\n}) => {\r\n  const [value, setValue] = useState(rowData[field]);\r\n  return (\r\n    <div>\r\n      <select\r\n        className='form-control'\r\n        autoFocus={true}\r\n        defaultValue={value}\r\n        onBlur={() => {\r\n          onValueChange({ ...rowData, ...{ [field]: value } });\r\n          close();\r\n        }}\r\n        onChange={(event) => {\r\n          setValue(toBoolean(event.currentTarget.value));\r\n        }}>\r\n        <option value={'true'}>True</option>\r\n        <option value={'false'}>False</option>\r\n      </select>\r\n    </div >\r\n  );\r\n};\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { dataType: DataType.String, field: 'name', title: 'Name', editor: CustomEditor, width: '30%' },\r\n    { field: 'score', title: 'Score', dataType: DataType.Number, width: '10%' },\r\n    { dataType: DataType.Boolean, field: 'passed', title: 'Passed', editor: CustomLookupEditor, width: '10%' },\r\n    { field: 'nextTry', title: 'Next Try', dataType: DataType.Date },\r\n  ],\r\n  editingMode: EditingMode.Cell,\r\n  rowKey: 'id',\r\n};\r\n\r\nconst CustomEditorDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n\r\n  const [data, changeData] = useState(dataArray);\r\n  const onDataChanged: OptionChangedFunc = (newValue) => {\r\n    changeData(newValue);\r\n  };\r\n  return (\r\n    <Table\r\n      {...option}\r\n      data={data}\r\n      onOptionChanged={onOptionChanged}\r\n      onDataChanged={onDataChanged}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CustomEditorDemo;\r\n","\r\nexport default class Demo {\r\n  constructor(\r\n    public component: React.FC,\r\n    public path: string,\r\n    public title: string,\r\n    public fileName: string) {\r\n\r\n  }\r\n}\r\n","import { CssClasses } from './Models/CssClasses';\r\n\r\nconst bootstrapCssClasses = new CssClasses();\r\nbootstrapCssClasses.table = 'table table-striped';\r\nbootstrapCssClasses.thead = 'thead-dark';\r\nbootstrapCssClasses.checkbox = 'form-control';\r\nbootstrapCssClasses.dateInput = 'form-control';\r\nbootstrapCssClasses.numberInput = 'form-control';\r\nbootstrapCssClasses.textInput = 'form-control';\r\n\r\nexport default bootstrapCssClasses;\r\n","import './DemoPage.scss';\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport Highlight from 'react-highlight';\r\n\r\nimport bootstrapCssClasses from '../lib/bootstrapCssClasses';\r\nimport defaultOptions from '../lib/defaultOptions';\r\nimport Demo from './Demo';\r\n\r\ndefaultOptions.css = bootstrapCssClasses;\r\n\r\nconst getDemoPage = (demo: Demo) => {\r\n  return () => {\r\n    const [text, changeText]: [string, any] = useState('');\r\n    useEffect(() => {\r\n      const name = demo.fileName;\r\n      fetch(`demos/${name}/${name}.tsx`)\r\n        .then((res) => res.text())\r\n        .then((fileText) => changeText(fileText));\r\n    }, []);\r\n    return (\r\n      <div>\r\n        <h1>{demo.title}</h1>\r\n        <demo.component />\r\n        <Highlight className='language-typescript'>\r\n          {text}\r\n        </Highlight>\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\nexport default getDemoPage;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, EditingMode } from '../../lib/enums';\r\nimport { OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 55, passed: false, nextTry: new Date(2019, 10, 8, 10) },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false, nextTry: new Date(2019, 11, 8, 10) },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Marshall Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false, nextTry: new Date(2019, 10, 9, 10) },\r\n];\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { field: 'name', title: 'Name', dataType: DataType.String, width: '30%' },\r\n    { field: 'score', title: 'Score', dataType: DataType.Number, width: '10%' },\r\n    { field: 'passed', title: 'Passed', dataType: DataType.Boolean, width: '10%' },\r\n    { field: 'nextTry', title: 'Next Try', dataType: DataType.Date },\r\n  ],\r\n  editableCells: [{\r\n    field: 'name',\r\n    rowKeyValue: 2,\r\n  }],\r\n  editingMode: EditingMode.Cell,\r\n  rowKey: 'id',\r\n};\r\n\r\nconst EditingDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n\r\n  const [data, changeData] = useState(dataArray);\r\n  const onDataChanged: OptionChangedFunc = (newValue) => {\r\n    changeData(newValue);\r\n  };\r\n  return (\r\n    <Table\r\n      {...option}\r\n      data={data}\r\n      onOptionChanged={onOptionChanged}\r\n      onDataChanged={onDataChanged}\r\n    />\r\n  );\r\n};\r\n\r\nexport default EditingDemo;\r\n","export const isEmpty = (value: any) => (value == null || value.length === 0);\r\n\r\nconst contains = (data: any[], item: any) => data[item.field].includes(item.value);\r\nconst equals = (data: any[], item: any) => ((typeof item.value === 'string')\r\n  ? data[item.field].toLowerCase().includes(item.value.toLowerCase())\r\n  : data[item.field] === item.value);\r\nconst notEqual = (data: any[], item: any) => !equals(data, item);\r\nconst more = (data: any[], item: any) => data[item.field] > item.value;\r\nconst moreOrEqual = (data: any[], item: any) => data[item.field] >= item.value;\r\nconst less = (data: any[], item: any) => data[item.field] < item.value;\r\nconst lessOrEqual = (data: any[], item: any) => data[item.field] < item.value;\r\nconst blank = (data: any[], item: any) => isEmpty(data[item.field]);\r\nconst notBlank = (data: any[], item: any) => !isEmpty(data[item.field]);\r\nexport const filterItem = (data: any[], filter: any) => {\r\n  switch (filter.operator) {\r\n    case 'contains': return contains(data, filter);\r\n    case '=': return equals(data, filter);\r\n    case '<>': return notEqual(data, filter);\r\n    case '>': return more(data, filter);\r\n    case '>=': return moreOrEqual(data, filter);\r\n    case '<': return less(data, filter);\r\n    case '<=': return lessOrEqual(data, filter);\r\n    case 'blank': return blank(data, filter);\r\n    case 'notBlank': return notBlank(data, filter);\r\n    default: throw Error('unknown operator');\r\n  }\r\n};\r\n\r\nexport const filterGroup = (data: any[], groupName: string, items: any[]): any[] =>\r\n  (groupName.toLowerCase() === 'or' ? filterGroupOr(data, items) : filterGroupAnd(data, items));\r\n\r\nexport const filterGroupOr = (data: any[], items: any[]): any[]  => {\r\n  const filteredData = items.reduce((initialData: any, item: any) => {\r\n    if (item.items) {\r\n      const grouped = filterGroup(data, item.groupName, item.items);\r\n      return initialData.concat(grouped.filter((d: any) => initialData.indexOf(d) < 0));\r\n    }\r\n    return initialData.concat(data.filter((d: any) => initialData.indexOf(d) < 0 && filterItem(d, item)));\r\n  }, []);\r\n  return data.filter((d) => filteredData.includes(d));\r\n};\r\n\r\nexport const filterGroupAnd = (data: any[], items: any[]): any[]  => {\r\n  return items.reduce((initialData: any[], item: any) => {\r\n    if (item.items) { return filterGroup(initialData, item.groupName, item.items); }\r\n    return initialData.filter((d: any[]) => filterItem(d, item));\r\n  }, data);\r\n};\r\n\r\nexport const filterData = (data: any[] , filterValue: any): any[]  => {\r\n  return filterGroup(data, filterValue.groupName, filterValue.items);\r\n};\r\n","import React, { useState } from 'react';\r\nimport FilterControl from 'react-filter-control';\r\nimport { IFilterControlFilterValue } from 'react-filter-control/interfaces';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, SortDirection, SortingMode } from '../../lib/enums';\r\nimport { OptionChangedFunc } from '../../lib/types';\r\nimport { filterData } from './filterData';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 55, passed: false },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Tom Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false },\r\n];\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { field: 'name', title: 'Name', dataType: DataType.String, sortDirection: SortDirection.Descend },\r\n    { field: 'score', title: 'Score', dataType: DataType.Number },\r\n    { field: 'passed', title: 'Passed', dataType: DataType.Boolean },\r\n  ],\r\n  rowKey: 'id',\r\n  sortingMode: SortingMode.Single,\r\n};\r\n\r\nexport const fields = [{\r\n  caption: 'Name',\r\n  name: 'name',\r\n  operators: [{\r\n    caption: 'Contains',\r\n    name: 'contains',\r\n  }, {\r\n    caption: 'Does not equal',\r\n    name: '<>',\r\n  }],\r\n}, {\r\n  caption: 'Score',\r\n  name: 'score',\r\n  operators: [{\r\n    caption: 'Equals',\r\n    name: '=',\r\n  }],\r\n}];\r\n\r\nexport const groups = [{\r\n  caption: 'And',\r\n  name: 'and',\r\n}, {\r\n  caption: 'Or',\r\n  name: 'or',\r\n}];\r\nexport const filter: IFilterControlFilterValue = {\r\n  groupName: 'and',\r\n  items: [\r\n    {\r\n      field: 'name',\r\n      key: '1',\r\n      operator: 'contains',\r\n      value: 'Tom',\r\n    },\r\n  ],\r\n};\r\n\r\nconst FilterExtendedDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n  const [filterValue, changeFilter] = useState(filter);\r\n  const onFilterChangedChanged = (newFilterValue: IFilterControlFilterValue) => {\r\n    changeFilter(newFilterValue);\r\n  };\r\n  const filteredData = filterData(dataArray, filterValue);\r\n  return (\r\n    <>\r\n      <FilterControl {...{fields, groups, filterValue,  onFilterValueChanged: onFilterChangedChanged}}/>\r\n      <Table\r\n        {...option}\r\n        data={filteredData}\r\n        onOptionChanged={onOptionChanged}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FilterExtendedDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, SortDirection } from '../../lib/enums';\r\nimport { OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 55, passed: false },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Marshall Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false },\r\n];\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { field: 'name', title: 'Name', dataType: DataType.String, sortDirection: SortDirection.Descend },\r\n    { field: 'score', title: 'Score', dataType: DataType.Number },\r\n    { field: 'passed', title: 'Passed', dataType: DataType.Boolean },\r\n  ],\r\n  filterRow: [{\r\n    field: 'name',\r\n    operator: '=',\r\n    value: 'Billi Bob',\r\n  }],\r\n  rowKey: 'id',\r\n};\r\n\r\nconst FilterRowDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n  return (\r\n    <Table\r\n      {...option}\r\n      data={dataArray}\r\n      onOptionChanged={onOptionChanged}\r\n    />\r\n  );\r\n};\r\n\r\nexport default FilterRowDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, EditingMode } from '../../lib/enums';\r\nimport { OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray = [\r\n  { id: 1, type: 'Cat', name: 'Kas', country: 'Czech Republic', age: 2 },\r\n  { id: 2, type: 'Dog', name: 'Rex', country: 'Montenegro', age: 6 },\r\n  { id: 3, type: 'Cat', name: 'Simba', country: 'France', age: 12 },\r\n  { id: 4, type: 'Dog', name: 'Beethoven', country: 'Czech Republic', age: 3 },\r\n  { id: 5, type: 'Cat', name: 'Hash', country: 'Czech Republic', age: 8 },\r\n];\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { field: 'type', title: 'Type', dataType: DataType.String },\r\n    { field: 'name', title: 'Name', dataType: DataType.String },\r\n    { field: 'country', title: 'Country', dataType: DataType.String },\r\n    { field: 'age', title: 'Age', dataType: DataType.Number },\r\n  ],\r\n  editingMode: EditingMode.Cell,\r\n  groups: [{ field: 'country' }, { field: 'type' }],\r\n  rowKey: 'id',\r\n};\r\n\r\nconst GroupingDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n  const [data, changeData] = useState(dataArray);\r\n  const onDataChanged: OptionChangedFunc = (newValue) => {\r\n    changeData(newValue);\r\n  };\r\n  return (\r\n    <Table\r\n      {...option}\r\n      data={data}\r\n      onOptionChanged={onOptionChanged}\r\n      onDataChanged={onDataChanged}\r\n    />\r\n  );\r\n};\r\n\r\nexport default GroupingDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType } from '../../lib/enums';\r\nimport { OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 55, passed: false },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Marshall Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false },\r\n];\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { field: 'name', title: 'Name', dataType: DataType.String, width: '40%' },\r\n    { field: 'score', title: 'Score', dataType: DataType.Number, width: '10%' },\r\n    {\r\n      dataType: DataType.Boolean,\r\n      field: 'passed',\r\n      search: (searchText, rowData) => {\r\n        return (searchText === 'false' && !rowData.passed) || (searchText === 'true' && rowData.passed);\r\n      },\r\n      title: 'Passed',\r\n    },\r\n  ],\r\n  rowKey: 'id',\r\n  search: 'Billi Bob',\r\n};\r\n\r\nconst SearchDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n  return (\r\n    <>\r\n      <input defaultValue={option.search} onChange={(event) => {\r\n        onOptionChanged({ search: event.currentTarget.value });\r\n      }}/>\r\n      <Table\r\n        {...option}\r\n        data={dataArray}\r\n        onOptionChanged={onOptionChanged}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, SortDirection, SortingMode } from '../../lib/enums';\r\nimport { OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 55, passed: false },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Marshall Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false },\r\n];\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { field: 'name', title: 'Name', dataType: DataType.String, sortDirection: SortDirection.Descend },\r\n    { field: 'score', title: 'Score', dataType: DataType.Number },\r\n    { field: 'passed', title: 'Passed', dataType: DataType.Boolean },\r\n  ],\r\n  rowKey: 'id',\r\n  sortingMode: SortingMode.Single,\r\n};\r\n\r\nconst SortingDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n  return (\r\n    <Table\r\n      {...option}\r\n      data={dataArray}\r\n      onOptionChanged={onOptionChanged}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SortingDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, EditingMode } from '../../lib/enums';\r\nimport { OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 155, passed: false },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Marshall Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false },\r\n];\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { field: 'name', title: 'Name', dataType: DataType.String, width: '40%' },\r\n    {\r\n      dataType: DataType.Number,\r\n      field: 'score',\r\n      title: 'Score',\r\n      validation: (value: any, rowData: any) => {\r\n        if (value > 100) {\r\n          return `Value can't be more than 100`;\r\n        }\r\n      },\r\n      width: '10%',\r\n    },\r\n    {\r\n      dataType: DataType.Boolean,\r\n      field: 'passed',\r\n      title: 'Passed',\r\n    },\r\n  ],\r\n  editableCells: [{\r\n    field: 'score',\r\n    rowKeyValue: 2,\r\n  }],\r\n  editingMode: EditingMode.Cell,\r\n  rowKey: 'id',\r\n};\r\n\r\nconst ValidationDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({ ...option, ...value });\r\n  };\r\n\r\n  const [data, changeData] = useState(dataArray);\r\n  const onDataChanged: OptionChangedFunc = (newValue) => {\r\n    changeData(newValue);\r\n  };\r\n  return (\r\n    <>\r\n      <Table\r\n        {...option}\r\n        data={data}\r\n        onOptionChanged={onOptionChanged}\r\n        onDataChanged={onDataChanged}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ValidationDemo;\r\n","import './Demos.scss';\r\n\r\nimport React from 'react';\r\nimport { HashRouter, Link, Route } from 'react-router-dom';\r\n\r\nimport CustomCellDemo from './CustomCellDemo/CustomCellDemo';\r\nimport CustomEditorDemo from './CustomEditorDemo/CustomEditorDemo';\r\nimport Demo from './Demo';\r\nimport getDemoPage from './DemoPage';\r\nimport EditingDemo from './EditingDemo/EditingDemo';\r\nimport FilterExtendedDemo from './FilterExtendedDemo/FilterExtendedDemo';\r\nimport FilterRowDemo from './FilterRowDemo/FilterRowDemo';\r\nimport GroupingDemo from './GroupingDemo/GroupingDemo';\r\nimport SearchDemo from './SearchDemo/SearchDemo';\r\nimport SortingDemo from './SortingDemo/SortingDemo';\r\nimport ValidationDemo from './ValidationDemo/ValidationDemo';\r\n\r\nconst demos: Demo[] = [\r\n  new Demo(CustomCellDemo, '/custom-cell', 'Custom Cell', 'CustomCellDemo'),\r\n  new Demo(CustomEditorDemo, '/custom-editor', 'Custom Editor', 'CustomEditorDemo'),\r\n  new Demo(EditingDemo, '/editing', 'Editing', 'EditingDemo'),\r\n  new Demo(FilterExtendedDemo, '/filter-extended', 'Filter Extended', 'FilterExtendedDemo'),\r\n  new Demo(FilterRowDemo, '/filter-row', 'Filter Row', 'FilterRowDemo'),\r\n  new Demo(GroupingDemo, '/grouping', 'Grouping', 'GroupingDemo'),\r\n  new Demo(SearchDemo, '/search', 'Search', 'SearchDemo'),\r\n  new Demo(SortingDemo, '/sorting', 'Sorting', 'SortingDemo'),\r\n  new Demo(ValidationDemo, '/validation', 'Validation', 'ValidationDemo'),\r\n];\r\n\r\nconst cases = demos.map((d: Demo) => {\r\n  return ({ demoComponent: getDemoPage(d), name: d.fileName, title: d.title, path: d.path });\r\n});\r\n\r\nconst defaultDemo: Demo = demos.find((d) => d.component === GroupingDemo) || demos[0];\r\n\r\nconst Demos: React.FC = () => {\r\n  return (\r\n    <HashRouter>\r\n      <div className='demos'>\r\n        <nav>\r\n          <ul>\r\n            <li>\r\n              <Link to='/'>Home</Link>\r\n            </li>\r\n          {\r\n            cases.map((c) => (\r\n                <li key={c.name}>\r\n                  <Link to={c.path}>{c.title}</Link>\r\n                </li>\r\n              ),\r\n            )\r\n          }\r\n          </ul>\r\n        </nav>\r\n        <main>\r\n          <Route exact={true} path='/' component={getDemoPage(defaultDemo)} />\r\n          {\r\n            cases.map((c) => (\r\n                <Route key={c.name} path={c.path} component={c.demoComponent} />\r\n              ),\r\n            )\r\n          }\r\n        </main>\r\n      </div>\r\n    </HashRouter>\r\n  );\r\n};\r\n\r\nexport default Demos;\r\n","import './App.css';\r\nimport './lib/styles.scss';\r\n\r\nimport React from 'react';\r\n\r\nimport Demos from './Demos/Demos';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Demos />\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}