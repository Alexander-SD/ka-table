{"version":3,"sources":["lib/enums.ts","lib/Models/CssClasses.ts","lib/defaultOptions.ts","lib/Utils/ArrayUtils.ts","lib/Utils/CommonUtils.ts","lib/Utils/TypeUtils.ts","lib/Utils/HeadRowUtils.ts","lib/Components/EmptyCells/EmptyCells.tsx","lib/Components/HeadCell/HeadCell.tsx","lib/Components/HeadRow/HeadRow.tsx","lib/groupMark.ts","lib/Utils/GroupUtils.ts","lib/emptyFunc.ts","lib/Components/CellEditorBoolean/CellEditorBoolean.tsx","lib/Components/CellEditorDate/CellEditorDate.tsx","lib/Components/CellEditorNumber/CellEditorNumber.tsx","lib/Components/CellEditorString/CellEditorString.tsx","lib/Components/CellEditorDataType/CellEditorDataType.tsx","lib/Components/FilterCell/FilterCell.tsx","lib/Components/FilterRow/FilterRow.tsx","lib/Utils/FilterUtils.ts","lib/Components/GroupRow/GroupRow.tsx","lib/Utils/CellUtils.ts","lib/Components/CellText/CellText.tsx","lib/Components/CellContent/CellContent.tsx","lib/Utils/EffectUtils.ts","lib/Components/CellEditorValidationMessage/CellEditorValidationMessage.tsx","lib/Components/CellEditorState/CellEditorState.tsx","lib/Utils/Validation.ts","lib/Components/CellEditor/CellEditor.tsx","lib/Components/CellComponent/CellComponent.tsx","lib/Components/Row/Row.tsx","lib/Components/TableBody/TableBody.tsx","lib/Components/Table/Table.tsx","lib/Utils/SortUtils.ts","Demos/CustomCellDemo/CustomCellDemo.tsx","Demos/CustomEditorDemo/CustomEditorDemo.tsx","Demos/Demo.ts","Demos/DemoPage.tsx","Demos/EditingDemo/EditingDemo.tsx","Demos/FilterExtendedDemo/filterData.ts","Demos/FilterExtendedDemo/FilterExtendedDemo.tsx","Demos/FilterRowDemo/FilterRowDemo.tsx","Demos/GroupingDemo/GroupingDemo.tsx","Demos/SearchDemo/SearchDemo.tsx","Demos/SortingDemo/SortingDemo.tsx","Demos/ValidationDemo/ValidationDemo.tsx","Demos/Demos.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DataType","EditingMode","KeyboardEnum","SortDirection","SortingMode","TextAlign","cssClasses","table","thead","theadRow","theadCell","row","cell","iconGroupArrowCollapsed","iconGroupArrowExpanded","iconClose","iconSortArrowDown","iconSortArrowUp","checkbox","dateInput","numberInput","textInput","defaultOptions","columnDataType","String","columnSortDirection","Ascend","css","getCopyOfArrayAndInsertOrReplaceItem","item","rowKey","array","newArray","rowKeyValue","index","findIndex","i","splice","push","isEmpty","value","length","convertToColumnTypes","data","columns","map","d","nd","forEach","c","field","dataType","toString","Number","Date","Boolean","toBoolean","Object","toLowerCase","trim","getNextSortDirection","previousSortdirection","Descend","EmptyCells","count","Array","key","className","HeadCell","sortClick","column","width","title","textAlign","sortDirection","scope","style","onClick","undefined","HeadRow","onOptionChanged","sortingMode","groupColumnsCount","Single","newColumns","newColumn","newColumnIndex","sortUtilsClickHandler","groupMark","convertToFlat","grouped","result","groupValue","groupKey","isArray","concat","getGroupedStructure","groups","expandedDeep","groupsExpanded","group","shift","groupBy","groupExpandedItems","filter","ge","some","newStructure","set","keyGetter","isEmptyValue","Map","collection","get","emptyFunc","CellEditorBoolean","rowData","close","onValueChange","autoFocus","type","ref","elem","indeterminate","checked","onChange","event","currentTarget","onBlur","CellEditorDate","fieldValue","toISOString","split","targetValue","CellEditorNumber","newValue","CellEditorString","CellEditorDataType","props","FilterCell","FilterRow","filterRow","reduce","f","optionChangeHandler","newFRValue","operator","getCopyOfArrayAndDeleteItem","filterCellValueChangeHandler","GroupRow","emptyColumnsCount","groupRowData","colSpan","newGroupsExpanded","JSON","stringify","groupClick","isEditableCell","editingMode","rowEditableCells","Cell","find","CellText","openEditor","CellContent","getEventListenerEffect","eventName","handler","window","addEventListener","removeEventListener","CellEditorValidationMessage","message","CellEditorState","useState","changeValue","validationValue","validation","getValidationValue","closeHandler","useCallback","useEffect","escKeyHandler","enterKeyHandler","keyCode","Esc","Enter","stateProps","rowValue","CellEditor","editor","CellComponent","editableCells","onRowDataChanged","changeCellEditorToCellTextHandler","None","getCopyOfArrayAndAddItem","changeCellTextToCellEditorHandler","Row","getRowEditableCells","TableBody","onDataChanged","groupedData","getGroupedData","getExpandedGroups","newData","Table","search","searchText","initialData","indexOf","includes","searchData","sortedColumn","columnKey","sortFunc","a","b","sort","sortData","searcFunc","filterData","g","dataArray","id","name","score","passed","nextTry","tableOption","Right","CustomCellDemo","option","changeOptions","changeData","setValue","defaultValue","CustomEditorDemo","Demo","component","path","fileName","getDemoPage","demo","text","changeText","fetch","then","res","fileText","EditingDemo","equals","filterItem","contains","notEqual","more","moreOrEqual","lessOrEqual","blank","notBlank","Error","filterGroup","groupName","items","filterGroupOr","filterGroupAnd","filteredData","fields","caption","operators","FilterExtendedDemo","filterValue","changeFilter","onFilterValueChanged","newFilterValue","FilterRowDemo","country","age","GroupingDemo","SearchDemo","SortingDemo","ValidationDemo","demos","cases","demoComponent","defaultDemo","Demos","to","exact","App","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.10eebac9.chunk.js","sourcesContent":["export enum DataType {\r\n  Boolean = 'boolean',\r\n  Date = 'date',\r\n  Number = 'number',\r\n  Object = 'object',\r\n  String = 'string',\r\n}\r\n\r\nexport enum EditingMode {\r\n  None = 'none',\r\n  Cell = 'cell',\r\n}\r\n\r\nexport enum KeyboardEnum {\r\n  Esc = 27,\r\n  Enter = 13,\r\n}\r\n\r\nexport enum SortDirection {\r\n  Ascend = 'ascend',\r\n  Descend = 'descend',\r\n}\r\n\r\nexport enum SortingMode {\r\n  None = 'none',\r\n  Single = 'single',\r\n}\r\n\r\nexport enum TextAlign {\r\n  Center = 'center',\r\n  Left = 'left',\r\n  Right = 'right',\r\n}\r\n","export class CssClasses {\r\n  public table?: string;\r\n  public thead?: string;\r\n  public theadRow?: string;\r\n  public theadCell?: string;\r\n  public row?: string;\r\n  public cell?: string;\r\n\r\n  public iconGroupArrowCollapsed?: string = 'tc-icon tc-icon-group-arrow tc-icon-group-arrow-collapsed';\r\n  public iconGroupArrowExpanded?: string = 'tc-icon tc-icon-group-arrow tc-icon-group-arrow-expanded';\r\n  public iconClose?: string = 'tc-icon tc-icon-close';\r\n  public iconSortArrowDown?: string = 'tc-icon tc-icon-sort tc-icon-sort-arrow-down';\r\n  public iconSortArrowUp?: string = 'tc-icon tc-icon-sort tc-icon-sort-arrow-up';\r\n\r\n  public checkbox ?: string;\r\n  public dateInput ?: string;\r\n  public numberInput ?: string;\r\n  public textInput ?: string;\r\n}\r\n","\r\nimport { DataType, SortDirection } from './enums';\r\nimport { CssClasses } from './Models/CssClasses';\r\n\r\nconst cssClasses = new CssClasses();\r\ncssClasses.table = 'tc-table';\r\ncssClasses.thead = 'tc-thead';\r\ncssClasses.theadRow = 'tc-thead-row';\r\ncssClasses.theadCell = 'tc-thead-cell';\r\ncssClasses.row = 'tc-row';\r\ncssClasses.cell = 'tc-cell';\r\nclass DefaultOptions {\r\n  public columnDataType = DataType.String;\r\n  public columnSortDirection: SortDirection = SortDirection.Ascend;\r\n  public css: CssClasses = cssClasses;\r\n}\r\n\r\nconst defaultOptions = new DefaultOptions();\r\n\r\nexport default defaultOptions;\r\n","export const getCopyOfArrayAndAddItem = (item: any, array: any[] = []): any[] => {\r\n  return array.concat([item]);\r\n};\r\n\r\nexport const getCopyOfArrayAndDeleteItem = (item: any, rowKey: any, array: any[]): any[] => {\r\n  const rowKeyValue = item[rowKey];\r\n  return array.filter((i) => i[rowKey] !== rowKeyValue);\r\n};\r\n\r\nexport const getCopyOfArrayAndInsertOrReplaceItem = (item: any, rowKey: any, array: any[]): any[] => {\r\n  const newArray = [...array];\r\n  const rowKeyValue = item[rowKey];\r\n  const index = newArray.findIndex((i) => i[rowKey] === rowKeyValue);\r\n  index >= 0 ? newArray.splice(index, 1, item) : newArray.push(item);\r\n  return newArray;\r\n};\r\n","export const isEmpty = (value: any): boolean => (value == null || value.length === 0);\r\n","import { DataType } from '../enums';\r\nimport { Column } from '../Models/Column';\r\n\r\nexport const convertToColumnTypes = (data: any[], columns: Column[]) => {\r\n  const newData: any[] = data.map((d) => {\r\n    const nd = {...d};\r\n    columns.forEach((c) => {\r\n      if (nd[c.field] != null) {\r\n        switch (c.dataType) {\r\n          case DataType.String: nd[c.field] = nd[c.field].toString(); break;\r\n          case DataType.Number: nd[c.field] = Number(nd[c.field]); break;\r\n          case DataType.Date: nd[c.field] = new Date(nd[c.field]); break;\r\n          case DataType.Boolean: nd[c.field] = toBoolean(nd[c.field]); break;\r\n          case DataType.Object: nd[c.field] = nd[c.field]; break;\r\n        }\r\n      }\r\n    });\r\n    return nd;\r\n  });\r\n  return newData;\r\n};\r\n\r\nexport const toBoolean = (value: any) => {\r\n  if (typeof value === 'string') {\r\n    switch (value.toLowerCase().trim()) {\r\n      case 'true': case 'yes': case '1': return true;\r\n      case 'false': case 'no': case '0': case null: return false;\r\n    }\r\n  }\r\n  return Boolean(value);\r\n};\r\n","import defaultOptions from '../defaultOptions';\r\nimport { SortDirection } from '../enums';\r\nimport { Column } from '../Models/Column';\r\nimport { OptionChangedFunc } from '../types';\r\n\r\nexport const sortUtilsClickHandler = (\r\n  columns: Column[],\r\n  column: Column,\r\n  onOptionChanged: OptionChangedFunc,\r\n) => {\r\n  const index = columns.findIndex((c) => c === column);\r\n  const newColumns = [...columns];\r\n  const sortDirection = getNextSortDirection(column.sortDirection);\r\n\r\n  newColumns.forEach((newColumn, newColumnIndex) => {\r\n    if (newColumn.sortDirection) {\r\n      newColumns[newColumnIndex] = {...newColumn};\r\n      newColumns[newColumnIndex].sortDirection = undefined;\r\n    }\r\n  });\r\n\r\n  newColumns[index] = {...column};\r\n  newColumns[index].sortDirection = sortDirection;\r\n  onOptionChanged({ columns: newColumns });\r\n};\r\n\r\nconst getNextSortDirection = (previousSortdirection?: SortDirection) => {\r\n  let nextSortDirection;\r\n  if (previousSortdirection) {\r\n    nextSortDirection = previousSortdirection === SortDirection.Ascend\r\n      ? SortDirection.Descend : SortDirection.Ascend;\r\n  } else {\r\n    nextSortDirection = defaultOptions.columnSortDirection;\r\n  }\r\n  return nextSortDirection;\r\n};\r\n","import * as React from 'react';\r\n\r\nexport interface IEmptyCellsProps {\r\n  count: number;\r\n}\r\n\r\nconst EmptyCells: React.FunctionComponent<IEmptyCellsProps> = ({ count }) => {\r\n  return (\r\n    <>\r\n      {[...Array(count)].map((item, index) => <th key={index} className='tc-empty-cell'/>)}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EmptyCells;\r\n","import * as React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { SortDirection } from '../../enums';\r\nimport { Column } from '../../Models/Column';\r\n\r\nexport interface IHeadCellProps {\r\n  column: Column;\r\n  sortClick?: () => void;\r\n}\r\n\r\nconst HeadCell: React.FunctionComponent<IHeadCellProps> = ({\r\n  sortClick, column: { width, title, textAlign, sortDirection },\r\n}) => {\r\n  return (\r\n    <th scope='col' style={{ width, textAlign }} className={defaultOptions.css.theadCell}>\r\n      <div className='tc-thead-cell-content' onClick={sortClick ? sortClick : undefined}>\r\n        <div>{title}</div>\r\n        {\r\n          sortDirection && sortClick && (\r\n            <div\r\n              className={\r\n                sortDirection === SortDirection.Ascend\r\n                  ? defaultOptions.css.iconSortArrowDown\r\n                  : defaultOptions.css.iconSortArrowUp\r\n              }\r\n            />\r\n          )\r\n        }\r\n      </div>\r\n    </th>\r\n  );\r\n};\r\n\r\nexport default HeadCell;\r\n","import React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { SortingMode } from '../../enums';\r\nimport { Column } from '../../Models/Column';\r\nimport { OptionChangedFunc } from '../../types';\r\nimport { sortUtilsClickHandler } from '../../Utils/HeadRowUtils';\r\nimport EmptyCells from '../EmptyCells/EmptyCells';\r\nimport HeadCell from '../HeadCell/HeadCell';\r\n\r\nexport interface IHeadRowProps {\r\n  columns: Column[];\r\n  sortingMode: SortingMode;\r\n  onOptionChanged: OptionChangedFunc;\r\n  groupColumnsCount: number;\r\n}\r\n\r\nconst HeadRow: React.FunctionComponent<IHeadRowProps> = ({\r\n  columns, onOptionChanged, sortingMode, groupColumnsCount,\r\n}) => {\r\n  return (\r\n    <tr className={defaultOptions.css.theadRow}>\r\n      <EmptyCells count={groupColumnsCount}/>\r\n      {columns.map((column) => {\r\n        const sortClick: any = sortingMode === SortingMode.Single && (() => {\r\n          sortUtilsClickHandler(columns, column, onOptionChanged);\r\n        });\r\n        return (\r\n          <HeadCell\r\n            key={column.field}\r\n            column={column}\r\n            sortClick={sortClick}\r\n          />\r\n        );\r\n      })}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default HeadRow;\r\n","const groupMark = {};\r\n\r\nexport default groupMark;\r\n","import groupMark from '../groupMark';\r\nimport { Group } from '../Models/Group';\r\nimport { GroupRowData } from '../Models/GroupRowData';\r\nimport { OptionChangedFunc } from '../types';\r\n\r\nexport const groupClick = (groupsExpanded: any[][], groupRowData: GroupRowData, onOptionChanged: OptionChangedFunc) => {\r\n  const newGroupsExpanded =\r\n    groupsExpanded.filter((ge) => JSON.stringify(ge) !== JSON.stringify(groupRowData.key));\r\n  if (newGroupsExpanded.length === groupsExpanded.length) {\r\n    newGroupsExpanded.push(groupRowData.key);\r\n  }\r\n  onOptionChanged({ groupsExpanded: newGroupsExpanded });\r\n};\r\n\r\nexport const getExpandedGroups = (groupedData: any[]): any[][] => {\r\n  const groupsExpanded: any[][] = [];\r\n  for (const value of groupedData) {\r\n    if (value.groupMark === groupMark) {\r\n      groupsExpanded.push(value.key);\r\n    }\r\n  }\r\n  return groupsExpanded;\r\n};\r\n\r\nexport const getGroupedData = (data: any[], groups: Group[], groupsExpanded?: any[]): any[] => {\r\n  const grouped = getGroupedStructure(data, groups, 0, groupsExpanded);\r\n  return convertToFlat(grouped);\r\n};\r\n\r\nexport const convertToFlat = (grouped: any, key: any[] = []) => {\r\n  let result: any[] = [];\r\n  grouped.forEach((value: any, groupValue: any) => {\r\n    const groupKey = [...key];\r\n    groupKey.push(groupValue);\r\n    result.push({ groupMark, key: groupKey, value: groupValue });\r\n    if (Array.isArray(value)) {\r\n      value.forEach((item) => {\r\n        result.push(item);\r\n      });\r\n    } else {\r\n      result = result.concat(convertToFlat(value, groupKey));\r\n    }\r\n  });\r\n  return result;\r\n};\r\n\r\nexport const getGroupedStructure = (\r\n  data: any[],\r\n  groups: Group[],\r\n  expandedDeep: number = 0,\r\n  groupsExpanded?: any[],\r\n): any => {\r\n  groups = [...groups];\r\n  const group = groups.shift();\r\n  if (group) {\r\n    const grouped = groupBy(data, (item: any) => item[group.field]);\r\n    grouped.forEach((value, key) => {\r\n      const groupExpandedItems = groupsExpanded && groupsExpanded.filter((ge) => ge[expandedDeep] === key);\r\n      const isThisGroupExpanded = !groupExpandedItems\r\n        || groupExpandedItems.some((ge) => ge.length === expandedDeep + 1);\r\n      if (isThisGroupExpanded) {\r\n        const newStructure = getGroupedStructure(\r\n          value,\r\n          groups,\r\n          expandedDeep + 1,\r\n          groupExpandedItems && groupExpandedItems.filter((ge) => ge.length > expandedDeep + 1),\r\n        );\r\n        if (newStructure) {\r\n          grouped.set(key, newStructure);\r\n        }\r\n      } else {\r\n        grouped.set(key, []);\r\n      }\r\n    });\r\n    return grouped;\r\n  }\r\n};\r\n\r\nexport const groupBy = (data: any[], keyGetter: any, isEmptyValue: boolean = false) => {\r\n  const map = new Map();\r\n  data.forEach((item) => {\r\n    const key = keyGetter(item);\r\n    if (isEmptyValue) {\r\n      map.set(key, []);\r\n    } else {\r\n      const collection = map.get(key);\r\n      if (!collection) {\r\n          map.set(key, [item]);\r\n      } else {\r\n          collection.push(item);\r\n      }\r\n    }\r\n  });\r\n  return map;\r\n};\r\n","const emptyFunc = () => {};\r\nexport default emptyFunc;\r\n","import React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { isEmpty } from '../../Utils/CommonUtils';\r\nimport { ICellEditorProps } from '../CellEditor/CellEditor';\r\n\r\nconst CellEditorBoolean: React.FunctionComponent<ICellEditorProps> = ({\r\n  column,\r\n  rowData,\r\n  close,\r\n  onValueChange,\r\n}) => {\r\n  const value = rowData[column.field];\r\n  return (\r\n    <input autoFocus={true}\r\n      className={defaultOptions.css.checkbox}\r\n      type='checkbox'\r\n      ref={(elem) => elem && (elem.indeterminate = isEmpty(value))}\r\n      checked={value || false}\r\n      onChange={(event) => onValueChange(event.currentTarget.checked)}\r\n      onBlur={close}/>\r\n  );\r\n};\r\n\r\nexport default CellEditorBoolean;\r\n","import React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { ICellEditorProps } from '../CellEditor/CellEditor';\r\n\r\nconst CellEditorDate: React.FunctionComponent<ICellEditorProps> = ({\r\n  column,\r\n  rowData,\r\n  close,\r\n  onValueChange,\r\n}) => {\r\n  const fieldValue = rowData[column.field];\r\n  const value = fieldValue && fieldValue.toISOString().split('T')[0];\r\n  return (\r\n    <input\r\n      autoFocus={true}\r\n      className={defaultOptions.css.dateInput}\r\n      type='date'\r\n      value={value || ''}\r\n      onChange={(event) => {\r\n        const targetValue: string = event.currentTarget.value;\r\n        onValueChange(targetValue ? new Date(targetValue) : null);\r\n      }}\r\n      onBlur={close}/>\r\n  );\r\n};\r\n\r\nexport default CellEditorDate;\r\n","import React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { ICellEditorProps } from '../CellEditor/CellEditor';\r\n\r\nconst CellEditorNumber: React.FunctionComponent<ICellEditorProps> = ({\r\n  column,\r\n  rowData,\r\n  close,\r\n  onValueChange,\r\n}) => {\r\n  const value = rowData[column.field];\r\n  return (\r\n    <input autoFocus={true}\r\n      className={defaultOptions.css.numberInput}\r\n      type='number'\r\n      value={value || ''}\r\n      onChange={(event) => {\r\n        const newValue = event.currentTarget.value;\r\n        onValueChange(Number(newValue) || null);\r\n      }}\r\n      onBlur={close}/>\r\n  );\r\n};\r\n\r\nexport default CellEditorNumber;\r\n","import React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { ICellEditorProps } from '../CellEditor/CellEditor';\r\n\r\nconst CellEditorString: React.FunctionComponent<ICellEditorProps> = ({\r\n  column, rowData, close, onValueChange,\r\n}) => {\r\n  const value = rowData[column.field] || '';\r\n  return (\r\n    <input autoFocus={true}\r\n      type='text'\r\n      className={defaultOptions.css.textInput}\r\n      value={value || ''}\r\n      onChange={(event) => onValueChange(event.currentTarget.value)}\r\n      onBlur={close}/>\r\n  );\r\n};\r\n\r\nexport default CellEditorString;\r\n","import React from 'react';\r\n\r\nimport { DataType } from '../../enums';\r\nimport { ICellEditorProps } from '../CellEditor/CellEditor';\r\nimport CellEditorBoolean from '../CellEditorBoolean/CellEditorBoolean';\r\nimport CellEditorDate from '../CellEditorDate/CellEditorDate';\r\nimport CellEditorNumber from '../CellEditorNumber/CellEditorNumber';\r\nimport CellEditorString from '../CellEditorString/CellEditorString';\r\n\r\nconst CellEditorDataType: React.FunctionComponent<ICellEditorProps> = (props) => {\r\n  switch (props.column.dataType) {\r\n    case DataType.Boolean: return <CellEditorBoolean {...props} />;\r\n    case DataType.Date: return <CellEditorDate {...props} />;\r\n    case DataType.Number: return <CellEditorNumber {...props} />;\r\n    default: return <CellEditorString {...props} />;\r\n  }\r\n};\r\n\r\nexport default CellEditorDataType;\r\n","import * as React from 'react';\r\n\r\nimport emptyFunc from '../../emptyFunc';\r\nimport { Column } from '../../Models/Column';\r\nimport { ValueChangeFunc } from '../../types';\r\nimport CellEditorDataType from '../CellEditorDataType/CellEditorDataType';\r\n\r\nexport interface IFilterCellProps  {\r\n  column: Column;\r\n  rowData: any;\r\n  close: () => void;\r\n  onValueChange: ValueChangeFunc;\r\n}\r\n\r\nconst FilterCell: React.FunctionComponent<IFilterCellProps> = ({\r\n  column,\r\n  column: { textAlign },\r\n  rowData,\r\n  onValueChange,\r\n}) => {\r\n  return (\r\n    <td style={{textAlign}}>\r\n      <CellEditorDataType\r\n        {...{ column, rowData }}\r\n        close={emptyFunc}\r\n        onValueChange={onValueChange}\r\n      />\r\n      <div className='tc-filter-row-clear-button' onClick={() => { onValueChange(null); }}>\r\n        Clear\r\n      </div>\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default FilterCell;\r\n","import React from 'react';\r\n\r\nimport emptyFunc from '../../emptyFunc';\r\nimport { Column } from '../../Models/Column';\r\nimport { FilterCondition } from '../../Models/FilterCondition';\r\nimport { OptionChangedFunc } from '../../types';\r\nimport { filterCellValueChangeHandler } from '../../Utils/FilterUtils';\r\nimport FilterCell from '../FilterCell/FilterCell';\r\n\r\nexport interface IFilterRowProps {\r\n  columns: Column[];\r\n  filterRow: FilterCondition[];\r\n  onOptionChanged: OptionChangedFunc;\r\n}\r\n\r\nconst FilterRow: React.FunctionComponent<IFilterRowProps> = ({\r\n  columns,\r\n  filterRow,\r\n  onOptionChanged,\r\n}) => {\r\n  const rowData = filterRow.reduce((c: any, f, i, array) => {\r\n    c[f.field] = f.value;\r\n    return c;\r\n  }, {});\r\n  return (\r\n    <tr className='tc-filter-row'>\r\n      {columns.map((column) => {\r\n        return (\r\n          <FilterCell\r\n            key={column.field}\r\n            column={column}\r\n            rowData={rowData}\r\n            close={emptyFunc}\r\n            onValueChange={(value) => {\r\n              filterCellValueChangeHandler(value, column.field, filterRow, onOptionChanged);\r\n            }}\r\n          />\r\n        );\r\n      })}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default FilterRow;\r\n","import { Cell } from '../Models/Cell';\r\nimport { Column } from '../Models/Column';\r\nimport { FilterCondition } from '../Models/FilterCondition';\r\nimport { OptionChangedFunc } from '../types';\r\nimport { getCopyOfArrayAndDeleteItem, getCopyOfArrayAndInsertOrReplaceItem } from './ArrayUtils';\r\nimport { isEmpty } from './CommonUtils';\r\n\r\nexport const getRowEditableCells = (rowKeyValue: any, editableCells?: Cell[]): Cell[] => {\r\n  return editableCells ? editableCells.filter((c) => c.rowKeyValue === rowKeyValue) : [];\r\n};\r\n\r\nexport const searchData = (columns: Column[], data: any[], searchText: string): any[] => {\r\n  return columns.reduce((initialData: any[], c) => {\r\n    const filterFunction = (item: any) => {\r\n      return c.search ? c.search(searchText, item, c) : initialData.indexOf(item) < 0\r\n        && item[c.field].toString().toLowerCase().includes(searchText.toLowerCase());\r\n    };\r\n    return initialData.concat(data.filter(filterFunction));\r\n  }, []);\r\n};\r\n\r\nexport const filterData = (data: any[], filterRow: FilterCondition[]): any[] => {\r\n  return filterRow.reduce((initialData, f) => {\r\n    const searcFunc = typeof f.value === 'string' ? (d: any) => d[f.field].toLowerCase().includes(f.value.toLowerCase())\r\n      : (d: any) => d[f.field] === f.value;\r\n    return initialData.filter(searcFunc);\r\n  }, data);\r\n};\r\n\r\nexport const filterCellValueChangeHandler = (\r\n    value: any, field: string, filterRow: FilterCondition[], optionChangeHandler: OptionChangedFunc,\r\n  ) => {\r\n  let newFilterRow;\r\n  const newFRValue: FilterCondition = {\r\n    field,\r\n    operator: '=',\r\n    value,\r\n  };\r\n  newFilterRow = isEmpty(value) ? getCopyOfArrayAndDeleteItem(newFRValue, 'field', filterRow)\r\n    : getCopyOfArrayAndInsertOrReplaceItem(newFRValue, 'field', filterRow);\r\n  optionChangeHandler({ filterRow: newFilterRow });\r\n};\r\n","import React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { GroupRowData } from '../../Models/GroupRowData';\r\nimport { OptionChangedFunc } from '../../types';\r\nimport { groupClick } from '../../Utils/GroupUtils';\r\nimport EmptyCells from '../EmptyCells/EmptyCells';\r\n\r\nexport interface IGroupRowProps {\r\n  emptyColumnsCount: number;\r\n  groupRowData: GroupRowData;\r\n  groupsExpanded: any[][];\r\n  onOptionChanged: OptionChangedFunc;\r\n}\r\n\r\nconst GroupRow: React.FunctionComponent<IGroupRowProps> = ({\r\n  emptyColumnsCount,\r\n  groupRowData,\r\n  groupsExpanded,\r\n  onOptionChanged,\r\n}) => {\r\n  return (\r\n    <tr className='tc-group-row'>\r\n      <EmptyCells count={emptyColumnsCount}/>\r\n      <td\r\n        className='tc-group-column'\r\n        colSpan={'100%' as any}>\r\n          <div className='tc-group-column-content'>\r\n            <div\r\n              onClick={() => {\r\n                groupClick(groupsExpanded, groupRowData, onOptionChanged);\r\n              }}\r\n              className={groupsExpanded.some((ge) => JSON.stringify(ge) === JSON.stringify(groupRowData.key))\r\n                ? defaultOptions.css.iconGroupArrowExpanded : defaultOptions.css.iconGroupArrowCollapsed}\r\n            />\r\n            <div className='tc-group-text'>{groupRowData.value.toString()}</div>\r\n          </div>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default GroupRow;\r\n","import { EditingMode } from '../enums';\r\nimport { Cell } from '../Models/Cell';\r\nimport { OptionChangedFunc } from '../types';\r\nimport { getCopyOfArrayAndAddItem } from './ArrayUtils';\r\n\r\nexport const isEditableCell = (editingMode: EditingMode, field: string, rowEditableCells: Cell[]): boolean => {\r\n  if (editingMode === EditingMode.Cell) {\r\n    return !!rowEditableCells.find((c) => c.field === field);\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const changeCellTextToCellEditorHandler = (\r\n  item: Cell, editableCells: Cell[], onOptionChanged: OptionChangedFunc) => {\r\n    const newEditableCells = getCopyOfArrayAndAddItem(item, editableCells);\r\n    onOptionChanged({ editableCells: newEditableCells });\r\n};\r\n\r\nexport const changeCellEditorToCellTextHandler = (\r\n  item: Cell, editableCells: Cell[], onOptionChanged: OptionChangedFunc) => {\r\n    const newEditableCells = editableCells.filter((c) => c.field !== item.field || c.rowKeyValue !== item.rowKeyValue);\r\n    onOptionChanged({ editableCells: newEditableCells });\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { isEmpty } from '../../Utils/CommonUtils';\r\nimport { ICellContentProps } from '../CellContent/CellContent';\r\n\r\nconst CellText: React.FunctionComponent<ICellContentProps> = ({\r\n  column,\r\n  rowData,\r\n  openEditor,\r\n}) => {\r\n  const value = rowData[column.field];\r\n  return (\r\n    <div className='tc-cell-text'\r\n      onClick={openEditor}\r\n    >{!isEmpty(value) ? value.toString() : <>&nbsp;</>}</div>\r\n  );\r\n};\r\n\r\nexport default CellText;\r\n","import * as React from 'react';\r\n\r\nimport { Column } from '../../Models/Column';\r\nimport CellText from '../CellText/CellText';\r\n\r\nexport interface ICellContentProps {\r\n  column: Column;\r\n  openEditor?: () => void;\r\n  rowData: any;\r\n}\r\n\r\nconst CellContent: React.FunctionComponent<ICellContentProps> = (props) => {\r\n  const { column: { cell } } = props;\r\n  return cell ? cell(props) :  <CellText {...props}/>;\r\n};\r\n\r\nexport default CellContent;\r\n","import { KeyboardEnum } from '../enums';\r\n\r\n/*\r\n  Used inside effects and returned as result from them,\r\n  it adds listener to esc & enter keys on life cycle of component\r\n*/\r\nexport const addEscEnterKeyEffect = (escKeyHandler: () => void, enterKeyHandler: () => void) => {\r\n  const handleKeyboard = (event: KeyboardEvent) => {\r\n    if (event.keyCode === KeyboardEnum.Esc) {\r\n      escKeyHandler();\r\n    }\r\n\r\n    if (event.keyCode === KeyboardEnum.Enter) {\r\n      enterKeyHandler();\r\n    }\r\n  };\r\n  return getEventListenerEffect('keyup', handleKeyboard);\r\n};\r\n\r\nexport const getEventListenerEffect = (eventName: string, handler: any) => {\r\n  window.addEventListener(eventName, handler);\r\n\r\n  return () => {\r\n    window.removeEventListener(eventName, handler);\r\n  };\r\n};\r\n","import React from 'react';\r\n\r\nexport interface ICellEditorValidationMessageProps {\r\n  message: string;\r\n}\r\n\r\nconst CellEditorValidationMessage: React.FunctionComponent<ICellEditorValidationMessageProps> = (props) => {\r\n  const { message } = props;\r\n\r\n  return (\r\n    <div className='tc validation-message'>{message}</div>\r\n  );\r\n};\r\n\r\nexport default CellEditorValidationMessage;\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\n\r\nimport { addEscEnterKeyEffect } from '../../Utils/EffectUtils';\r\nimport { getValidationValue } from '../../Utils/Validation';\r\nimport { ICellEditorProps } from '../CellEditor/CellEditor';\r\nimport CellEditorDataType from '../CellEditorDataType/CellEditorDataType';\r\nimport CellEditorValidationMessage from '../CellEditorValidationMessage/CellEditorValidationMessage';\r\n\r\nconst CellEditorState: React.FunctionComponent<ICellEditorProps> = (props) => {\r\n  const {\r\n    column,\r\n    column: {\r\n      field,\r\n    },\r\n    rowData,\r\n    close,\r\n    onValueChange,\r\n  } = props;\r\n  const [value, changeValue] = useState(rowData);\r\n\r\n  const validationValue = getValidationValue(value, column.field, column.validation);\r\n  const onValueStateChange = (newValue: any): void => {\r\n    const rowValue = { ...rowData, ...{ [field]: newValue } };\r\n    changeValue(rowValue);\r\n  };\r\n\r\n  const closeHandler = useCallback(() => {\r\n    if (!validationValue) {\r\n      onValueChange({ ...rowData, ...{ [field]: value[field] } });\r\n      close();\r\n    }\r\n  }, [validationValue, onValueChange, close, value, field, rowData]);\r\n\r\n  useEffect(() => {\r\n    return addEscEnterKeyEffect(close, closeHandler);\r\n  }, [close, closeHandler]);\r\n\r\n  const stateProps = { ...props, ...{\r\n    close: closeHandler,\r\n    onValueChange: onValueStateChange,\r\n    rowData : value,\r\n  }};\r\n\r\n  return (\r\n    <>\r\n      <CellEditorDataType {...stateProps} />\r\n      {validationValue && <CellEditorValidationMessage message={validationValue} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CellEditorState;\r\n","import { ValidationFunc } from '../types';\r\n\r\nexport const getValidationValue = (rowData: any, field: string, validation?: ValidationFunc) => {\r\n  if (validation) {\r\n    return validation(rowData[field], rowData);\r\n  }\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { Column } from '../../Models/Column';\r\nimport { ValueChangeFunc } from '../../types';\r\nimport CellEditorState from '../CellEditorState/CellEditorState';\r\n\r\nexport interface ICellEditorProps {\r\n  column: Column;\r\n  rowData: any;\r\n  close: () => void;\r\n  onValueChange: ValueChangeFunc;\r\n}\r\n\r\nconst CellEditor: React.FunctionComponent<ICellEditorProps> = (props) => {\r\n  const { editor } = props.column;\r\n  return editor ? editor(props) :  <CellEditorState {...props}/>;\r\n};\r\n\r\nexport default CellEditor;\r\n","import * as React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { EditingMode } from '../../enums';\r\nimport { Cell } from '../../Models/Cell';\r\nimport { Column } from '../../Models/Column';\r\nimport { OptionChangedFunc, RowDataChangedFunc } from '../../types';\r\nimport {\r\n  changeCellEditorToCellTextHandler, changeCellTextToCellEditorHandler,\r\n} from '../../Utils/CellUtils';\r\nimport CellContent from '../CellContent/CellContent';\r\nimport CellEditor from '../CellEditor/CellEditor';\r\n\r\nexport interface ICellComponentProps {\r\n  editableCells: Cell[];\r\n  column: Column;\r\n  editingMode: EditingMode;\r\n  isEditableCell: boolean;\r\n  onOptionChanged: OptionChangedFunc;\r\n  onRowDataChanged: RowDataChangedFunc;\r\n  rowData: any;\r\n  rowKey: any;\r\n}\r\n\r\nconst CellComponent: React.FunctionComponent<ICellComponentProps> = ({\r\n  editableCells,\r\n  column,\r\n  column: { textAlign },\r\n  isEditableCell,\r\n  onOptionChanged,\r\n  editingMode,\r\n  onRowDataChanged,\r\n  rowData,\r\n  rowKey,\r\n}) => {\r\n  const rowKeyValue = rowData[rowKey];\r\n  return (\r\n    <td style={{textAlign}} className={defaultOptions.css.cell}>\r\n      { isEditableCell ? (\r\n          <CellEditor\r\n            {...{ column, rowData }}\r\n            close={\r\n              () => changeCellEditorToCellTextHandler(\r\n                { field: column.field, rowKeyValue },\r\n                editableCells,\r\n                onOptionChanged)\r\n            }\r\n            onValueChange={onRowDataChanged}\r\n          />\r\n        )\r\n        : (\r\n          <CellContent {...{ column, rowData }}\r\n            openEditor={\r\n              () => editingMode !== EditingMode.None && changeCellTextToCellEditorHandler(\r\n                {field: column.field, rowKeyValue },\r\n                editableCells,\r\n                onOptionChanged)\r\n            }\r\n          />\r\n        )\r\n      }\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default CellComponent;\r\n","import React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { EditingMode } from '../../enums';\r\nimport { Cell } from '../../Models/Cell';\r\nimport { Column } from '../../Models/Column';\r\nimport { OptionChangedFunc, RowDataChangedFunc } from '../../types';\r\nimport { isEditableCell } from '../../Utils/CellUtils';\r\nimport { getRowEditableCells } from '../../Utils/FilterUtils';\r\nimport CellComponent from '../CellComponent/CellComponent';\r\nimport EmptyCells from '../EmptyCells/EmptyCells';\r\n\r\nexport interface IRowProps {\r\n  editableCells: Cell[];\r\n  editingMode: EditingMode;\r\n  columns: Column[];\r\n  groupColumnsCount: number;\r\n  onRowDataChanged: RowDataChangedFunc;\r\n  onOptionChanged: OptionChangedFunc;\r\n  rowKey: any;\r\n  rowData: any;\r\n}\r\n\r\nconst Row: React.FunctionComponent<IRowProps> = ({\r\n  columns,\r\n  editableCells,\r\n  editingMode,\r\n  groupColumnsCount,\r\n  onOptionChanged,\r\n  onRowDataChanged,\r\n  rowData,\r\n  rowKey,\r\n}) => {\r\n  const rowEditableCells = getRowEditableCells(rowData[rowKey], editableCells);\r\n  return (\r\n    <tr className={defaultOptions.css.row}>\r\n      <EmptyCells count={groupColumnsCount}/>\r\n      {columns.map((column) => (\r\n        <CellComponent\r\n          key={column.field}\r\n          rowData={rowData}\r\n          column={column}\r\n          rowKey={rowKey}\r\n          editingMode={editingMode}\r\n          isEditableCell={isEditableCell(editingMode, column.field, rowEditableCells)}\r\n          editableCells={editableCells}\r\n          onOptionChanged={onOptionChanged}\r\n          onRowDataChanged={onRowDataChanged}\r\n        />\r\n      ))}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default Row;\r\n","import * as React from 'react';\r\n\r\nimport { EditingMode } from '../../enums';\r\nimport groupMark from '../../groupMark';\r\nimport { Cell } from '../../Models/Cell';\r\nimport { Column } from '../../Models/Column';\r\nimport { FilterCondition } from '../../Models/FilterCondition';\r\nimport { Group } from '../../Models/Group';\r\nimport { DataChangedFunc, OptionChangedFunc } from '../../types';\r\nimport { getCopyOfArrayAndInsertOrReplaceItem } from '../../Utils/ArrayUtils';\r\nimport { getExpandedGroups, getGroupedData } from '../../Utils/GroupUtils';\r\nimport FilterRow from '../FilterRow/FilterRow';\r\nimport GroupRow from '../GroupRow/GroupRow';\r\nimport Row from '../Row/Row';\r\n\r\nexport interface ITableBodyProps {\r\n  columns: Column[];\r\n  data: any[];\r\n  editableCells?: Cell[];\r\n  editingMode?: EditingMode;\r\n  filterRow?: FilterCondition[];\r\n  groups?: Group[];\r\n  groupsExpanded?: any[][];\r\n  groupColumnsCount: number;\r\n  onDataChanged?: DataChangedFunc;\r\n  onOptionChanged: OptionChangedFunc;\r\n  rowKey: string;\r\n}\r\n\r\nconst TableBody: React.FunctionComponent<ITableBodyProps> = ({\r\n  columns,\r\n  data,\r\n  editableCells = [],\r\n  editingMode = EditingMode.None,\r\n  filterRow,\r\n  groups,\r\n  groupsExpanded,\r\n  groupColumnsCount,\r\n  onDataChanged = () => {},\r\n  onOptionChanged,\r\n  rowKey,\r\n}) => {\r\n  const groupedData = groups ? getGroupedData(data, groups, groupsExpanded) : data;\r\n\r\n  if (groups && !groupsExpanded) {\r\n    groupsExpanded = getExpandedGroups(groupedData);\r\n  }\r\n  return (\r\n    <tbody>\r\n      {filterRow && <FilterRow columns={columns} filterRow={filterRow} onOptionChanged={onOptionChanged}/>}\r\n      {groupedData.map((d) => {\r\n        return (\r\n          d.groupMark === groupMark\r\n          ? (\r\n            <GroupRow\r\n              key={d.key}\r\n              groupRowData={d}\r\n              emptyColumnsCount={d.key.length - 1}\r\n              groupsExpanded={groupsExpanded || []}\r\n              onOptionChanged={onOptionChanged} />\r\n          ) : (\r\n            <Row\r\n              key={d[rowKey]}\r\n              columns={columns}\r\n              rowData={d}\r\n              rowKey={rowKey}\r\n              onOptionChanged={onOptionChanged}\r\n              editableCells={editableCells}\r\n              editingMode={editingMode}\r\n              groupColumnsCount={groupColumnsCount}\r\n              onRowDataChanged={(rowData: any) => {\r\n                const newData = getCopyOfArrayAndInsertOrReplaceItem(rowData, rowKey, data);\r\n                onDataChanged(newData);\r\n              }}\r\n            />\r\n          )\r\n        );\r\n      })}\r\n    </tbody>\r\n  );\r\n};\r\n\r\nexport default TableBody;\r\n","import * as React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { EditingMode, SortingMode } from '../../enums';\r\nimport { Cell } from '../../Models/Cell';\r\nimport { Column } from '../../Models/Column';\r\nimport { FilterCondition } from '../../Models/FilterCondition';\r\nimport { Group } from '../../Models/Group';\r\nimport { DataChangedFunc, OptionChangedFunc } from '../../types';\r\nimport { filterData, searchData } from '../../Utils/FilterUtils';\r\nimport { sortData } from '../../Utils/SortUtils';\r\nimport { convertToColumnTypes } from '../../Utils/TypeUtils';\r\nimport HeadRow from '../HeadRow/HeadRow';\r\nimport TableBody from '../TableBody/TableBody';\r\n\r\n/**\r\n * Sets the options of the table which are related to its looks\r\n */\r\nexport interface ITableOption {\r\n  /** Columns in table and their look and behaviour */\r\n  columns: Column[];\r\n  /** Specifies the array of cells which are being edited */\r\n  editableCells?: Cell[];\r\n  /** Sets the editing mode */\r\n  editingMode?: EditingMode;\r\n  /** Sets filters for columns */\r\n  filterRow?: FilterCondition[];\r\n  /** Sets the groups option */\r\n  groups?: Group[];\r\n  /** Sets the expanded groups */\r\n  groupsExpanded?: any[][];\r\n  /** Specifies the column unique field which will be used as a key */\r\n  rowKey: string;\r\n  /** Sets the sorting mode */\r\n  sortingMode?: SortingMode;\r\n  /**\r\n   * Sets the search by data columns\r\n   * (TODO: replace string to any)\r\n   */\r\n  search?: string;\r\n}\r\n\r\ninterface ITableEvents {\r\n  /** Called each time Data is changed */\r\n  onDataChanged?: DataChangedFunc;\r\n  /** Called each time ITableOption changed */\r\n  onOptionChanged: OptionChangedFunc;\r\n}\r\n\r\ninterface IAllProps extends ITableEvents, ITableOption {\r\n  /** The data which is shown in Table's rows */\r\n  data: any[];\r\n}\r\n\r\nexport const Table: React.FunctionComponent<IAllProps> = (props) => {\r\n  const {\r\n    groups,\r\n    filterRow,\r\n    onOptionChanged,\r\n    search,\r\n    sortingMode = SortingMode.None,\r\n  } = props;\r\n  let { columns, data } = props;\r\n  data = search ? searchData(columns, data, search) : data;\r\n  data = convertToColumnTypes(data, columns);\r\n  data = filterRow ? filterData(data, filterRow) : data;\r\n  data = sortData(columns, data);\r\n\r\n  let groupColumnsCount = 0;\r\n  if (groups) {\r\n    groupColumnsCount = groups.length;\r\n    columns = columns.filter((c) => !groups.some((g) => g.field === c.field));\r\n  }\r\n  return (\r\n    <div className='tc'>\r\n      <table className={defaultOptions.css.table}>\r\n        <thead className={defaultOptions.css.thead}>\r\n          <HeadRow\r\n            groupColumnsCount={groupColumnsCount}\r\n            columns={columns}\r\n            onOptionChanged={onOptionChanged}\r\n            sortingMode={sortingMode}\r\n          />\r\n        </thead>\r\n        <TableBody\r\n            {...props}\r\n            data={data}\r\n            columns={columns}\r\n            groupColumnsCount={groupColumnsCount}\r\n        />\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n","import { SortDirection } from '../enums';\r\nimport { Column } from '../Models/Column';\r\n\r\nexport const sortData = (columns: Column[], data: any): any[] => {\r\n  const sortedColumn = columns.find((column) => column.sortDirection);\r\n  if (!sortedColumn) { return data; }\r\n  const columnKey = sortedColumn.field;\r\n  const sortFunc = sortedColumn.sortDirection === SortDirection.Ascend ?\r\n    ((a: any, b: any) => a[columnKey] < b[columnKey] ? -1 : 1)\r\n    : ((a: any, b: any) => a[columnKey] > b[columnKey] ? -1 : 1);\r\n  const newData = [...data].sort(sortFunc);\r\n  return newData;\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, EditingMode, TextAlign } from '../../lib/enums';\r\nimport { CellFuncPropsWithChildren, OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 55, passed: false, nextTry: new Date(2019, 10, 8, 10) },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false, nextTry: new Date(2019, 11, 8, 10) },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Marshall Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false, nextTry: new Date(2019, 10, 9, 10) },\r\n];\r\n\r\nconst CustomCell: React.FC<CellFuncPropsWithChildren> = ({\r\n  column: { field }, rowData, openEditor,\r\n}) => {\r\n  return (\r\n    <div onClick={openEditor}>\r\n      {rowData[field] ? 'Passed' : 'Failed'}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { dataType: DataType.String, field: 'name', title: 'Name', width: '30%' },\r\n    { field: 'score', title: 'Score', dataType: DataType.Number, width: '10%', textAlign: TextAlign.Right },\r\n    {\r\n      cell: CustomCell,\r\n      dataType: DataType.Boolean,\r\n      field: 'passed',\r\n      textAlign: TextAlign.Right,\r\n      title: 'Results',\r\n      width: '10%',\r\n    },\r\n    { field: 'nextTry', title: 'Next Try', dataType: DataType.Date, textAlign: TextAlign.Right  },\r\n  ],\r\n  editingMode: EditingMode.Cell,\r\n  rowKey: 'id',\r\n};\r\n\r\nconst CustomCellDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n\r\n  const [data, changeData] = useState(dataArray);\r\n  const onDataChanged: OptionChangedFunc = (newValue) => {\r\n    changeData(newValue);\r\n  };\r\n  return (\r\n    <Table\r\n      {...option}\r\n      data={data}\r\n      onOptionChanged={onOptionChanged}\r\n      onDataChanged={onDataChanged}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CustomCellDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, EditingMode } from '../../lib/enums';\r\nimport { EditorFuncPropsWithChildren, OptionChangedFunc } from '../../lib/types';\r\nimport { toBoolean } from '../../lib/Utils/TypeUtils';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 55, passed: false, nextTry: new Date(2019, 10, 8, 10) },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false, nextTry: new Date(2019, 11, 8, 10) },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Marshall Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false, nextTry: new Date(2019, 10, 9, 10) },\r\n];\r\n\r\nconst CustomEditor: React.FC<EditorFuncPropsWithChildren> = ({\r\n  column: { field }, rowData, close, onValueChange,\r\n}) => {\r\n  const [value, setValue] = useState(rowData[field]);\r\n  return (\r\n    <div>\r\n    <input\r\n      className='form-control'\r\n      type='text'\r\n      value={value}\r\n      onChange={(event) => setValue(event.currentTarget.value)}/>\r\n    <button onClick={() => {\r\n      onValueChange({ ...rowData, ...{ [field]: value } });\r\n      close();\r\n    }}>Save</button>\r\n    <button onClick={close}>Cancel</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CustomLookupEditor: React.FC<EditorFuncPropsWithChildren> = ({\r\n  column: { field }, rowData, close,  onValueChange,\r\n}) => {\r\n  const [value, setValue] = useState(rowData[field]);\r\n  return (\r\n    <div>\r\n      <select\r\n        className='form-control'\r\n        autoFocus={true}\r\n        defaultValue={value}\r\n        onBlur={() => {\r\n          onValueChange({ ...rowData, ...{ [field]: value } });\r\n          close();\r\n        }}\r\n        onChange={(event) => {\r\n          setValue(toBoolean(event.currentTarget.value));\r\n        }}>\r\n        <option value={'true'}>True</option>\r\n        <option value={'false'}>False</option>\r\n      </select>\r\n    </div >\r\n  );\r\n};\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { dataType: DataType.String, field: 'name', title: 'Name', editor: CustomEditor, width: '30%' },\r\n    { field: 'score', title: 'Score', dataType: DataType.Number, width: '10%' },\r\n    { dataType: DataType.Boolean, field: 'passed', title: 'Passed', editor: CustomLookupEditor, width: '10%' },\r\n    { field: 'nextTry', title: 'Next Try', dataType: DataType.Date },\r\n  ],\r\n  editingMode: EditingMode.Cell,\r\n  rowKey: 'id',\r\n};\r\n\r\nconst CustomEditorDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n\r\n  const [data, changeData] = useState(dataArray);\r\n  const onDataChanged: OptionChangedFunc = (newValue) => {\r\n    changeData(newValue);\r\n  };\r\n  return (\r\n    <Table\r\n      {...option}\r\n      data={data}\r\n      onOptionChanged={onOptionChanged}\r\n      onDataChanged={onDataChanged}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CustomEditorDemo;\r\n","\r\nexport default class Demo {\r\n  constructor(\r\n    public component: React.FC,\r\n    public path: string,\r\n    public title: string,\r\n    public fileName: string) {\r\n\r\n  }\r\n}\r\n","import './DemoPage.scss';\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport Highlight from 'react-highlight';\r\n\r\nimport Demo from './Demo';\r\n\r\nconst getDemoPage = (demo: Demo) => {\r\n  return () => {\r\n    const [text, changeText]: [string, any] = useState('');\r\n    useEffect(() => {\r\n      const name = demo.fileName;\r\n      fetch(`demos/${name}/${name}.tsx`)\r\n        .then((res) => res.text())\r\n        .then((fileText) => changeText(fileText));\r\n    }, []);\r\n    return (\r\n      <div>\r\n        <h1>{demo.title}</h1>\r\n        <demo.component />\r\n        <Highlight className='language-typescript'>\r\n          {text}\r\n        </Highlight>\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\nexport default getDemoPage;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, EditingMode } from '../../lib/enums';\r\nimport { OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 55, passed: false, nextTry: new Date(2019, 10, 8, 10) },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false, nextTry: new Date(2019, 11, 8, 10) },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Marshall Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false, nextTry: new Date(2019, 10, 9, 10) },\r\n];\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { field: 'name', title: 'Name', dataType: DataType.String, width: '30%' },\r\n    { field: 'score', title: 'Score', dataType: DataType.Number, width: '10%' },\r\n    { field: 'passed', title: 'Passed', dataType: DataType.Boolean, width: '10%' },\r\n    { field: 'nextTry', title: 'Next Try', dataType: DataType.Date },\r\n  ],\r\n  editableCells: [{\r\n    field: 'name',\r\n    rowKeyValue: 2,\r\n  }],\r\n  editingMode: EditingMode.Cell,\r\n  rowKey: 'id',\r\n};\r\n\r\nconst EditingDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n\r\n  const [data, changeData] = useState(dataArray);\r\n  const onDataChanged: OptionChangedFunc = (newValue) => {\r\n    changeData(newValue);\r\n  };\r\n  return (\r\n    <Table\r\n      {...option}\r\n      data={data}\r\n      onOptionChanged={onOptionChanged}\r\n      onDataChanged={onDataChanged}\r\n    />\r\n  );\r\n};\r\n\r\nexport default EditingDemo;\r\n","export const isEmpty = (value: any) => (value == null || value.length === 0);\r\n\r\nconst contains = (data: any[], item: any) => data[item.field].includes(item.value);\r\nconst equals = (data: any[], item: any) => ((typeof item.value === 'string')\r\n  ? data[item.field].toLowerCase().includes(item.value.toLowerCase())\r\n  : data[item.field] === item.value);\r\nconst notEqual = (data: any[], item: any) => !equals(data, item);\r\nconst more = (data: any[], item: any) => data[item.field] > item.value;\r\nconst moreOrEqual = (data: any[], item: any) => data[item.field] >= item.value;\r\nconst less = (data: any[], item: any) => data[item.field] < item.value;\r\nconst lessOrEqual = (data: any[], item: any) => data[item.field] < item.value;\r\nconst blank = (data: any[], item: any) => isEmpty(data[item.field]);\r\nconst notBlank = (data: any[], item: any) => !isEmpty(data[item.field]);\r\nexport const filterItem = (data: any[], filter: any) => {\r\n  switch (filter.operator) {\r\n    case 'contains': return contains(data, filter);\r\n    case '=': return equals(data, filter);\r\n    case '<>': return notEqual(data, filter);\r\n    case '>': return more(data, filter);\r\n    case '>=': return moreOrEqual(data, filter);\r\n    case '<': return less(data, filter);\r\n    case '<=': return lessOrEqual(data, filter);\r\n    case 'blank': return blank(data, filter);\r\n    case 'notBlank': return notBlank(data, filter);\r\n    default: throw Error('unknown operator');\r\n  }\r\n};\r\n\r\nexport const filterGroup = (data: any[], groupName: string, items: any[]): any[] =>\r\n  (groupName.toLowerCase() === 'or' ? filterGroupOr(data, items) : filterGroupAnd(data, items));\r\n\r\nexport const filterGroupOr = (data: any[], items: any[]): any[]  => {\r\n  const filteredData = items.reduce((initialData: any, item: any) => {\r\n    if (item.items) {\r\n      const grouped = filterGroup(data, item.groupName, item.items);\r\n      return initialData.concat(grouped.filter((d: any) => initialData.indexOf(d) < 0));\r\n    }\r\n    return initialData.concat(data.filter((d: any) => initialData.indexOf(d) < 0 && filterItem(d, item)));\r\n  }, []);\r\n  return data.filter((d) => filteredData.includes(d));\r\n};\r\n\r\nexport const filterGroupAnd = (data: any[], items: any[]): any[]  => {\r\n  return items.reduce((initialData: any[], item: any) => {\r\n    if (item.items) { return filterGroup(initialData, item.groupName, item.items); }\r\n    return initialData.filter((d: any[]) => filterItem(d, item));\r\n  }, data);\r\n};\r\n\r\nexport const filterData = (data: any[] , filterValue: any): any[]  => {\r\n  return filterGroup(data, filterValue.groupName, filterValue.items);\r\n};\r\n","import React, { useState } from 'react';\r\nimport FilterControl from 'react-filter-control';\r\nimport { IFilterControlFilterValue } from 'react-filter-control/interfaces';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, SortDirection, SortingMode } from '../../lib/enums';\r\nimport { OptionChangedFunc } from '../../lib/types';\r\nimport { filterData } from './filterData';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 55, passed: false },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Tom Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false },\r\n];\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { field: 'name', title: 'Name', dataType: DataType.String, sortDirection: SortDirection.Descend },\r\n    { field: 'score', title: 'Score', dataType: DataType.Number },\r\n    { field: 'passed', title: 'Passed', dataType: DataType.Boolean },\r\n  ],\r\n  rowKey: 'id',\r\n  sortingMode: SortingMode.Single,\r\n};\r\n\r\nexport const fields = [{\r\n  caption: 'Name',\r\n  name: 'name',\r\n  operators: [{\r\n    caption: 'Contains',\r\n    name: 'contains',\r\n  }, {\r\n    caption: 'Does not equal',\r\n    name: '<>',\r\n  }],\r\n}, {\r\n  caption: 'Score',\r\n  name: 'score',\r\n  operators: [{\r\n    caption: 'Equals',\r\n    name: '=',\r\n  }],\r\n}];\r\n\r\nexport const groups = [{\r\n  caption: 'And',\r\n  name: 'and',\r\n}, {\r\n  caption: 'Or',\r\n  name: 'or',\r\n}];\r\nexport const filter: IFilterControlFilterValue = {\r\n  groupName: 'and',\r\n  items: [\r\n    {\r\n      field: 'name',\r\n      key: '1',\r\n      operator: 'contains',\r\n      value: 'Tom',\r\n    },\r\n  ],\r\n};\r\n\r\nconst FilterExtendedDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n  const [filterValue, changeFilter] = useState(filter);\r\n  const onFilterChangedChanged = (newFilterValue: IFilterControlFilterValue) => {\r\n    changeFilter(newFilterValue);\r\n  };\r\n  const filteredData = filterData(dataArray, filterValue);\r\n  return (\r\n    <>\r\n      <FilterControl {...{fields, groups, filterValue,  onFilterValueChanged: onFilterChangedChanged}}/>\r\n      <Table\r\n        {...option}\r\n        data={filteredData}\r\n        onOptionChanged={onOptionChanged}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FilterExtendedDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, SortDirection } from '../../lib/enums';\r\nimport { OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 55, passed: false },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Marshall Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false },\r\n];\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { field: 'name', title: 'Name', dataType: DataType.String, sortDirection: SortDirection.Descend },\r\n    { field: 'score', title: 'Score', dataType: DataType.Number },\r\n    { field: 'passed', title: 'Passed', dataType: DataType.Boolean },\r\n  ],\r\n  filterRow: [{\r\n    field: 'name',\r\n    operator: '=',\r\n    value: 'Billi Bob',\r\n  }],\r\n  rowKey: 'id',\r\n};\r\n\r\nconst FilterRowDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n  return (\r\n    <Table\r\n      {...option}\r\n      data={dataArray}\r\n      onOptionChanged={onOptionChanged}\r\n    />\r\n  );\r\n};\r\n\r\nexport default FilterRowDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, EditingMode } from '../../lib/enums';\r\nimport { OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray = [\r\n  { id: 1, type: 'Cat', name: 'Kas', country: 'Czech Republic', age: 2 },\r\n  { id: 2, type: 'Dog', name: 'Rex', country: 'Montenegro', age: 6 },\r\n  { id: 3, type: 'Cat', name: 'Simba', country: 'France', age: 12 },\r\n  { id: 4, type: 'Dog', name: 'Beethoven', country: 'Czech Republic', age: 3 },\r\n  { id: 5, type: 'Cat', name: 'Hash', country: 'Czech Republic', age: 8 },\r\n];\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { field: 'type', title: 'TYPE', dataType: DataType.String },\r\n    { field: 'name', title: 'NAME', dataType: DataType.String, width: '50%' },\r\n    { field: 'country', title: 'COUNTRY', dataType: DataType.String },\r\n    { field: 'age', title: 'AGE', dataType: DataType.Number, width: '50%' },\r\n  ],\r\n  editingMode: EditingMode.Cell,\r\n  groups: [{ field: 'country' }, { field: 'type' }],\r\n  rowKey: 'id',\r\n};\r\n\r\nconst GroupingDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n  const [data, changeData] = useState(dataArray);\r\n  const onDataChanged: OptionChangedFunc = (newValue) => {\r\n    changeData(newValue);\r\n  };\r\n  return (\r\n    <Table\r\n      {...option}\r\n      data={data}\r\n      onOptionChanged={onOptionChanged}\r\n      onDataChanged={onDataChanged}\r\n    />\r\n  );\r\n};\r\n\r\nexport default GroupingDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType } from '../../lib/enums';\r\nimport { OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 55, passed: false },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Marshall Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false },\r\n];\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { field: 'name', title: 'Name', dataType: DataType.String, width: '40%' },\r\n    { field: 'score', title: 'Score', dataType: DataType.Number, width: '10%' },\r\n    {\r\n      dataType: DataType.Boolean,\r\n      field: 'passed',\r\n      search: (searchText, rowData) => {\r\n        return (searchText === 'false' && !rowData.passed) || (searchText === 'true' && rowData.passed);\r\n      },\r\n      title: 'Passed',\r\n    },\r\n  ],\r\n  rowKey: 'id',\r\n  search: 'Billi Bob',\r\n};\r\n\r\nconst SearchDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n  return (\r\n    <>\r\n      <input defaultValue={option.search} onChange={(event) => {\r\n        onOptionChanged({ search: event.currentTarget.value });\r\n      }}/>\r\n      <Table\r\n        {...option}\r\n        data={dataArray}\r\n        onOptionChanged={onOptionChanged}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, SortDirection, SortingMode } from '../../lib/enums';\r\nimport { OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 55, passed: false },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Marshall Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false },\r\n];\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { field: 'name', title: 'Name', dataType: DataType.String, width: '33%', sortDirection: SortDirection.Descend },\r\n    { field: 'score', title: 'Score', width: '10%', dataType: DataType.Number },\r\n    { field: 'passed', title: 'Passed', dataType: DataType.Boolean },\r\n  ],\r\n  rowKey: 'id',\r\n  sortingMode: SortingMode.Single,\r\n};\r\n\r\nconst SortingDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n  return (\r\n    <Table\r\n      {...option}\r\n      data={dataArray}\r\n      onOptionChanged={onOptionChanged}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SortingDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, EditingMode } from '../../lib/enums';\r\nimport { OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 155, passed: false },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Marshall Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false },\r\n];\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { field: 'name', title: 'Name', dataType: DataType.String, width: '40%' },\r\n    {\r\n      dataType: DataType.Number,\r\n      field: 'score',\r\n      title: 'Score',\r\n      validation: (value: any, rowData: any) => {\r\n        if (value > 100) {\r\n          return `Value can't be more than 100`;\r\n        }\r\n      },\r\n      width: '10%',\r\n    },\r\n    {\r\n      dataType: DataType.Boolean,\r\n      field: 'passed',\r\n      title: 'Passed',\r\n    },\r\n  ],\r\n  editableCells: [{\r\n    field: 'score',\r\n    rowKeyValue: 2,\r\n  }],\r\n  editingMode: EditingMode.Cell,\r\n  rowKey: 'id',\r\n};\r\n\r\nconst ValidationDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({ ...option, ...value });\r\n  };\r\n\r\n  const [data, changeData] = useState(dataArray);\r\n  const onDataChanged: OptionChangedFunc = (newValue) => {\r\n    changeData(newValue);\r\n  };\r\n  return (\r\n    <>\r\n      <Table\r\n        {...option}\r\n        data={data}\r\n        onOptionChanged={onOptionChanged}\r\n        onDataChanged={onDataChanged}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ValidationDemo;\r\n","import './Demos.scss';\r\n\r\nimport React from 'react';\r\nimport { HashRouter, Link, Route } from 'react-router-dom';\r\n\r\nimport CustomCellDemo from './CustomCellDemo/CustomCellDemo';\r\nimport CustomEditorDemo from './CustomEditorDemo/CustomEditorDemo';\r\nimport Demo from './Demo';\r\nimport getDemoPage from './DemoPage';\r\nimport EditingDemo from './EditingDemo/EditingDemo';\r\nimport FilterExtendedDemo from './FilterExtendedDemo/FilterExtendedDemo';\r\nimport FilterRowDemo from './FilterRowDemo/FilterRowDemo';\r\nimport GroupingDemo from './GroupingDemo/GroupingDemo';\r\nimport SearchDemo from './SearchDemo/SearchDemo';\r\nimport SortingDemo from './SortingDemo/SortingDemo';\r\nimport ValidationDemo from './ValidationDemo/ValidationDemo';\r\n\r\nconst demos: Demo[] = [\r\n  new Demo(CustomCellDemo, '/custom-cell', 'Custom Cell', 'CustomCellDemo'),\r\n  new Demo(CustomEditorDemo, '/custom-editor', 'Custom Editor', 'CustomEditorDemo'),\r\n  new Demo(EditingDemo, '/editing', 'Editing', 'EditingDemo'),\r\n  new Demo(FilterExtendedDemo, '/filter-extended', 'Filter Extended', 'FilterExtendedDemo'),\r\n  new Demo(FilterRowDemo, '/filter-row', 'Filter Row', 'FilterRowDemo'),\r\n  new Demo(GroupingDemo, '/grouping', 'Grouping', 'GroupingDemo'),\r\n  new Demo(SearchDemo, '/search', 'Search', 'SearchDemo'),\r\n  new Demo(SortingDemo, '/sorting', 'Sorting', 'SortingDemo'),\r\n  new Demo(ValidationDemo, '/validation', 'Validation', 'ValidationDemo'),\r\n];\r\n\r\nconst cases = demos.map((d: Demo) => {\r\n  return ({ demoComponent: getDemoPage(d), name: d.fileName, title: d.title, path: d.path });\r\n});\r\n\r\nconst defaultDemo: Demo = demos.find((d) => d.component === GroupingDemo) || demos[0];\r\n\r\nconst Demos: React.FC = () => {\r\n  return (\r\n    <HashRouter>\r\n      <div className='demos'>\r\n        <nav>\r\n          <ul>\r\n            <li>\r\n              <Link to='/'>Home</Link>\r\n            </li>\r\n          {\r\n            cases.map((c) => (\r\n                <li key={c.name}>\r\n                  <Link to={c.path}>{c.title}</Link>\r\n                </li>\r\n              ),\r\n            )\r\n          }\r\n          </ul>\r\n        </nav>\r\n        <main>\r\n          <Route exact={true} path='/' component={getDemoPage(defaultDemo)} />\r\n          {\r\n            cases.map((c) => (\r\n                <Route key={c.name} path={c.path} component={c.demoComponent} />\r\n              ),\r\n            )\r\n          }\r\n        </main>\r\n      </div>\r\n    </HashRouter>\r\n  );\r\n};\r\n\r\nexport default Demos;\r\n","import './App.css';\r\nimport './lib/styles.scss';\r\n\r\nimport React from 'react';\r\n\r\nimport Demos from './Demos/Demos';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Demos />\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}