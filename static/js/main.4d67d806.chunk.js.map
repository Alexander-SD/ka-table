{"version":3,"sources":["lib/enums.ts","lib/Models/CssClasses.ts","lib/defaultOptions.ts","lib/Utils/ArrayUtils.ts","lib/Utils/CellUtils.ts","lib/Utils/ColumnUtils.ts","lib/Utils/HeadRowUtils.ts","lib/Utils/EventUtils.ts","lib/Utils/CommonUtils.ts","lib/Utils/TypeUtils.ts","lib/Components/EmptyCells/EmptyCells.tsx","lib/Components/HeadCellContent/HeadCellContent.tsx","lib/Components/HeadCell/HeadCell.tsx","lib/Components/HeadRow/HeadRow.tsx","lib/groupMark.ts","lib/Utils/GroupUtils.ts","lib/emptyFunc.ts","lib/Utils/RowUtils.ts","lib/Components/CellEditorBoolean/CellEditorBoolean.tsx","lib/Components/CellEditorDate/CellEditorDate.tsx","lib/Components/CellEditorNumber/CellEditorNumber.tsx","lib/Components/CellEditorString/CellEditorString.tsx","lib/Components/CellEditorDataType/CellEditorDataType.tsx","lib/Components/FilterCell/FilterCell.tsx","lib/Components/FilterRow/FilterRow.tsx","lib/Utils/FilterUtils.ts","lib/Components/CellText/CellText.tsx","lib/Components/CellContent/CellContent.tsx","lib/Utils/EffectUtils.ts","lib/Components/CellEditorValidationMessage/CellEditorValidationMessage.tsx","lib/Components/CellEditorState/CellEditorState.tsx","lib/Utils/Validation.ts","lib/Components/CellEditor/CellEditor.tsx","lib/Components/CellComponent/CellComponent.tsx","lib/Components/DataRow/DataRow.tsx","lib/Components/GroupRow/GroupRow.tsx","lib/Components/VirtualizedRows/VirtualizedRows.tsx","lib/Utils/Virtualize.ts","lib/Components/TableBody/TableBody.tsx","lib/Components/Table/Table.tsx","lib/Utils/SortUtils.ts","Demos/CommandColumnDemo/CommandColumnDemo.tsx","Demos/CustomCellDemo/CustomCellDemo.tsx","Demos/CustomEditorDemo/CustomEditorDemo.tsx","Demos/CustomHeaderCellDemo/CustomHeaderCellDemo.tsx","Demos/Demo.ts","Demos/DemoPage.tsx","Demos/EditingDemo/EditingDemo.tsx","Demos/EventsDemo/EventsDemo.tsx","Demos/FilterExtendedDemo/filterData.ts","Demos/FilterExtendedDemo/FilterExtendedDemo.tsx","Demos/FilterRowDemo/FilterRowDemo.tsx","Demos/ga.ts","Demos/GAWrapper.tsx","Demos/GroupingDemo/GroupingDemo.tsx","Demos/ManyRowsDemo/ManyRowsDemo.tsx","Demos/ManyRowsGroupingDemo/ManyRowsGroupingDemo.tsx","Demos/SearchDemo/SearchDemo.tsx","Demos/SelectionDemo/SelectionDemo.tsx","Demos/SortingDemo/SortingDemo.tsx","Demos/ValidationDemo/ValidationDemo.tsx","Demos/Demos.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DataType","EditingMode","Events","KeyboardEnum","SortDirection","SortingMode","TextAlign","CssClasses","table","tbody","thead","theadRow","theadCell","groupRow","row","rowSelected","cell","iconGroupArrowCollapsed","iconGroupArrowExpanded","iconClose","iconSortArrowDown","iconSortArrowUp","checkbox","dateInput","numberInput","textInput","defaultOptions","columnDataType","String","columnSortDirection","Ascend","css","getCopyOfArrayAndInsertOrReplaceItem","item","rowKey","array","newArray","rowKeyValue","index","findIndex","i","splice","push","isEditableCell","editingMode","column","rowEditableCells","undefined","isEditable","Cell","find","c","columnKey","key","getField","field","getNextSortDirection","previousSortdirection","Descend","getOnEventHandler","columns","data","editableCells","onDataChanged","onEvent","onOptionChanged","rowKeyField","selectedRows","virtualScrolling","event","eventData","OpenEditor","concat","getCopyOfArrayAndAddItem","changeCellTextToCellEditorHandler","CloseEditor","filter","changeCellEditorToCellTextHandler","RowDataChanged","newData","rowData","RowSelected","RowDeselected","s","SortingChanged","sortedColumns","column2","column1","newColumns","forEach","newColumnIndex","sortDirection","getSortedColumns","ScrollTable","scrollPosition","scrollTop","isEmpty","value","length","convertToColumnTypes","map","d","nd","dataType","toString","Number","Date","Boolean","toBoolean","toLowerCase","trim","EmptyCells","count","shouldUseTh","Array","className","HeadCellContent","props","headCell","title","isSortingEnabled","sortingMode","Single","sortClick","updatedColumn","newColumn","getColumnWithUpdatedSortDirection","onClick","HeadCell","style","scope","HeadRow","groupColumnsCount","groupMark","getExpandedGroups","groupedData","groupsExpanded","convertToFlat","grouped","result","groupValue","groupKey","isArray","getGroupedStructure","groups","columnMap","expandedDeep","group","shift","groupBy","groupExpandedItems","ge","some","newStructure","set","keyGetter","isEmptyValue","Map","collection","get","emptyFunc","getRowValueByColumn","CellEditorBoolean","onValueChange","autoFocus","type","ref","elem","indeterminate","checked","onChange","currentTarget","onBlur","CellEditorDate","fieldValue","toISOString","split","targetValue","CellEditorNumber","newValue","CellEditorString","CellEditorDataType","FilterCell","textAlign","FilterRow","filterRow","reduce","f","isSelectedRow","optionChangeHandler","newFRValue","operator","getCopyOfArrayAndDeleteItem","filterCellValueChangeHandler","CellText","CellContent","getEventListenerEffect","eventName","handler","window","addEventListener","removeEventListener","CellEditorValidationMessage","message","CellEditorState","useState","changeValue","validationValue","validation","getValidationValue","close","useCallback","closeHandler","useEffect","escKeyHandler","enterKeyHandler","keyCode","Esc","Enter","stateProps","rowValue","CellEditor","editor","CellComponent","onRowDataChanged","DataRow","height","trRef","getRowEditableCells","GroupRow","emptyColumnsCount","groupRowData","colSpan","newGroupsExpanded","JSON","stringify","groupClick","VirtualizedRows","firstRowRef","useRef","current","itemHeight","tbodyHeight","newVirtualScrolling","offsetHeight","parentElement","virtualized","virtualizedData","beginHeight","endHeight","acc","getVirtualized","rowDataChangedEvent","bind","rowRefLink","dataRow","TableBody","groupedColumns","getGroupedData","onScroll","timeStamp","Table","None","search","searchText","initialData","indexOf","includes","searchData","sortedColumn","sortFunc","a","b","sort","sortData","searcFunc","filterData","g","tableOnEvent","dataArray","fill","_","column3","column4","AlertCell","src","alt","alert","DeleteRow","tableOption","width","Center","CommandColumnDemo","option","changeOptions","changeData","id","name","score","passed","img","nextTry","Right","CustomCellDemo","setValue","defaultValue","CustomEditorDemo","color","Left","CustomHeaderCellDemo","Demo","component","path","fileName","getDemoPage","demo","text","changeText","fetch","then","res","fileText","EditingDemo","EventsDemo","events","changeEvents","e","equals","filterItem","contains","notEqual","more","moreOrEqual","lessOrEqual","blank","notBlank","Error","filterGroup","groupName","items","filterGroupOr","filterGroupAnd","filteredData","fields","caption","operators","FilterExtendedDemo","filterValue","changeFilter","onFilterValueChanged","newFilterValue","FilterRowDemo","host","location","hostname","initializeGA","trackPage","page","options","trackEvent","category","action","ReactGA","initialize","pageview","withTracker","WrappedComponent","pathname","country","age","GroupingDemo","ManyRowsDemo","ManyRowsGroupingDemo","SearchDemo","SelectionDemo","SortingDemo","ValidationDemo","cases","demoComponent","Demos","href","to","activeClassName","App","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4d67d806.chunk.js","sourcesContent":["export enum DataType {\r\n  Boolean = 'boolean',\r\n  Date = 'date',\r\n  Number = 'number',\r\n  Object = 'object',\r\n  String = 'string',\r\n}\r\n\r\nexport enum EditingMode {\r\n  None = 'none',\r\n  Cell = 'cell',\r\n}\r\n\r\nexport enum Events {\r\n  ScrollTable = 'ScrollTable',\r\n  CloseEditor = 'CloseEditor',\r\n  OpenEditor = 'OpenEditor',\r\n  RowDataChanged = 'RowDataChanged',\r\n  RowDeselected = 'RowDeselected',\r\n  RowSelected = 'RowSelected',\r\n  SortingChanged = 'SortingChanged',\r\n}\r\n\r\nexport enum KeyboardEnum {\r\n  Esc = 27,\r\n  Enter = 13,\r\n}\r\n\r\nexport enum SortDirection {\r\n  Ascend = 'ascend',\r\n  Descend = 'descend',\r\n}\r\n\r\nexport enum SortingMode {\r\n  None = 'none',\r\n  Single = 'single',\r\n}\r\n\r\nexport enum TextAlign {\r\n  Center = 'center',\r\n  Left = 'left',\r\n  Right = 'right',\r\n}\r\n","export class CssClasses {\r\n  public table?: string = 'tc-table';\r\n  public tbody?: string = 'tc-tbody';\r\n  public thead?: string = 'tc-thead';\r\n  public theadRow?: string = 'tc-tr tc-thead-row';\r\n  public theadCell?: string = 'tc-thead-cell';\r\n  public groupRow?: string = 'tc-tr tc-group-row';\r\n  public row?: string = 'tc-tr tc-row';\r\n  public rowSelected?: string = 'tc-row-selected';\r\n  public cell?: string = 'tc-cell';\r\n\r\n  public iconGroupArrowCollapsed?: string = 'tc-icon tc-icon-group-arrow tc-icon-group-arrow-collapsed';\r\n  public iconGroupArrowExpanded?: string = 'tc-icon tc-icon-group-arrow tc-icon-group-arrow-expanded';\r\n  public iconClose?: string = 'tc-icon tc-icon-close';\r\n  public iconSortArrowDown?: string = 'tc-icon tc-icon-sort tc-icon-sort-arrow-down';\r\n  public iconSortArrowUp?: string = 'tc-icon tc-icon-sort tc-icon-sort-arrow-up';\r\n\r\n  public checkbox ?: string;\r\n  public dateInput ?: string;\r\n  public numberInput ?: string;\r\n  public textInput ?: string;\r\n}\r\n","\r\nimport { DataType, SortDirection } from './enums';\r\nimport { CssClasses } from './Models/CssClasses';\r\n\r\nclass DefaultOptions {\r\n  public columnDataType = DataType.String;\r\n  public columnSortDirection: SortDirection = SortDirection.Ascend;\r\n  public css: CssClasses = new CssClasses();\r\n}\r\n\r\nconst defaultOptions = new DefaultOptions();\r\n\r\nexport default defaultOptions;\r\n","export const getCopyOfArrayAndAddItem = (item: any, array: any[] = []): any[] => {\r\n  return array.concat([item]);\r\n};\r\n\r\nexport const getCopyOfArrayAndDeleteItem = (item: any, rowKey: any, array: any[]): any[] => {\r\n  const rowKeyValue = item[rowKey];\r\n  return array.filter((i) => i[rowKey] !== rowKeyValue);\r\n};\r\n\r\nexport const getCopyOfArrayAndInsertOrReplaceItem = (item: any, rowKey: any, array: any[]): any[] => {\r\n  const newArray = [...array];\r\n  const rowKeyValue = item[rowKey];\r\n  const index = newArray.findIndex((i) => i[rowKey] === rowKeyValue);\r\n  index >= 0 ? newArray.splice(index, 1, item) : newArray.push(item);\r\n  return newArray;\r\n};\r\n","import { EditingMode } from '../enums';\r\nimport { Column } from '../models';\r\nimport { Cell } from '../Models/Cell';\r\nimport { OptionChangedFunc } from '../types';\r\nimport { getCopyOfArrayAndAddItem } from './ArrayUtils';\r\n\r\nexport const isEditableCell = (editingMode: EditingMode, column: Column, rowEditableCells: Cell[]): boolean => {\r\n  if (column.isEditable !== undefined) {\r\n    return column.isEditable;\r\n  }\r\n  if (editingMode === EditingMode.Cell) {\r\n    return !!rowEditableCells.find((c) => c.columnKey === column.key);\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const changeCellTextToCellEditorHandler = (\r\n  item: Cell, editableCells: Cell[], onOptionChanged: OptionChangedFunc) => {\r\n    const newEditableCells = getCopyOfArrayAndAddItem(item, editableCells);\r\n    onOptionChanged({ editableCells: newEditableCells });\r\n};\r\n\r\nexport const changeCellEditorToCellTextHandler = (\r\n  item: Cell, editableCells: Cell[], onOptionChanged: OptionChangedFunc) => {\r\n    const newEditableCells = editableCells.filter((c) => c.columnKey !== item.columnKey || c.rowKey !== item.rowKey);\r\n    onOptionChanged({ editableCells: newEditableCells });\r\n};\r\n","import { Column } from '../models';\r\n\r\nexport const compareColumns = (column1: Column, column2: Column) => {\r\n  return column1.key === column2.key && column1.field === column2.field;\r\n};\r\n\r\nexport const getField = (column: Column) => {\r\n  return column.field || column.key;\r\n};\r\n","import defaultOptions from '../defaultOptions';\r\nimport { SortDirection } from '../enums';\r\nimport { Column } from '../Models/Column';\r\nimport { compareColumns } from './ColumnUtils';\r\n\r\nexport const getSortedColumns = (\r\n  columns: Column[],\r\n  column: Column,\r\n) => {\r\n  const index = columns.findIndex((c) => compareColumns(c, column));\r\n  const newColumns = [...columns];\r\n\r\n  newColumns.forEach((c, newColumnIndex) => {\r\n    if (c.sortDirection) {\r\n      newColumns[newColumnIndex] = {...c};\r\n      newColumns[newColumnIndex].sortDirection = undefined;\r\n    }\r\n  });\r\n\r\n  newColumns[index] = {...column};\r\n  return newColumns;\r\n};\r\n\r\nexport const getColumnWithUpdatedSortDirection = (column: Column): Column => {\r\n  const newColumn = {...column};\r\n  newColumn.sortDirection = getNextSortDirection(newColumn.sortDirection);\r\n  return newColumn;\r\n};\r\n\r\nconst getNextSortDirection = (previousSortdirection?: SortDirection) => {\r\n  let nextSortDirection;\r\n  if (previousSortdirection) {\r\n    nextSortDirection = previousSortdirection === SortDirection.Ascend\r\n      ? SortDirection.Descend : SortDirection.Ascend;\r\n  } else {\r\n    nextSortDirection = defaultOptions.columnSortDirection;\r\n  }\r\n  return nextSortDirection;\r\n};\r\n","\r\nimport { ITableAllProps } from '../';\r\nimport { Events } from '../enums';\r\nimport { getCopyOfArrayAndInsertOrReplaceItem } from './ArrayUtils';\r\nimport { changeCellEditorToCellTextHandler, changeCellTextToCellEditorHandler } from './CellUtils';\r\nimport { getSortedColumns } from './HeadRowUtils';\r\n\r\nexport const getOnEventHandler = ({\r\n  columns,\r\n  data,\r\n  editableCells = [],\r\n  onDataChanged = () => {},\r\n  onEvent = () => {},\r\n  onOptionChanged,\r\n  rowKeyField,\r\n  selectedRows = [],\r\n  virtualScrolling,\r\n}: ITableAllProps) => {\r\n  return (event: string, eventData: any) => {\r\n    switch (event) {\r\n      case Events.OpenEditor:\r\n        changeCellTextToCellEditorHandler(\r\n          eventData.cell,\r\n          editableCells,\r\n          onOptionChanged);\r\n        break;\r\n      case Events.CloseEditor:\r\n        changeCellEditorToCellTextHandler(\r\n          eventData.cell,\r\n          editableCells,\r\n          onOptionChanged);\r\n        break;\r\n      case Events.RowDataChanged:\r\n          const newData = getCopyOfArrayAndInsertOrReplaceItem(eventData.rowData, rowKeyField, data);\r\n          onDataChanged(newData);\r\n          break;\r\n      case Events.RowSelected:\r\n          onOptionChanged({ selectedRows: [...selectedRows, ...[eventData.rowKeyValue]] });\r\n          break;\r\n      case Events.RowDeselected:\r\n          onOptionChanged({ selectedRows: [...selectedRows].filter((s) => s !== eventData.rowKeyValue) });\r\n          break;\r\n      case Events.SortingChanged:\r\n          const sortedColumns = getSortedColumns(columns, eventData.column);\r\n          onOptionChanged({ columns: sortedColumns });\r\n          break;\r\n      case Events.ScrollTable:\r\n          if (virtualScrolling) {\r\n            const scrollPosition = eventData.scrollTop;\r\n            if (virtualScrolling) {\r\n              onOptionChanged({ virtualScrolling: { ...virtualScrolling, scrollPosition }});\r\n            }\r\n          }\r\n          break;\r\n    }\r\n    onEvent(event, eventData);\r\n  };\r\n};\r\n","export const isEmpty = (value: any): boolean => (value == null || value.length === 0);\r\n","import { DataType } from '../enums';\r\nimport { Column } from '../Models/Column';\r\nimport { getField } from './ColumnUtils';\r\n\r\nexport const convertToColumnTypes = (data: any[], columns: Column[]) => {\r\n  const newData: any[] = data.map((d) => {\r\n    const nd = {...d};\r\n    columns.forEach((c) => {\r\n      const field = getField(c);\r\n      if (nd[field] != null) {\r\n        switch (c.dataType) {\r\n          case DataType.String: nd[field] = nd[field].toString(); break;\r\n          case DataType.Number: nd[field] = Number(nd[field]); break;\r\n          case DataType.Date: nd[field] = new Date(nd[field]); break;\r\n          case DataType.Boolean: nd[field] = toBoolean(nd[field]); break;\r\n        }\r\n      }\r\n    });\r\n    return nd;\r\n  });\r\n  return newData;\r\n};\r\n\r\nexport const toBoolean = (value: any) => {\r\n  if (typeof value === 'string') {\r\n    switch (value.toLowerCase().trim()) {\r\n      case 'true': case 'yes': case '1': return true;\r\n      case 'false': case 'no': case '0': case null: return false;\r\n    }\r\n  }\r\n  return Boolean(value);\r\n};\r\n","import * as React from 'react';\r\n\r\nexport interface IEmptyCellsProps {\r\n  count: number;\r\n  shouldUseTh?: boolean;\r\n}\r\n\r\nconst EmptyCells: React.FunctionComponent<IEmptyCellsProps> = ({ count, shouldUseTh }) => {\r\n  return (\r\n    <>\r\n      {[...Array(count)].map((item, index) =>\r\n        shouldUseTh ?\r\n          <th key={index} className='tc-empty-cell'/> :\r\n          <td key={index} className='tc-empty-cell'/>)}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EmptyCells;\r\n","import * as React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { Events, SortDirection, SortingMode } from '../../enums';\r\nimport { getColumnWithUpdatedSortDirection } from '../../Utils/HeadRowUtils';\r\nimport { IHeadCellProps } from '../HeadCell/HeadCell';\r\n\r\nconst HeadCellContent: React.FunctionComponent<IHeadCellProps> = (props) => {\r\n  const {\r\n    column: { headCell },\r\n  } = props;\r\n  if (headCell) {\r\n    return headCell(props);\r\n  }\r\n\r\n  const {\r\n    column,\r\n    column: { title, sortDirection },\r\n    onEvent,\r\n    sortingMode,\r\n  } = props;\r\n  const isSortingEnabled = sortingMode === SortingMode.Single;\r\n  const sortClick = isSortingEnabled ? () => {\r\n    const updatedColumn = getColumnWithUpdatedSortDirection(column);\r\n    onEvent(Events.SortingChanged, { column: updatedColumn });\r\n  } : undefined;\r\n  return (\r\n    <div\r\n      className={`tc-thead-cell-content ${isSortingEnabled ? 'tc-pointer' : ''}`}\r\n      onClick={sortClick}\r\n    >\r\n      <span>{title}</span>\r\n      {\r\n        sortDirection && isSortingEnabled && (\r\n          <span\r\n            className={\r\n              sortDirection === SortDirection.Ascend\r\n                ? defaultOptions.css.iconSortArrowUp\r\n                : defaultOptions.css.iconSortArrowDown\r\n            }\r\n          />\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HeadCellContent;\r\n","import * as React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { SortingMode } from '../../enums';\r\nimport { Column } from '../../Models/Column';\r\nimport { EventFunc } from '../../types';\r\nimport HeadCellContent from '../HeadCellContent/HeadCellContent';\r\n\r\nexport interface IHeadCellProps {\r\n  column: Column;\r\n  sortingMode: SortingMode;\r\n  onEvent: EventFunc;\r\n}\r\n\r\nconst HeadCell: React.FunctionComponent<IHeadCellProps> = (props) => {\r\n  const {\r\n    column: { style },\r\n  } = props;\r\n  return (\r\n    <th scope='col' style={style} className={defaultOptions.css.theadCell}>\r\n      <HeadCellContent {...props}/>\r\n    </th>\r\n  );\r\n};\r\n\r\nexport default HeadCell;\r\n","import React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { SortingMode } from '../../enums';\r\nimport { Column } from '../../Models/Column';\r\nimport { EventFunc } from '../../types';\r\nimport EmptyCells from '../EmptyCells/EmptyCells';\r\nimport HeadCell from '../HeadCell/HeadCell';\r\n\r\nexport interface IHeadRowProps {\r\n  columns: Column[];\r\n  sortingMode: SortingMode;\r\n  groupColumnsCount: number;\r\n  onEvent: EventFunc;\r\n}\r\n\r\nconst HeadRow: React.FunctionComponent<IHeadRowProps> = ({\r\n  columns,\r\n  groupColumnsCount,\r\n  onEvent,\r\n  sortingMode,\r\n}) => {\r\n  return (\r\n    <tr className={defaultOptions.css.theadRow}>\r\n      <EmptyCells count={groupColumnsCount}/>\r\n      {columns.map((column) => {\r\n        return (\r\n          <HeadCell\r\n            key={column.key}\r\n            column={column}\r\n            onEvent={onEvent}\r\n            sortingMode={sortingMode}\r\n          />\r\n        );\r\n      })}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default HeadRow;\r\n","const groupMark = {};\r\n\r\nexport default groupMark;\r\n","import groupMark from '../groupMark';\r\nimport { Column } from '../models';\r\nimport { Group } from '../Models/Group';\r\nimport { GroupRowData } from '../Models/GroupRowData';\r\nimport { OptionChangedFunc } from '../types';\r\nimport { getField } from './ColumnUtils';\r\n\r\nexport const groupClick = (groupsExpanded: any[][], groupRowData: GroupRowData, onOptionChanged: OptionChangedFunc) => {\r\n  const newGroupsExpanded =\r\n    groupsExpanded.filter((ge) => JSON.stringify(ge) !== JSON.stringify(groupRowData.key));\r\n  if (newGroupsExpanded.length === groupsExpanded.length) {\r\n    newGroupsExpanded.push(groupRowData.key);\r\n  }\r\n  onOptionChanged({ groupsExpanded: newGroupsExpanded });\r\n};\r\n\r\nexport const getExpandedGroups = (groupedData: any[]): any[][] => {\r\n  const groupsExpanded: any[][] = [];\r\n  for (const value of groupedData) {\r\n    if (value.groupMark === groupMark) {\r\n      groupsExpanded.push(value.key);\r\n    }\r\n  }\r\n  return groupsExpanded;\r\n};\r\n\r\nexport const getGroupedData = (\r\n  data: any[],\r\n  groups: Group[],\r\n  groupedColumns: Column[],\r\n  groupsExpanded?: any[]): any[] => {\r\n  const columnMap: any = {};\r\n  groupedColumns.forEach((c) => columnMap[c.key] = getField(c));\r\n  const grouped = getGroupedStructure(data, groups, columnMap, 0, groupsExpanded);\r\n  return convertToFlat(grouped);\r\n};\r\n\r\nexport const convertToFlat = (grouped: any, key: any[] = []) => {\r\n  let result: any[] = [];\r\n  grouped.forEach((value: any, groupValue: any) => {\r\n    const groupKey = [...key];\r\n    groupKey.push(groupValue);\r\n    result.push({ groupMark, key: groupKey, value: groupValue });\r\n    if (Array.isArray(value)) {\r\n      value.forEach((item) => {\r\n        result.push(item);\r\n      });\r\n    } else {\r\n      result = result.concat(convertToFlat(value, groupKey));\r\n    }\r\n  });\r\n  return result;\r\n};\r\n\r\nexport const getGroupedStructure = (\r\n  data: any[],\r\n  groups: Group[],\r\n  columnMap: any,\r\n  expandedDeep: number = 0,\r\n  groupsExpanded?: any[],\r\n): any => {\r\n  groups = [...groups];\r\n  const group = groups.shift();\r\n  if (group) {\r\n    const grouped = groupBy(data, (item: any) => item[columnMap[group.columnKey]]);\r\n    grouped.forEach((value, key) => {\r\n      const groupExpandedItems = groupsExpanded && groupsExpanded.filter((ge) => ge[expandedDeep] === key);\r\n      const isThisGroupExpanded = !groupExpandedItems\r\n        || groupExpandedItems.some((ge) => ge.length === expandedDeep + 1);\r\n      if (isThisGroupExpanded) {\r\n        const newStructure = getGroupedStructure(\r\n          value,\r\n          groups,\r\n          columnMap,\r\n          expandedDeep + 1,\r\n          groupExpandedItems && groupExpandedItems.filter((ge) => ge.length > expandedDeep + 1),\r\n        );\r\n        if (newStructure) {\r\n          grouped.set(key, newStructure);\r\n        }\r\n      } else {\r\n        grouped.set(key, []);\r\n      }\r\n    });\r\n    return grouped;\r\n  }\r\n};\r\n\r\nexport const groupBy = (data: any[], keyGetter: any, isEmptyValue: boolean = false) => {\r\n  const map = new Map();\r\n  data.forEach((item) => {\r\n    const key = keyGetter(item);\r\n    if (isEmptyValue) {\r\n      map.set(key, []);\r\n    } else {\r\n      const collection = map.get(key);\r\n      if (!collection) {\r\n          map.set(key, [item]);\r\n      } else {\r\n          collection.push(item);\r\n      }\r\n    }\r\n  });\r\n  return map;\r\n};\r\n","const emptyFunc = () => {};\r\nexport default emptyFunc;\r\n","import { Column } from '../models';\r\nimport { getField } from './ColumnUtils';\r\n\r\nexport const getRowValueByColumn = (rowData: any, column: Column) => {\r\n  return rowData[getField(column)];\r\n};\r\n","import React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { Events } from '../../enums';\r\nimport { Cell } from '../../models';\r\nimport { isEmpty } from '../../Utils/CommonUtils';\r\nimport { getRowValueByColumn } from '../../Utils/RowUtils';\r\nimport { ICellEditorProps } from '../CellEditor/CellEditor';\r\n\r\nconst CellEditorBoolean: React.FunctionComponent<ICellEditorProps> = ({\r\n  column,\r\n  onEvent,\r\n  onValueChange,\r\n  rowData,\r\n  rowKeyField,\r\n}) => {\r\n  const value = getRowValueByColumn(rowData, column);\r\n  return (\r\n    <input autoFocus={true}\r\n      className={defaultOptions.css.checkbox}\r\n      type='checkbox'\r\n      ref={(elem) => elem && (elem.indeterminate = isEmpty(value))}\r\n      checked={value || false}\r\n      onChange={(event) => onValueChange(event.currentTarget.checked)}\r\n      onBlur={() => {\r\n        const cell: Cell = { columnKey: column.key, rowKey: rowData[rowKeyField] };\r\n        onEvent(Events.CloseEditor, { cell });\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CellEditorBoolean;\r\n","import React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { Events } from '../../enums';\r\nimport { Cell } from '../../models';\r\nimport { getRowValueByColumn } from '../../Utils/RowUtils';\r\nimport { ICellEditorProps } from '../CellEditor/CellEditor';\r\n\r\nconst CellEditorDate: React.FunctionComponent<ICellEditorProps> = ({\r\n  column,\r\n  onEvent,\r\n  onValueChange,\r\n  rowData,\r\n  rowKeyField,\r\n}) => {\r\n  const fieldValue = getRowValueByColumn(rowData, column);\r\n  const value = fieldValue && fieldValue.toISOString().split('T')[0];\r\n  return (\r\n    <input\r\n      autoFocus={true}\r\n      className={defaultOptions.css.dateInput}\r\n      type='date'\r\n      value={value || ''}\r\n      onChange={(event) => {\r\n        const targetValue: string = event.currentTarget.value;\r\n        onValueChange(targetValue ? new Date(targetValue) : null);\r\n      }}\r\n      onBlur={() => {\r\n        const cell: Cell = { columnKey: column.key, rowKey: rowData[rowKeyField] };\r\n        onEvent(Events.CloseEditor, { cell });\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CellEditorDate;\r\n","import React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { Events } from '../../enums';\r\nimport { Cell } from '../../models';\r\nimport { getRowValueByColumn } from '../../Utils/RowUtils';\r\nimport { ICellEditorProps } from '../CellEditor/CellEditor';\r\n\r\nconst CellEditorNumber: React.FunctionComponent<ICellEditorProps> = ({\r\n  column,\r\n  onEvent,\r\n  onValueChange,\r\n  rowData,\r\n  rowKeyField,\r\n}) => {\r\n  const value = getRowValueByColumn(rowData, column);\r\n  return (\r\n    <input autoFocus={true}\r\n      className={defaultOptions.css.numberInput}\r\n      type='number'\r\n      value={value || ''}\r\n      onChange={(event) => {\r\n        const newValue = event.currentTarget.value;\r\n        onValueChange(Number(newValue) || null);\r\n      }}\r\n      onBlur={() => {\r\n        const cell: Cell = { columnKey: column.key, rowKey: rowData[rowKeyField] };\r\n        onEvent(Events.CloseEditor, { cell });\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CellEditorNumber;\r\n","import React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { Events } from '../../enums';\r\nimport { Cell } from '../../models';\r\nimport { getRowValueByColumn } from '../../Utils/RowUtils';\r\nimport { ICellEditorProps } from '../CellEditor/CellEditor';\r\n\r\nconst CellEditorString: React.FunctionComponent<ICellEditorProps> = ({\r\n  column,\r\n  onEvent,\r\n  onValueChange,\r\n  rowData,\r\n  rowKeyField,\r\n}) => {\r\n  const value = getRowValueByColumn(rowData, column);\r\n  return (\r\n    <input autoFocus={true}\r\n      type='text'\r\n      className={defaultOptions.css.textInput}\r\n      value={value || ''}\r\n      onChange={(event) => onValueChange(event.currentTarget.value)}\r\n      onBlur={() => {\r\n        const cell: Cell = { columnKey: column.key, rowKey: rowData[rowKeyField] };\r\n        onEvent(Events.CloseEditor, { cell });\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CellEditorString;\r\n","import React from 'react';\r\n\r\nimport { DataType } from '../../enums';\r\nimport { ICellEditorProps } from '../CellEditor/CellEditor';\r\nimport CellEditorBoolean from '../CellEditorBoolean/CellEditorBoolean';\r\nimport CellEditorDate from '../CellEditorDate/CellEditorDate';\r\nimport CellEditorNumber from '../CellEditorNumber/CellEditorNumber';\r\nimport CellEditorString from '../CellEditorString/CellEditorString';\r\n\r\nconst CellEditorDataType: React.FunctionComponent<ICellEditorProps> = (props) => {\r\n  switch (props.column.dataType) {\r\n    case DataType.Boolean: return <CellEditorBoolean {...props} />;\r\n    case DataType.Date: return <CellEditorDate {...props} />;\r\n    case DataType.Number: return <CellEditorNumber {...props} />;\r\n    default: return <CellEditorString {...props} />;\r\n  }\r\n};\r\n\r\nexport default CellEditorDataType;\r\n","import * as React from 'react';\r\n\r\nimport { ICellEditorProps } from '../CellEditor/CellEditor';\r\nimport CellEditorDataType from '../CellEditorDataType/CellEditorDataType';\r\n\r\nconst FilterCell: React.FunctionComponent<ICellEditorProps> = (props) => {\r\n  const {\r\n    column: { textAlign },\r\n    onValueChange,\r\n  } = props;\r\n  return (\r\n    <td style={{textAlign}}>\r\n      <CellEditorDataType\r\n        {...props}\r\n        onValueChange={onValueChange}\r\n      />\r\n      <div className='tc-filter-row-clear-button' onClick={() => { onValueChange(null); }}>\r\n        Clear\r\n      </div>\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default FilterCell;\r\n","import React from 'react';\r\n\r\nimport emptyFunc from '../../emptyFunc';\r\nimport { Column } from '../../Models/Column';\r\nimport { FilterCondition } from '../../Models/FilterCondition';\r\nimport { OptionChangedFunc } from '../../types';\r\nimport { getField } from '../../Utils/ColumnUtils';\r\nimport { filterCellValueChangeHandler } from '../../Utils/FilterUtils';\r\nimport FilterCell from '../FilterCell/FilterCell';\r\n\r\nexport interface IFilterRowProps {\r\n  columns: Column[];\r\n  filterRow: FilterCondition[];\r\n  onOptionChanged: OptionChangedFunc;\r\n}\r\n\r\nconst FilterRow: React.FunctionComponent<IFilterRowProps> = ({\r\n  columns,\r\n  filterRow,\r\n  onOptionChanged,\r\n}) => {\r\n  const rowData = filterRow.reduce((c: any, f, i, array) => {\r\n    c[f.field] = f.value;\r\n    return c;\r\n  }, {});\r\n  return (\r\n    <tr className='tc-filter-row tc-tr'>\r\n      {columns.map((column) => {\r\n        return (\r\n          <FilterCell\r\n            key={column.key}\r\n            column={column}\r\n            field={getField(column)}\r\n            rowKeyField={''}\r\n            isSelectedRow={false}\r\n            onEvent={emptyFunc}\r\n            rowData={rowData}\r\n            onValueChange={(value) => {\r\n              filterCellValueChangeHandler(value, column.key, filterRow, onOptionChanged);\r\n            }}\r\n          />\r\n        );\r\n      })}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default FilterRow;\r\n","import { Cell } from '../Models/Cell';\r\nimport { Column } from '../Models/Column';\r\nimport { FilterCondition } from '../Models/FilterCondition';\r\nimport { OptionChangedFunc } from '../types';\r\nimport { getCopyOfArrayAndDeleteItem, getCopyOfArrayAndInsertOrReplaceItem } from './ArrayUtils';\r\nimport { getField } from './ColumnUtils';\r\nimport { isEmpty } from './CommonUtils';\r\n\r\nexport const getRowEditableCells = (rowKeyValue: any, editableCells?: Cell[]): Cell[] => {\r\n  return editableCells ? editableCells.filter((c) => c.rowKey === rowKeyValue) : [];\r\n};\r\n\r\nexport const searchData = (columns: Column[], data: any[], searchText: string): any[] => {\r\n  return columns.reduce((initialData: any[], c) => {\r\n    const filterFunction = (item: any) => {\r\n      return c.search ? c.search(searchText, item, c) : initialData.indexOf(item) < 0\r\n        && item[getField(c)].toString().toLowerCase().includes(searchText.toLowerCase());\r\n    };\r\n    return initialData.concat(data.filter(filterFunction));\r\n  }, []);\r\n};\r\n\r\nexport const filterData = (data: any[], filterRow: FilterCondition[]): any[] => {\r\n  return filterRow.reduce((initialData, f) => {\r\n    const searcFunc = typeof f.value === 'string' ? (d: any) => d[f.field].toLowerCase().includes(f.value.toLowerCase())\r\n      : (d: any) => d[f.field] === f.value;\r\n    return initialData.filter(searcFunc);\r\n  }, data);\r\n};\r\n\r\nexport const filterCellValueChangeHandler = (\r\n    value: any, field: string, filterRow: FilterCondition[], optionChangeHandler: OptionChangedFunc,\r\n  ) => {\r\n  let newFilterRow;\r\n  const newFRValue: FilterCondition = {\r\n    field,\r\n    operator: '=',\r\n    value,\r\n  };\r\n  newFilterRow = isEmpty(value) ? getCopyOfArrayAndDeleteItem(newFRValue, 'field', filterRow)\r\n    : getCopyOfArrayAndInsertOrReplaceItem(newFRValue, 'field', filterRow);\r\n  optionChangeHandler({ filterRow: newFilterRow });\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { Events } from '../../enums';\r\nimport { Cell } from '../../models';\r\nimport { isEmpty } from '../../Utils/CommonUtils';\r\nimport { getRowValueByColumn } from '../../Utils/RowUtils';\r\nimport { ICellContentProps } from '../CellContent/CellContent';\r\n\r\nconst CellText: React.FunctionComponent<ICellContentProps> = ({\r\n  column,\r\n  rowData,\r\n  rowKeyField,\r\n  onEvent,\r\n}) => {\r\n  const value = getRowValueByColumn(rowData, column);\r\n  return (\r\n    <div className='tc-cell-text'\r\n      onClick={() => {\r\n        const cell: Cell = { columnKey: column.key, rowKey: rowData[rowKeyField] };\r\n        onEvent(Events.OpenEditor, { cell });\r\n      }}\r\n    >{!isEmpty(value) ? value.toString() : <>&nbsp;</>}</div>\r\n  );\r\n};\r\n\r\nexport default CellText;\r\n","import * as React from 'react';\r\n\r\nimport { Column } from '../../Models/Column';\r\nimport { EventFunc } from '../../types';\r\nimport CellText from '../CellText/CellText';\r\n\r\nexport interface ICellContentProps {\r\n  column: Column;\r\n  field: string;\r\n  rowData: any;\r\n  rowKeyField: string;\r\n  onEvent: EventFunc;\r\n}\r\n\r\nconst CellContent: React.FunctionComponent<ICellContentProps> = (props) => {\r\n  const { column: { cell } } = props;\r\n  return cell ? cell(props) :  <CellText {...props}/>;\r\n};\r\n\r\nexport default CellContent;\r\n","import { KeyboardEnum } from '../enums';\r\n\r\n/*\r\n  Used inside effects and returned as result from them,\r\n  it adds listener to esc & enter keys on life cycle of component\r\n*/\r\nexport const addEscEnterKeyEffect = (escKeyHandler: () => void, enterKeyHandler: () => void) => {\r\n  const handleKeyboard = (event: KeyboardEvent) => {\r\n    if (event.keyCode === KeyboardEnum.Esc) {\r\n      escKeyHandler();\r\n    }\r\n\r\n    if (event.keyCode === KeyboardEnum.Enter) {\r\n      enterKeyHandler();\r\n    }\r\n  };\r\n  return getEventListenerEffect('keyup', handleKeyboard);\r\n};\r\n\r\nexport const getEventListenerEffect = (eventName: string, handler: any) => {\r\n  window.addEventListener(eventName, handler);\r\n\r\n  return () => {\r\n    window.removeEventListener(eventName, handler);\r\n  };\r\n};\r\n","import React from 'react';\r\n\r\nexport interface ICellEditorValidationMessageProps {\r\n  message: string;\r\n}\r\n\r\nconst CellEditorValidationMessage: React.FunctionComponent<ICellEditorValidationMessageProps> = (props) => {\r\n  const { message } = props;\r\n\r\n  return (\r\n    <div className='tc-validation-message'>{message}</div>\r\n  );\r\n};\r\n\r\nexport default CellEditorValidationMessage;\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\n\r\nimport { Events } from '../../enums';\r\nimport { Cell } from '../../models';\r\nimport { addEscEnterKeyEffect } from '../../Utils/EffectUtils';\r\nimport { getValidationValue } from '../../Utils/Validation';\r\nimport { ICellEditorProps } from '../CellEditor/CellEditor';\r\nimport CellEditorDataType from '../CellEditorDataType/CellEditorDataType';\r\nimport CellEditorValidationMessage from '../CellEditorValidationMessage/CellEditorValidationMessage';\r\n\r\nconst CellEditorState: React.FunctionComponent<ICellEditorProps> = (props) => {\r\n  const {\r\n    column,\r\n    field,\r\n    column: {\r\n      key,\r\n    },\r\n    rowData,\r\n    rowKeyField,\r\n    onEvent,\r\n    onValueChange,\r\n  } = props;\r\n  const [value, changeValue] = useState(rowData);\r\n\r\n  const validationValue = getValidationValue(value, field, column.validation);\r\n  const onValueStateChange = (newValue: any): void => {\r\n    const rowValue = { ...rowData, ...{ [key]: newValue } };\r\n    changeValue(rowValue);\r\n  };\r\n\r\n  const close = useCallback(() => {\r\n    const cell: Cell = { columnKey: column.key, rowKey: rowData[rowKeyField] };\r\n    onEvent(Events.CloseEditor, { cell });\r\n  }, [onEvent, column, rowData, rowKeyField]);\r\n\r\n  const closeHandler = useCallback(() => {\r\n    if (!validationValue) {\r\n      if (rowData[key] !== value[key]) {\r\n        onValueChange({ ...rowData, ...{ [key]: value[key] } });\r\n      }\r\n      close();\r\n    }\r\n  }, [validationValue, onValueChange, close, value, key, rowData]);\r\n\r\n  useEffect(() => {\r\n    return addEscEnterKeyEffect(close, closeHandler);\r\n  }, [close, closeHandler]);\r\n\r\n  const onEventHandler = (event: string, eventData: any) => {\r\n    if (event === Events.CloseEditor) {\r\n      closeHandler();\r\n    } else {\r\n      onEvent(event, eventData);\r\n    }\r\n  };\r\n\r\n  const stateProps = { ...props, ...{\r\n    onEvent: onEventHandler,\r\n    onValueChange: onValueStateChange,\r\n    rowData : value,\r\n  }};\r\n\r\n  return (\r\n    <>\r\n      <CellEditorDataType {...stateProps} />\r\n      {validationValue && <CellEditorValidationMessage message={validationValue} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CellEditorState;\r\n","import { ValidationFunc } from '../types';\r\n\r\nexport const getValidationValue = (rowData: any, field: string, validation?: ValidationFunc) => {\r\n  if (validation) {\r\n    return validation(rowData[field], rowData);\r\n  }\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { Column } from '../../Models/Column';\r\nimport { EventFunc, ValueChangeFunc } from '../../types';\r\nimport CellEditorState from '../CellEditorState/CellEditorState';\r\n\r\nexport interface ICellEditorProps {\r\n  column: Column;\r\n  field: string;\r\n  rowData: any;\r\n  rowKeyField: string;\r\n  isSelectedRow: boolean;\r\n  onEvent: EventFunc;\r\n  onValueChange: ValueChangeFunc;\r\n}\r\n\r\nconst CellEditor: React.FunctionComponent<ICellEditorProps> = (props) => {\r\n  const { editor } = props.column;\r\n  return editor ? editor(props) :  <CellEditorState {...props}/>;\r\n};\r\n\r\nexport default CellEditor;\r\n","import * as React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { EditingMode } from '../../enums';\r\nimport { Column } from '../../Models/Column';\r\nimport { EventFunc, RowDataChangedFunc } from '../../types';\r\nimport { getField } from '../../Utils/ColumnUtils';\r\nimport CellContent from '../CellContent/CellContent';\r\nimport CellEditor from '../CellEditor/CellEditor';\r\n\r\nexport interface ICellComponentProps {\r\n  column: Column;\r\n  editingMode: EditingMode;\r\n  isEditableCell: boolean;\r\n  isSelectedRow: boolean;\r\n  onEvent: EventFunc;\r\n  onRowDataChanged: RowDataChangedFunc;\r\n  rowData: any;\r\n  rowKeyField: string;\r\n}\r\n\r\nconst CellComponent: React.FunctionComponent<ICellComponentProps> = (props) => {\r\n  const {\r\n    column,\r\n    column: { style },\r\n    isEditableCell,\r\n    onRowDataChanged,\r\n  } = props;\r\n  return (\r\n    <td style={style} className={defaultOptions.css.cell}>\r\n      { isEditableCell ? (\r\n          <CellEditor\r\n            {...props}\r\n            field={getField(column)}\r\n            onValueChange={onRowDataChanged}\r\n          />\r\n        )\r\n        : (\r\n          <CellContent\r\n            {...props}\r\n            field={getField(column)}\r\n          />\r\n        )\r\n      }\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default CellComponent;\r\n","import React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { isEditableCell } from '../../Utils/CellUtils';\r\nimport { getRowEditableCells } from '../../Utils/FilterUtils';\r\nimport CellComponent from '../CellComponent/CellComponent';\r\nimport EmptyCells from '../EmptyCells/EmptyCells';\r\nimport { IRowProps } from '../Row/Row';\r\n\r\nconst DataRow: React.FunctionComponent<IRowProps> = ({\r\n  columns,\r\n  editableCells,\r\n  editingMode,\r\n  groupColumnsCount,\r\n  onEvent,\r\n  onRowDataChanged,\r\n  rowData,\r\n  rowKeyField,\r\n  selectedRows = [],\r\n  height,\r\n  trRef,\r\n}) => {\r\n  const rowKeyValue = rowData[rowKeyField];\r\n  const rowEditableCells = getRowEditableCells(rowKeyValue, editableCells);\r\n  const isSelectedRow = selectedRows.some((s) => s === rowKeyValue);\r\n  return (\r\n    <tr ref={trRef} style={{height}} className={`${defaultOptions.css.row} ${isSelectedRow ? defaultOptions.css.rowSelected : ''}`}>\r\n      <EmptyCells count={groupColumnsCount}/>\r\n      {columns.map((column) => (\r\n        <CellComponent\r\n          column={column}\r\n          editingMode={editingMode}\r\n          isEditableCell={isEditableCell(editingMode, column, rowEditableCells)}\r\n          isSelectedRow={isSelectedRow}\r\n          key={column.key}\r\n          onEvent={onEvent}\r\n          onRowDataChanged={onRowDataChanged}\r\n          rowData={rowData}\r\n          rowKeyField={rowKeyField}\r\n        />\r\n      ))}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default DataRow;\r\n","import React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { GroupRowData } from '../../Models/GroupRowData';\r\nimport { OptionChangedFunc } from '../../types';\r\nimport { groupClick } from '../../Utils/GroupUtils';\r\nimport EmptyCells from '../EmptyCells/EmptyCells';\r\n\r\nexport interface IGroupRowProps {\r\n  emptyColumnsCount: number;\r\n  groupRowData: GroupRowData;\r\n  groupsExpanded: any[][];\r\n  onOptionChanged: OptionChangedFunc;\r\n}\r\n\r\nconst GroupRow: React.FunctionComponent<IGroupRowProps> = ({\r\n  emptyColumnsCount,\r\n  groupRowData,\r\n  groupsExpanded,\r\n  onOptionChanged,\r\n}) => {\r\n  return (\r\n    <tr className={defaultOptions.css.groupRow}>\r\n      <EmptyCells count={emptyColumnsCount}/>\r\n      <td\r\n        className='tc-group-column'\r\n        colSpan={'100%' as any}>\r\n          <div className='tc-group-column-content'>\r\n            <div\r\n              onClick={() => {\r\n                groupClick(groupsExpanded, groupRowData, onOptionChanged);\r\n              }}\r\n              className={groupsExpanded.some((ge) => JSON.stringify(ge) === JSON.stringify(groupRowData.key))\r\n                ? defaultOptions.css.iconGroupArrowExpanded : defaultOptions.css.iconGroupArrowCollapsed}\r\n            />\r\n            <div className='tc-group-text'>{groupRowData.value.toString()}</div>\r\n          </div>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default GroupRow;\r\n","import React, { useEffect, useRef } from 'react';\r\n\r\nimport { Events } from '../../enums';\r\nimport groupMark from '../../groupMark';\r\nimport { getVirtualized } from '../../Utils/Virtualize';\r\nimport DataRow from '../DataRow/DataRow';\r\nimport GroupRow from '../GroupRow/GroupRow';\r\nimport { ITableBodyProps } from '../TableBody/TableBody';\r\n\r\nconst VirtualizedRows: React.FunctionComponent<ITableBodyProps> = (props) => {\r\n  const {\r\n    data,\r\n    groupsExpanded = [],\r\n    onEvent,\r\n    onOptionChanged,\r\n    rowKeyField,\r\n    virtualScrolling,\r\n  } = props;\r\n\r\n  const firstRowRef = useRef<HTMLInputElement>(null);\r\n  useEffect(() => {\r\n    if (firstRowRef\r\n      && firstRowRef.current\r\n      && (virtualScrolling\r\n      && (!virtualScrolling.itemHeight\r\n      || !virtualScrolling.tbodyHeight))) {\r\n      const itemHeight = firstRowRef.current.offsetHeight || 40;\r\n      const tbodyHeight = (firstRowRef.current.parentElement && firstRowRef.current.parentElement.offsetHeight) || 600;\r\n      const newVirtualScrolling = {\r\n        itemHeight,\r\n        tbodyHeight,\r\n        ...virtualScrolling,\r\n      };\r\n      onOptionChanged({ virtualScrolling: newVirtualScrolling });\r\n    }\r\n  }, [firstRowRef, onOptionChanged, virtualScrolling]);\r\n\r\n  let virtualizedData = data;\r\n  let virtualized;\r\n  if (virtualScrolling) {\r\n    virtualized = getVirtualized(virtualScrolling, virtualizedData);\r\n    virtualizedData = virtualized.virtualizedData;\r\n  }\r\n  const rowDataChangedEvent = onEvent && onEvent.bind(null, Events.RowDataChanged);\r\n  let rowRefLink: any = firstRowRef;\r\n  return (\r\n    <>\r\n      {virtualized && <tr style={{height: virtualized.beginHeight}} />}\r\n      {virtualizedData.map((d) => {\r\n        if (d.groupMark === groupMark) {\r\n          return (\r\n            <GroupRow\r\n              key={d.key}\r\n              groupRowData={d}\r\n              emptyColumnsCount={d.key.length - 1}\r\n              groupsExpanded={groupsExpanded}\r\n              onOptionChanged={onOptionChanged} />\r\n          );\r\n        } else {\r\n          const dataRow = (\r\n            <DataRow\r\n              {...props}\r\n              trRef={rowRefLink}\r\n              key={d[rowKeyField]}\r\n              rowData={d}\r\n              onRowDataChanged={rowDataChangedEvent}\r\n            />\r\n          );\r\n          rowRefLink = undefined;\r\n          return dataRow;\r\n        }\r\n      })}\r\n      {virtualized && <tr style={{height: virtualized.endHeight}} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default VirtualizedRows;\r\n","import { VirtualScrolling } from '../Models/VirtualScrolling';\r\n\r\nexport const getVirtualized = (virtualScrolling: VirtualScrolling, data: any[]) => {\r\n  const virtualizedData: any[] = [];\r\n  const { scrollPosition = 0 } = virtualScrolling;\r\n  let { tbodyHeight = 600 } = virtualScrolling;\r\n  let beginHeight = 0;\r\n  let endHeight = 0;\r\n  data.reduce((acc, value) => {\r\n    const itemHeight = virtualScrolling.itemHeight ?\r\n      (\r\n        typeof virtualScrolling.itemHeight === 'number'\r\n        ? virtualScrolling.itemHeight\r\n        : virtualScrolling.itemHeight(value)\r\n      )\r\n      : 40;\r\n    if (acc >= scrollPosition - itemHeight) {\r\n      if (tbodyHeight >= -(itemHeight * 5)) {\r\n        tbodyHeight = tbodyHeight - itemHeight;\r\n        virtualizedData.push(value);\r\n      } else {\r\n        endHeight += itemHeight;\r\n      }\r\n    } else {\r\n      beginHeight = acc - itemHeight;\r\n    }\r\n    return acc + itemHeight;\r\n  }, 0);\r\n\r\n  return {\r\n    beginHeight,\r\n    endHeight,\r\n    virtualizedData,\r\n  };\r\n};\r\n","import * as React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { EditingMode, Events } from '../../enums';\r\nimport { Cell } from '../../Models/Cell';\r\nimport { Column } from '../../Models/Column';\r\nimport { FilterCondition } from '../../Models/FilterCondition';\r\nimport { Group } from '../../Models/Group';\r\nimport { VirtualScrolling } from '../../Models/VirtualScrolling';\r\nimport { DataChangedFunc, EventFunc, OptionChangedFunc } from '../../types';\r\nimport { getExpandedGroups, getGroupedData } from '../../Utils/GroupUtils';\r\nimport FilterRow from '../FilterRow/FilterRow';\r\nimport VirtualizedRows from '../VirtualizedRows/VirtualizedRows';\r\n\r\nexport interface ITableBodyProps {\r\n  columns: Column[];\r\n  data: any[];\r\n  editableCells: Cell[];\r\n  editingMode: EditingMode;\r\n  filterRow?: FilterCondition[];\r\n  groupedColumns: Column[];\r\n  groupColumnsCount: number;\r\n  groups?: Group[];\r\n  groupsExpanded?: any[][];\r\n  onDataChanged?: DataChangedFunc;\r\n  onEvent: EventFunc;\r\n  onOptionChanged: OptionChangedFunc;\r\n  rowKeyField: string;\r\n  selectedRows: any[];\r\n  virtualScrolling?: VirtualScrolling;\r\n}\r\n\r\nconst TableBody: React.FunctionComponent<ITableBodyProps> = (props) => {\r\n  const {\r\n    columns,\r\n    data,\r\n    filterRow,\r\n    groupedColumns,\r\n    groups,\r\n    onEvent,\r\n    onOptionChanged,\r\n  } = props;\r\n  const { groupsExpanded } = props;\r\n  const groupedData = groups ? getGroupedData(data, groups, groupedColumns, groupsExpanded) : data;\r\n  if (groups && !groupsExpanded) {\r\n    onOptionChanged({ groupsExpanded: getExpandedGroups(groupedData) });\r\n    return <></>;\r\n  }\r\n  return (\r\n    <tbody className={defaultOptions.css.tbody} onScroll={(event) => {\r\n      onEvent(Events.ScrollTable, { scrollTop: event.currentTarget.scrollTop, timeStamp: event.timeStamp  });\r\n    }}>\r\n      {filterRow && <FilterRow columns={columns} filterRow={filterRow} onOptionChanged={onOptionChanged}/>}\r\n      <VirtualizedRows\r\n        {...props}\r\n        data={groupedData}\r\n      />\r\n    </tbody>\r\n  );\r\n};\r\n\r\nexport default TableBody;\r\n","import * as React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { EditingMode, SortingMode } from '../../enums';\r\nimport { Cell } from '../../Models/Cell';\r\nimport { Column } from '../../Models/Column';\r\nimport { FilterCondition } from '../../Models/FilterCondition';\r\nimport { Group } from '../../Models/Group';\r\nimport { VirtualScrolling } from '../../Models/VirtualScrolling';\r\nimport { DataChangedFunc, EventFunc, OptionChangedFunc } from '../../types';\r\nimport { getOnEventHandler } from '../../Utils/EventUtils';\r\nimport { filterData, searchData } from '../../Utils/FilterUtils';\r\nimport { sortData } from '../../Utils/SortUtils';\r\nimport { convertToColumnTypes } from '../../Utils/TypeUtils';\r\nimport HeadRow from '../HeadRow/HeadRow';\r\nimport TableBody from '../TableBody/TableBody';\r\n\r\n/**\r\n * Sets the options of the table which are related to its looks\r\n */\r\nexport interface ITableOption {\r\n  columns: Column[];\r\n  editableCells?: Cell[];\r\n  editingMode?: EditingMode;\r\n  filterRow?: FilterCondition[];\r\n  groups?: Group[];\r\n  groupsExpanded?: any[][];\r\n  rowKeyField: string;\r\n  search?: string;\r\n  selectedRows?: any[];\r\n  sortingMode?: SortingMode;\r\n  virtualScrolling?: VirtualScrolling;\r\n}\r\n\r\nexport interface ITableEvents {\r\n  /** Called each time Data is changed */\r\n  onDataChanged?: DataChangedFunc;\r\n  /** Called each time ITableOption changed */\r\n  onOptionChanged: OptionChangedFunc;\r\n  /** Called each time when some event emited */\r\n  onEvent?: EventFunc;\r\n}\r\n\r\nexport interface ITableAllProps extends ITableEvents, ITableOption {\r\n  /** The data which is shown in Table's rows */\r\n  data: any[];\r\n}\r\n\r\nexport const Table: React.FunctionComponent<ITableAllProps> = (props) => {\r\n  const {\r\n    editableCells = [],\r\n    editingMode = EditingMode.None,\r\n    filterRow,\r\n    groups,\r\n    search,\r\n    selectedRows = [],\r\n    sortingMode = SortingMode.None,\r\n  } = props;\r\n  let { columns, data } = props;\r\n  data = search ? searchData(columns, data, search) : data;\r\n  data = convertToColumnTypes(data, columns);\r\n  data = filterRow ? filterData(data, filterRow) : data;\r\n  data = sortData(columns, data);\r\n\r\n  let groupColumnsCount = 0;\r\n  let groupedColumns: Column[] = [];\r\n  if (groups) {\r\n    groupColumnsCount = groups.length;\r\n    groupedColumns = columns.filter((c) => groups.some((g) => g.columnKey === c.key));\r\n    columns = columns.filter((c) => !groups.some((g) => g.columnKey === c.key));\r\n  }\r\n\r\n  const tableOnEvent = getOnEventHandler(props);\r\n\r\n  return (\r\n    <div className='tc' >\r\n      <table className={defaultOptions.css.table}>\r\n        <thead className={defaultOptions.css.thead}>\r\n          <HeadRow\r\n            groupColumnsCount={groupColumnsCount}\r\n            columns={columns}\r\n            onEvent={tableOnEvent}\r\n            sortingMode={sortingMode}\r\n          />\r\n        </thead>\r\n        <TableBody\r\n            {...props}\r\n            columns={columns}\r\n            data={data}\r\n            editableCells={editableCells}\r\n            editingMode={editingMode}\r\n            groupColumnsCount={groupColumnsCount}\r\n            groupedColumns={groupedColumns}\r\n            onEvent={tableOnEvent}\r\n            selectedRows={selectedRows}\r\n        />\r\n      </table>\r\n    </div >\r\n  );\r\n};\r\n","import { SortDirection } from '../enums';\r\nimport { Column } from '../Models/Column';\r\n\r\nexport const sortData = (columns: Column[], data: any): any[] => {\r\n  const sortedColumn = columns.find((column) => column.sortDirection);\r\n  if (!sortedColumn) { return data; }\r\n  const columnKey = sortedColumn.key;\r\n  const sortFunc = sortedColumn.sortDirection === SortDirection.Ascend ?\r\n    ((a: any, b: any) => a[columnKey] < b[columnKey] ? -1 : 1)\r\n    : ((a: any, b: any) => a[columnKey] > b[columnKey] ? -1 : 1);\r\n  const newData = [...data].sort(sortFunc);\r\n  return newData;\r\n};\r\n","import './CommandColumnDemo.scss';\r\n\r\nimport React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, TextAlign } from '../../lib/enums';\r\nimport { CellFuncPropsWithChildren, EventFunc, OptionChangedFunc } from '../../lib/types';\r\n\r\nconst DELETE_EVENT = 'delete';\r\n\r\nconst dataArray = Array(10).fill(undefined).map(\r\n  (_, index) => ({\r\n    column1: `column:1 row:${index}`,\r\n    column2: `column:2 row:${index}`,\r\n    column3: `column:3 row:${index}`,\r\n    column4: `column:4 row:${index}`,\r\n  }),\r\n);\r\n\r\nconst AlertCell: React.FC<CellFuncPropsWithChildren> = ({\r\n   rowData,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <img\r\n        src='static/icons/alert.svg'\r\n        className='button'\r\n        alt=''\r\n        onClick={() => alert(`row data: ${JSON.stringify(rowData)}`)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst DeleteRow: React.FC<CellFuncPropsWithChildren> = ({\r\n  rowData, onEvent,\r\n}) => {\r\n return (\r\n   <div>\r\n      <img\r\n        src='static/icons/delete.svg'\r\n        className='button'\r\n        onClick={() => onEvent(DELETE_EVENT, { rowData })}\r\n        alt=''\r\n      />\r\n   </div>\r\n );\r\n};\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { key: 'command1', cell: (props) => <AlertCell {...props}/>, style: { width: 40 }, textAlign: TextAlign.Center },\r\n    { key: 'column1-1', field: 'column1', title: 'Column 1', dataType: DataType.String },\r\n    { key: 'column1-2', field: 'column1', title: 'Column 1', dataType: DataType.String },\r\n    { key: 'column2', title: 'Column 2', dataType: DataType.String },\r\n    { key: 'column3', title: 'Column 3', dataType: DataType.String },\r\n    { key: 'column4', title: 'Column 4', dataType: DataType.String },\r\n    { key: 'command22', cell: (props) => <DeleteRow {...props} />, style: { width: 40, textAlign: TextAlign.Center } },\r\n  ],\r\n  rowKeyField: 'column1',\r\n};\r\n\r\nconst CommandColumnDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n\r\n  const [data, changeData] = useState(dataArray);\r\n  const onDataChanged: OptionChangedFunc = (newValue) => {\r\n    changeData(newValue);\r\n  };\r\n\r\n  const onEvent: EventFunc = (event, eventData) => {\r\n    if (event === DELETE_EVENT) {\r\n      const newValue = data.filter(\r\n        (d: any) => d[tableOption.rowKeyField] !== eventData.rowData[tableOption.rowKeyField]);\r\n      changeData(newValue);\r\n    }\r\n  };\r\n  return (\r\n    <Table\r\n      {...option}\r\n      data={data}\r\n      onOptionChanged={onOptionChanged}\r\n      onDataChanged={onDataChanged}\r\n      onEvent={onEvent}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CommandColumnDemo;\r\n","import './CustomCellDemo.scss';\r\n\r\nimport React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, EditingMode, Events, TextAlign } from '../../lib/enums';\r\nimport { Cell } from '../../lib/models';\r\nimport { CellFuncPropsWithChildren, OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true, img: 'static/images/man1.PNG' },\r\n  { id: 2, name: 'Billi Bob', score: 55, passed: false, nextTry: new Date(2019, 10, 8, 10), img: 'static/images/man2.PNG' },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false, nextTry: new Date(2019, 11, 8, 10), img: 'static/images/man3.PNG' },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true, img: 'static/images/man4.PNG' },\r\n  { id: 5, name: 'Marshall Bruce', score: 77, passed: true, img: 'static/images/man5.PNG'  },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false, nextTry: new Date(2019, 10, 9, 10), img: 'static/images/man6.PNG'  },\r\n];\r\n\r\nconst CustomCell: React.FC<CellFuncPropsWithChildren> = ({\r\n  column: { key }, field, rowData, rowKeyField, onEvent,\r\n}) => {\r\n  return (\r\n    <div onClick={() => {\r\n      const cell: Cell = { columnKey: key, rowKey: rowData[rowKeyField] };\r\n      onEvent(Events.OpenEditor, { cell });\r\n    }}>\r\n      {rowData[field] ? 'Passed' : 'Failed'}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CustomImageCell: React.FC<CellFuncPropsWithChildren> = ({\r\n  field, rowData,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <img className='custom-cell-image' src={rowData[field]} alt=''/>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    {\r\n      cell: CustomImageCell,\r\n      dataType: DataType.String,\r\n      key: 'img',\r\n      style: { width: '10%' },\r\n      title: 'Image',\r\n    },\r\n    { dataType: DataType.String, key: 'name', title: 'Name', style: { width: '30%' } },\r\n    { key: 'score', title: 'Score', dataType: DataType.Number, style: { width: '10%' }, textAlign: TextAlign.Right },\r\n    {\r\n      cell: CustomCell,\r\n      dataType: DataType.Boolean,\r\n      key: 'passed',\r\n      style: { width: '10%' },\r\n      textAlign: TextAlign.Right,\r\n      title: 'Results',\r\n    },\r\n    { key: 'nextTry', title: 'Next Try', dataType: DataType.Date, textAlign: TextAlign.Right  },\r\n  ],\r\n  editingMode: EditingMode.Cell,\r\n  rowKeyField: 'id',\r\n};\r\n\r\nconst CustomCellDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n\r\n  const [data, changeData] = useState(dataArray);\r\n  const onDataChanged: OptionChangedFunc = (newValue) => {\r\n    changeData(newValue);\r\n  };\r\n  return (\r\n    <Table\r\n      {...option}\r\n      data={data}\r\n      onOptionChanged={onOptionChanged}\r\n      onDataChanged={onDataChanged}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CustomCellDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, EditingMode, Events } from '../../lib/enums';\r\nimport { Cell } from '../../lib/models';\r\nimport { EditorFuncPropsWithChildren, OptionChangedFunc } from '../../lib/types';\r\nimport { getField } from '../../lib/Utils/ColumnUtils';\r\nimport { toBoolean } from '../../lib/Utils/TypeUtils';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 55, passed: false, nextTry: new Date(2019, 10, 8, 10) },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false, nextTry: new Date(2019, 11, 8, 10) },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Marshall Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false, nextTry: new Date(2019, 10, 9, 10) },\r\n];\r\n\r\nconst CustomEditor: React.FC<EditorFuncPropsWithChildren> = ({\r\n  column, rowKeyField, rowData, onEvent, onValueChange,\r\n}) => {\r\n  const close = () => {\r\n    const cell: Cell = { columnKey: column.key, rowKey: rowData[rowKeyField] };\r\n    onEvent(Events.CloseEditor, { cell });\r\n  };\r\n  const [value, setValue] = useState(rowData[getField(column)]);\r\n  return (\r\n    <div>\r\n    <input\r\n      className='form-control'\r\n      type='text'\r\n      value={value}\r\n      onChange={(event) => setValue(event.currentTarget.value)}/>\r\n    <button onClick={() => {\r\n      onValueChange({ ...rowData, ...{ [getField(column)]: value } });\r\n      close();\r\n    }}>Save</button>\r\n    <button onClick={close}>Cancel</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CustomLookupEditor: React.FC<EditorFuncPropsWithChildren> = ({\r\n  column: { key: field }, rowData, rowKeyField, onEvent, onValueChange,\r\n}) => {\r\n  const close = () => {\r\n    const cell: Cell = { columnKey: field, rowKey: rowData[rowKeyField] };\r\n    onEvent(Events.CloseEditor, { cell });\r\n  };\r\n  const [value, setValue] = useState(rowData[field]);\r\n  return (\r\n    <div>\r\n      <select\r\n        className='form-control'\r\n        autoFocus={true}\r\n        defaultValue={value}\r\n        onBlur={() => {\r\n          onValueChange({ ...rowData, ...{ [field]: value } });\r\n          close();\r\n        }}\r\n        onChange={(event) => {\r\n          setValue(toBoolean(event.currentTarget.value));\r\n        }}>\r\n        <option value={'true'}>True</option>\r\n        <option value={'false'}>False</option>\r\n      </select>\r\n    </div >\r\n  );\r\n};\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { dataType: DataType.String, key: 'name', title: 'Name', editor: CustomEditor, style: { width: '30%' } },\r\n    { key: 'score', title: 'Score', dataType: DataType.Number, style: { width: '10%' } },\r\n    { dataType: DataType.Boolean, key: 'passed', title: 'Passed', editor: CustomLookupEditor, style: { width: '10%' } },\r\n    { key: 'nextTry', title: 'Next Try', dataType: DataType.Date },\r\n  ],\r\n  editingMode: EditingMode.Cell,\r\n  rowKeyField: 'id',\r\n};\r\n\r\nconst CustomEditorDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n\r\n  const [data, changeData] = useState(dataArray);\r\n  const onDataChanged: OptionChangedFunc = (newValue) => {\r\n    changeData(newValue);\r\n  };\r\n  return (\r\n    <Table\r\n      {...option}\r\n      data={data}\r\n      onOptionChanged={onOptionChanged}\r\n      onDataChanged={onDataChanged}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CustomEditorDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { TextAlign } from '../../lib/enums';\r\nimport { HeaderCellFuncPropsWithChildren, OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray = Array(7).fill(undefined).map(\r\n  (_, index) => ({\r\n    column1: `column:1 row:${index}`,\r\n    column2: `column:2 row:${index}`,\r\n    id: index,\r\n  }),\r\n);\r\n\r\nconst HeadCell: React.FC<HeaderCellFuncPropsWithChildren> = ({\r\n  column: { title },\r\n}) => {\r\n  return (\r\n    <div style={{color: 'red'}}>\r\n      {title} - (Custom)\r\n    </div>\r\n  );\r\n};\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { key: 'column1', title: 'Column 1', headCell: (props) => <HeadCell {...props}/>, textAlign: TextAlign.Left },\r\n    { key: 'column2', title: 'Column 2' },\r\n  ],\r\n  rowKeyField: 'id',\r\n};\r\n\r\nconst CustomHeaderCellDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n\r\n  const [data, changeData] = useState(dataArray);\r\n  const onDataChanged: OptionChangedFunc = (newValue) => {\r\n    changeData(newValue);\r\n  };\r\n  return (\r\n    <Table\r\n      {...option}\r\n      data={data}\r\n      onOptionChanged={onOptionChanged}\r\n      onDataChanged={onDataChanged}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CustomHeaderCellDemo;\r\n","\r\nexport default class Demo {\r\n  constructor(\r\n    public component: React.FC,\r\n    public path: string,\r\n    public title: string,\r\n    public fileName: string) {\r\n  }\r\n}\r\n","import './DemoPage.scss';\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport Highlight from 'react-highlight';\r\n\r\nimport Demo from './Demo';\r\n\r\nconst getDemoPage = (demo: Demo) => {\r\n  return () => {\r\n    const [text, changeText]: [string, any] = useState('');\r\n    useEffect(() => {\r\n      const name = demo.fileName;\r\n      fetch(`demos/${name}/${name}.tsx`)\r\n        .then((res) => res.text())\r\n        .then((fileText) => changeText(fileText));\r\n    }, []);\r\n    return (\r\n      <div>\r\n        <div className='simulator-content'>\r\n          <h1>{demo.title}</h1>\r\n          <demo.component />\r\n        </div>\r\n        <div className='code'>\r\n          <Highlight className='language-typescript'>\r\n            {text}\r\n          </Highlight>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\nexport default getDemoPage;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, EditingMode } from '../../lib/enums';\r\nimport { OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 55, passed: false, nextTry: new Date(2019, 10, 8, 10) },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false, nextTry: new Date(2019, 11, 8, 10) },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Marshall Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false, nextTry: new Date(2019, 10, 9, 10) },\r\n];\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { key: 'name', title: 'Name', dataType: DataType.String, style: { width: '30%' } },\r\n    { key: 'score', title: 'Score', dataType: DataType.Number, style: { width: '10%' } },\r\n    { key: 'passed', title: 'Passed', dataType: DataType.Boolean, style: { width: '10%' }},\r\n    { key: 'nextTry', title: 'Next Try', dataType: DataType.Date },\r\n  ],\r\n  editableCells: [{\r\n    columnKey: 'name',\r\n    rowKey: 2,\r\n  }],\r\n  editingMode: EditingMode.Cell,\r\n  rowKeyField: 'id',\r\n};\r\n\r\nconst EditingDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n\r\n  const [data, changeData] = useState(dataArray);\r\n  const onDataChanged: OptionChangedFunc = (newValue) => {\r\n    changeData(newValue);\r\n  };\r\n  return (\r\n    <Table\r\n      {...option}\r\n      data={data}\r\n      onOptionChanged={onOptionChanged}\r\n      onDataChanged={onDataChanged}\r\n    />\r\n  );\r\n};\r\n\r\nexport default EditingDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, EditingMode, SortingMode } from '../../lib/enums';\r\nimport { EventFunc, OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray = Array(20).fill(undefined).map(\r\n  (_, index) => ({\r\n    column1: `column:1 row:${index}`,\r\n    column2: `column:2 row:${index}`,\r\n    column3: `column:3 row:${index}`,\r\n    column4: `column:4 row:${index}`,\r\n    id: index,\r\n  }),\r\n);\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { key: 'column1', title: 'Column 1', dataType: DataType.String },\r\n    { key: 'column2', title: 'Column 2', dataType: DataType.String },\r\n    { key: 'column3', title: 'Column 3', dataType: DataType.String },\r\n    { key: 'column4', title: 'Column 4', dataType: DataType.String },\r\n  ],\r\n  editingMode: EditingMode.Cell,\r\n  rowKeyField: 'id',\r\n  sortingMode: SortingMode.Single,\r\n};\r\n\r\nconst EventsDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n\r\n  const [data, changeData] = useState(dataArray);\r\n  const onDataChanged: OptionChangedFunc = (newValue) => {\r\n    changeData(newValue);\r\n  };\r\n\r\n  const [events, changeEvents] = useState([] as string []);\r\n  const onEvent: EventFunc = (event, eventData) => {\r\n    changeEvents([`event: ${event}, data:${JSON.stringify(eventData)}`, ...events]);\r\n  };\r\n  return (\r\n    <>\r\n      <Table\r\n        {...option}\r\n        data={data}\r\n        onOptionChanged={onOptionChanged}\r\n        onDataChanged={onDataChanged}\r\n        onEvent={onEvent}\r\n      />\r\n      {events.map((e, i) => (<div key={i}>{e}</div>))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EventsDemo;\r\n","export const isEmpty = (value: any) => (value == null || value.length === 0);\r\n\r\nconst contains = (data: any[], item: any) => data[item.field].includes(item.value);\r\nconst equals = (data: any[], item: any) => ((typeof item.value === 'string')\r\n  ? data[item.field].toLowerCase().includes(item.value.toLowerCase())\r\n  : data[item.field] === item.value);\r\nconst notEqual = (data: any[], item: any) => !equals(data, item);\r\nconst more = (data: any[], item: any) => data[item.field] > item.value;\r\nconst moreOrEqual = (data: any[], item: any) => data[item.field] >= item.value;\r\nconst less = (data: any[], item: any) => data[item.field] < item.value;\r\nconst lessOrEqual = (data: any[], item: any) => data[item.field] < item.value;\r\nconst blank = (data: any[], item: any) => isEmpty(data[item.field]);\r\nconst notBlank = (data: any[], item: any) => !isEmpty(data[item.field]);\r\nexport const filterItem = (data: any[], filter: any) => {\r\n  switch (filter.operator) {\r\n    case 'contains': return contains(data, filter);\r\n    case '=': return equals(data, filter);\r\n    case '<>': return notEqual(data, filter);\r\n    case '>': return more(data, filter);\r\n    case '>=': return moreOrEqual(data, filter);\r\n    case '<': return less(data, filter);\r\n    case '<=': return lessOrEqual(data, filter);\r\n    case 'blank': return blank(data, filter);\r\n    case 'notBlank': return notBlank(data, filter);\r\n    default: throw Error('unknown operator');\r\n  }\r\n};\r\n\r\nexport const filterGroup = (data: any[], groupName: string, items: any[]): any[] =>\r\n  (groupName.toLowerCase() === 'or' ? filterGroupOr(data, items) : filterGroupAnd(data, items));\r\n\r\nexport const filterGroupOr = (data: any[], items: any[]): any[]  => {\r\n  const filteredData = items.reduce((initialData: any, item: any) => {\r\n    if (item.items) {\r\n      const grouped = filterGroup(data, item.groupName, item.items);\r\n      return initialData.concat(grouped.filter((d: any) => initialData.indexOf(d) < 0));\r\n    }\r\n    return initialData.concat(data.filter((d: any) => initialData.indexOf(d) < 0 && filterItem(d, item)));\r\n  }, []);\r\n  return data.filter((d) => filteredData.includes(d));\r\n};\r\n\r\nexport const filterGroupAnd = (data: any[], items: any[]): any[]  => {\r\n  return items.reduce((initialData: any[], item: any) => {\r\n    if (item.items) { return filterGroup(initialData, item.groupName, item.items); }\r\n    return initialData.filter((d: any[]) => filterItem(d, item));\r\n  }, data);\r\n};\r\n\r\nexport const filterData = (data: any[] , filterValue: any): any[]  => {\r\n  return filterGroup(data, filterValue.groupName, filterValue.items);\r\n};\r\n","import React, { useState } from 'react';\r\nimport FilterControl from 'react-filter-control';\r\nimport { IFilterControlFilterValue } from 'react-filter-control/interfaces';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, SortDirection, SortingMode } from '../../lib/enums';\r\nimport { OptionChangedFunc } from '../../lib/types';\r\nimport { filterData } from './filterData';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 55, passed: false },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Tom Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false },\r\n];\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { key: 'name', title: 'Name', dataType: DataType.String, sortDirection: SortDirection.Descend },\r\n    { key: 'score', title: 'Score', dataType: DataType.Number },\r\n    { key: 'passed', title: 'Passed', dataType: DataType.Boolean },\r\n  ],\r\n  rowKeyField: 'id',\r\n  sortingMode: SortingMode.Single,\r\n};\r\n\r\nexport const fields = [{\r\n  caption: 'Name',\r\n  name: 'name',\r\n  operators: [{\r\n    caption: 'Contains',\r\n    name: 'contains',\r\n  }, {\r\n    caption: 'Does not equal',\r\n    name: '<>',\r\n  }],\r\n}, {\r\n  caption: 'Score',\r\n  name: 'score',\r\n  operators: [{\r\n    caption: 'Equals',\r\n    name: '=',\r\n  }],\r\n}];\r\n\r\nexport const groups = [{\r\n  caption: 'And',\r\n  name: 'and',\r\n}, {\r\n  caption: 'Or',\r\n  name: 'or',\r\n}];\r\nexport const filter: IFilterControlFilterValue = {\r\n  groupName: 'and',\r\n  items: [\r\n    {\r\n      field: 'name',\r\n      key: '1',\r\n      operator: 'contains',\r\n      value: 'Tom',\r\n    },\r\n  ],\r\n};\r\n\r\nconst FilterExtendedDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n  const [filterValue, changeFilter] = useState(filter);\r\n  const onFilterChangedChanged = (newFilterValue: IFilterControlFilterValue) => {\r\n    changeFilter(newFilterValue);\r\n  };\r\n  const filteredData = filterData(dataArray, filterValue);\r\n  return (\r\n    <>\r\n      <FilterControl {...{fields, groups, filterValue,  onFilterValueChanged: onFilterChangedChanged}}/>\r\n      <Table\r\n        {...option}\r\n        data={filteredData}\r\n        onOptionChanged={onOptionChanged}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FilterExtendedDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, SortDirection } from '../../lib/enums';\r\nimport { OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 55, passed: false },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Marshall Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false },\r\n];\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { key: 'name', title: 'Name', dataType: DataType.String, sortDirection: SortDirection.Descend },\r\n    { key: 'score', title: 'Score', dataType: DataType.Number },\r\n    { key: 'passed', title: 'Passed', dataType: DataType.Boolean },\r\n  ],\r\n  filterRow: [{\r\n    field: 'name',\r\n    operator: '=',\r\n    value: 'Billi Bob',\r\n  }],\r\n  rowKeyField: 'id',\r\n};\r\n\r\nconst FilterRowDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n  return (\r\n    <Table\r\n      {...option}\r\n      data={dataArray}\r\n      onOptionChanged={onOptionChanged}\r\n    />\r\n  );\r\n};\r\n\r\nexport default FilterRowDemo;\r\n","import ReactGA, { FieldsObject } from 'react-ga';\r\n\r\nconst host = window.location.hostname;\r\nlet initializeGA = () => {};\r\nlet trackPage = (page: string, options: FieldsObject) => {};\r\nlet trackEvent = (category: string, action: string) => {};\r\nif (host !== 'localhost') {\r\n  initializeGA = () => ReactGA.initialize('UA-50311880-5');\r\n\r\n  trackPage = (page: string, options: FieldsObject) => {\r\n    ReactGA.set({ page, ...options });\r\n    ReactGA.pageview(page);\r\n  };\r\n  trackEvent = (category: string, action: string) => {\r\n    ReactGA.event({\r\n      action,\r\n      category,\r\n    });\r\n  };\r\n}\r\n\r\nexport { initializeGA, trackPage, trackEvent };\r\n","import React, { useEffect } from 'react';\r\nimport { FieldsObject } from 'react-ga';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\n\r\nimport { trackPage } from './ga';\r\n\r\nexport const withTracker = <P extends RouteComponentProps>(\r\n  WrappedComponent: React.ComponentType<P>,\r\n  options: FieldsObject = {},\r\n) => {\r\n\r\n  return (props: P) => {\r\n    useEffect(() => {\r\n      trackPage(props.location.pathname, options);\r\n    }, [props.location.pathname]);\r\n\r\n    return <WrappedComponent {...props} />;\r\n  };\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, EditingMode } from '../../lib/enums';\r\nimport { OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray = [\r\n  { id: 1, type: 'Cat', name: 'Kas', country: 'Czech Republic', age: 2 },\r\n  { id: 2, type: 'Dog', name: 'Rex', country: 'Montenegro', age: 6 },\r\n  { id: 3, type: 'Cat', name: 'Simba', country: 'France', age: 12 },\r\n  { id: 4, type: 'Dog', name: 'Beethoven', country: 'Czech Republic', age: 3 },\r\n  { id: 5, type: 'Cat', name: 'Hash', country: 'Czech Republic', age: 8 },\r\n];\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { key: 'type', title: 'TYPE', dataType: DataType.String },\r\n    { key: 'name', title: 'NAME', dataType: DataType.String, style: { width: '50%' } },\r\n    { key: 'country', title: 'COUNTRY', dataType: DataType.String },\r\n    { key: 'age', title: 'AGE', dataType: DataType.Number, style: { width: '50%' } },\r\n  ],\r\n  editingMode: EditingMode.Cell,\r\n  groups: [{ columnKey: 'country' }, { columnKey: 'type' }],\r\n  rowKeyField: 'id',\r\n};\r\n\r\nconst GroupingDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n  const [data, changeData] = useState(dataArray);\r\n  const onDataChanged: OptionChangedFunc = (newValue) => {\r\n    changeData(newValue);\r\n  };\r\n  return (\r\n    <Table\r\n      {...option}\r\n      data={data}\r\n      onOptionChanged={onOptionChanged}\r\n      onDataChanged={onDataChanged}\r\n    />\r\n  );\r\n};\r\n\r\nexport default GroupingDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, EditingMode, SortingMode } from '../../lib/enums';\r\nimport { OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray = Array(25000).fill(undefined).map(\r\n  (_, index) => ({\r\n    column1: `column:1 row:${index}`,\r\n    column2: `column:2 row:${index}`,\r\n    column3: `column:3 row:${index}`,\r\n    column4: `column:4 row:${index}`,\r\n    id: index,\r\n  }),\r\n);\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { key: 'column1', title: 'Column 1', dataType: DataType.String },\r\n    { key: 'column2', title: 'Column 2', dataType: DataType.String },\r\n    { key: 'column3', title: 'Column 3', dataType: DataType.String },\r\n    { key: 'column4', title: 'Column 4', dataType: DataType.String },\r\n  ],\r\n  editingMode: EditingMode.Cell,\r\n  rowKeyField: 'id',\r\n  sortingMode: SortingMode.Single,\r\n  virtualScrolling: {\r\n  },\r\n};\r\n\r\nconst ManyRowsDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n\r\n  const [data, changeData] = useState(dataArray);\r\n  const onDataChanged: OptionChangedFunc = (newValue) => {\r\n    changeData(newValue);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Table\r\n        {...option}\r\n        data={data}\r\n        onOptionChanged={onOptionChanged}\r\n        onDataChanged={onDataChanged}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ManyRowsDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, SortingMode } from '../../lib/enums';\r\nimport { OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray = Array(10000).fill(undefined).map(\r\n  (_, index) => ({\r\n    column1: `column:1 row:${index % 100}00`,\r\n    column2: `column:2 row:${index % 50}0`,\r\n    column3: `column:3 row:${index}`,\r\n    column4: `column:4 row:${index}`,\r\n    id: index,\r\n  }),\r\n);\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { key: 'column1', title: 'Column 1', dataType: DataType.String },\r\n    { key: 'column2', title: 'Column 2', dataType: DataType.String },\r\n    { key: 'column3', title: 'Column 3', dataType: DataType.String },\r\n    { key: 'column4', title: 'Column 4', dataType: DataType.String },\r\n  ],\r\n  groups: [{ columnKey: 'column1'}, { columnKey: 'column2' }],\r\n  rowKeyField: 'id',\r\n  sortingMode: SortingMode.Single,\r\n  virtualScrolling: {\r\n  },\r\n};\r\n\r\nconst ManyRowsGroupingDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Table\r\n        {...option}\r\n        data={dataArray}\r\n        onOptionChanged={onOptionChanged}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ManyRowsGroupingDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType } from '../../lib/enums';\r\nimport { OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 55, passed: false },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Marshall Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false },\r\n];\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { key: 'name', title: 'Name', dataType: DataType.String, style: { width: '40%' } },\r\n    { key: 'score', title: 'Score', dataType: DataType.Number, style: { width: '10%' } },\r\n    {\r\n      dataType: DataType.Boolean,\r\n      key: 'passed',\r\n      search: (searchText, rowData) => {\r\n        return (searchText === 'false' && !rowData.passed) || (searchText === 'true' && rowData.passed);\r\n      },\r\n      title: 'Passed',\r\n    },\r\n  ],\r\n  rowKeyField: 'id',\r\n  search: 'Billi Bob',\r\n};\r\n\r\nconst SearchDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n  return (\r\n    <>\r\n      <input defaultValue={option.search} onChange={(event) => {\r\n        onOptionChanged({ search: event.currentTarget.value });\r\n      }}/>\r\n      <Table\r\n        {...option}\r\n        data={dataArray}\r\n        onOptionChanged={onOptionChanged}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, Events, SortDirection, SortingMode } from '../../lib/enums';\r\nimport { EditorFuncPropsWithChildren, OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 55, passed: false },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Marshall Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false },\r\n];\r\n\r\nconst SelectionCell: React.FC<EditorFuncPropsWithChildren> = ({\r\n  rowData, rowKeyField, onEvent, isSelectedRow,\r\n}) => {\r\n  return (\r\n    <input\r\n      type='checkbox'\r\n      checked={isSelectedRow}\r\n      onChange={(event) => {\r\n        const rowKeyValue = rowData[rowKeyField];\r\n        if (event.currentTarget.checked) {\r\n          onEvent(Events.RowSelected, { rowKeyValue });\r\n        } else {\r\n          onEvent(Events.RowDeselected, { rowKeyValue });\r\n        }\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { key: 'commandColumn:selection', editor: SelectionCell, isEditable: true },\r\n    {\r\n      dataType: DataType.String,\r\n      key: 'name',\r\n      sortDirection: SortDirection.Descend,\r\n      style: { width: '33%' },\r\n      title: 'Name',\r\n    },\r\n    { key: 'score', title: 'Score', style: { width: '10%' }, dataType: DataType.Number },\r\n    { key: 'passed', title: 'Passed', dataType: DataType.Boolean },\r\n  ],\r\n  rowKeyField: 'id',\r\n  selectedRows: [3, 5],\r\n  sortingMode: SortingMode.Single,\r\n};\r\n\r\nconst SelectionDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n  return (\r\n    <Table\r\n      {...option}\r\n      data={dataArray}\r\n      onOptionChanged={onOptionChanged}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SelectionDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, SortDirection, SortingMode } from '../../lib/enums';\r\nimport { OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 55, passed: false },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Marshall Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false },\r\n];\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    {\r\n      dataType: DataType.String,\r\n      key: 'name',\r\n      sortDirection: SortDirection.Descend,\r\n      style: { width: '33%' },\r\n      title: 'Name',\r\n    },\r\n    { key: 'score', title: 'Score', style: { width: '10%' }, dataType: DataType.Number },\r\n    { key: 'passed', title: 'Passed', dataType: DataType.Boolean },\r\n  ],\r\n  rowKeyField: 'id',\r\n  sortingMode: SortingMode.Single,\r\n};\r\n\r\nconst SortingDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n  return (\r\n    <Table\r\n      {...option}\r\n      data={dataArray}\r\n      onOptionChanged={onOptionChanged}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SortingDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, EditingMode } from '../../lib/enums';\r\nimport { OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 155, passed: false },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Marshall Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false },\r\n];\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { key: 'name', title: 'Name', dataType: DataType.String, style: { width: '40%' } },\r\n    {\r\n      dataType: DataType.Number,\r\n      key: 'score',\r\n      style: { width: '10%' },\r\n      title: 'Score',\r\n      validation: (value: any, rowData: any) => {\r\n        if (value > 100) {\r\n          return `Value can't be more than 100`;\r\n        }\r\n      },\r\n    },\r\n    {\r\n      dataType: DataType.Boolean,\r\n      key: 'passed',\r\n      title: 'Passed',\r\n    },\r\n  ],\r\n  editableCells: [{\r\n    columnKey: 'score',\r\n    rowKey: 2,\r\n  }],\r\n  editingMode: EditingMode.Cell,\r\n  rowKeyField: 'id',\r\n};\r\n\r\nconst ValidationDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({ ...option, ...value });\r\n  };\r\n\r\n  const [data, changeData] = useState(dataArray);\r\n  const onDataChanged: OptionChangedFunc = (newValue) => {\r\n    changeData(newValue);\r\n  };\r\n  return (\r\n    <>\r\n      <Table\r\n        {...option}\r\n        data={data}\r\n        onOptionChanged={onOptionChanged}\r\n        onDataChanged={onDataChanged}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ValidationDemo;\r\n","import './Demos.scss';\r\n\r\nimport React from 'react';\r\nimport { HashRouter, NavLink, Route } from 'react-router-dom';\r\n\r\nimport CommandColumnDemo from './CommandColumnDemo/CommandColumnDemo';\r\nimport CustomCellDemo from './CustomCellDemo/CustomCellDemo';\r\nimport CustomEditorDemo from './CustomEditorDemo/CustomEditorDemo';\r\nimport CustomHeaderCellDemo from './CustomHeaderCellDemo/CustomHeaderCellDemo';\r\nimport Demo from './Demo';\r\nimport getDemoPage from './DemoPage';\r\nimport EditingDemo from './EditingDemo/EditingDemo';\r\nimport EventsDemo from './EventsDemo/EventsDemo';\r\nimport FilterExtendedDemo from './FilterExtendedDemo/FilterExtendedDemo';\r\nimport FilterRowDemo from './FilterRowDemo/FilterRowDemo';\r\nimport { initializeGA, trackEvent } from './ga';\r\nimport { withTracker } from './GAWrapper';\r\nimport GroupingDemo from './GroupingDemo/GroupingDemo';\r\nimport ManyRowsDemo from './ManyRowsDemo/ManyRowsDemo';\r\nimport ManyRowsGroupingDemo from './ManyRowsGroupingDemo/ManyRowsGroupingDemo';\r\nimport SearchDemo from './SearchDemo/SearchDemo';\r\nimport SelectionDemo from './SelectionDemo/SelectionDemo';\r\nimport SortingDemo from './SortingDemo/SortingDemo';\r\nimport ValidationDemo from './ValidationDemo/ValidationDemo';\r\n\r\ninitializeGA();\r\n\r\nconst demos: Demo[] = [\r\n  new Demo(CommandColumnDemo, '/command-column', 'Command Column', 'CommandColumnDemo'),\r\n  new Demo(CustomCellDemo, '/custom-cell', 'Custom Cell', 'CustomCellDemo'),\r\n  new Demo(CustomEditorDemo, '/custom-editor', 'Custom Editor', 'CustomEditorDemo'),\r\n  new Demo(CustomHeaderCellDemo, '/custom-header-cell', 'Custom Header Cell', 'CustomHeaderCellDemo'),\r\n  new Demo(EditingDemo, '/editing', 'Editing', 'EditingDemo'),\r\n  new Demo(EventsDemo, '/events', 'Events', 'EventsDemo'),\r\n  new Demo(FilterExtendedDemo, '/filter-extended', 'Filter Extended', 'FilterExtendedDemo'),\r\n  new Demo(FilterRowDemo, '/filter-row', 'Filter Row', 'FilterRowDemo'),\r\n  new Demo(GroupingDemo, '/grouping', 'Grouping', 'GroupingDemo'),\r\n  new Demo(ManyRowsDemo, '/many-rows', '25000 Rows', 'ManyRowsDemo'),\r\n  new Demo(ManyRowsGroupingDemo, '/many-rows-grouping', '10000 Rows with grouping', 'ManyRowsGroupingDemo'),\r\n  new Demo(SearchDemo, '/search', 'Search', 'SearchDemo'),\r\n  new Demo(SelectionDemo, '/selection', 'Selection', 'SelectionDemo'),\r\n  new Demo(SortingDemo, '/sorting', 'Sorting', 'SortingDemo'),\r\n  new Demo(ValidationDemo, '/validation', 'Validation', 'ValidationDemo'),\r\n];\r\n\r\nconst cases = demos.map((d: Demo) => {\r\n  return ({\r\n    demoComponent: getDemoPage(d),\r\n    name: d.fileName,\r\n    path: d.path,\r\n    title: d.title,\r\n  });\r\n});\r\n\r\nconst Demos: React.FC = () => {\r\n  return (\r\n    <HashRouter>\r\n      <div className='demos'>\r\n        <nav>\r\n          <div className='logo-container'>\r\n            <b>react-table-control</b>\r\n            <a href='https://github.com/komarovalexander/react-table-control'\r\n              onClick={() => { trackEvent('click', 'github_logo'); }}>\r\n              <img src='static/icons/github_logo.svg' alt=''/>\r\n            </a>\r\n            <a href='https://www.npmjs.com/package/react-table-component'\r\n              onClick={() => { trackEvent('click', 'npm_logo'); }}>\r\n              <img src='static/icons/npm_logo.svg' alt=''/>\r\n            </a>\r\n          </div>\r\n          <ul className='menu'>\r\n          {\r\n            cases.map((c) => (\r\n              <li key={c.name}>\r\n                  <NavLink to={c.path} activeClassName='active'>\r\n                    <span className='menu-button'>\r\n                      <span className='menu-icon'><img src={`static/icons/${c.name}.svg`} alt=''/></span>\r\n                      <span className='menu-button-inner'>{c.title}</span>\r\n                    </span>\r\n                  </NavLink>\r\n              </li>\r\n            ))\r\n          }\r\n          </ul>\r\n        </nav>\r\n        <main>\r\n          {\r\n            cases.map((c) => (\r\n              <Route key={c.name} path={c.path} component={withTracker(c.demoComponent)} />\r\n            ))\r\n          }\r\n        </main>\r\n      </div>\r\n    </HashRouter>\r\n  );\r\n};\r\n\r\nexport default Demos;\r\n","import './App.css';\r\nimport './lib/styles.scss';\r\n\r\nimport React from 'react';\r\n\r\nimport Demos from './Demos/Demos';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Demos />\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}