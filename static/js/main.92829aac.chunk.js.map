{"version":3,"sources":["lib/enums.ts","lib/Models/CssClasses.ts","lib/defaultOptions.ts","lib/Utils/ArrayUtils.ts","lib/Utils/CellUtils.ts","lib/Utils/CommonUtils.ts","lib/Utils/TypeUtils.ts","lib/Utils/HeadRowUtils.ts","lib/Components/EmptyCells/EmptyCells.tsx","lib/Components/HeadCellContent/HeadCellContent.tsx","lib/Components/HeadCell/HeadCell.tsx","lib/Components/HeadRow/HeadRow.tsx","lib/groupMark.ts","lib/Utils/GroupUtils.ts","lib/emptyFunc.ts","lib/Components/CellEditorBoolean/CellEditorBoolean.tsx","lib/Components/CellEditorDate/CellEditorDate.tsx","lib/Components/CellEditorNumber/CellEditorNumber.tsx","lib/Components/CellEditorString/CellEditorString.tsx","lib/Components/CellEditorDataType/CellEditorDataType.tsx","lib/Components/FilterCell/FilterCell.tsx","lib/Components/FilterRow/FilterRow.tsx","lib/Utils/FilterUtils.ts","lib/Components/GroupRow/GroupRow.tsx","lib/Components/CellText/CellText.tsx","lib/Components/CellContent/CellContent.tsx","lib/Utils/EffectUtils.ts","lib/Components/CellEditorValidationMessage/CellEditorValidationMessage.tsx","lib/Components/CellEditorState/CellEditorState.tsx","lib/Utils/Validation.ts","lib/Components/CellEditor/CellEditor.tsx","lib/Components/CellComponent/CellComponent.tsx","lib/Components/Row/Row.tsx","lib/Components/TableBody/TableBody.tsx","lib/Components/Table/Table.tsx","lib/Utils/SortUtils.ts","lib/Utils/EventUtils.ts","Demos/CommandColumnDemo/CommandColumnDemo.tsx","Demos/CustomCellDemo/CustomCellDemo.tsx","Demos/CustomEditorDemo/CustomEditorDemo.tsx","Demos/CustomHeaderCellDemo/CustomHeaderCellDemo.tsx","Demos/Demo.ts","Demos/DemoPage.tsx","Demos/EditingDemo/EditingDemo.tsx","Demos/EventsDemo/EventsDemo.tsx","Demos/FilterExtendedDemo/filterData.ts","Demos/FilterExtendedDemo/FilterExtendedDemo.tsx","Demos/FilterRowDemo/FilterRowDemo.tsx","Demos/GroupingDemo/GroupingDemo.tsx","Demos/SearchDemo/SearchDemo.tsx","Demos/SelectionDemo/SelectionDemo.tsx","Demos/SortingDemo/SortingDemo.tsx","Demos/ValidationDemo/ValidationDemo.tsx","Demos/Demos.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DataType","EditingMode","Events","KeyboardEnum","SortDirection","SortingMode","TextAlign","CssClasses","table","thead","theadRow","theadCell","row","rowSelected","cell","iconGroupArrowCollapsed","iconGroupArrowExpanded","iconClose","iconSortArrowDown","iconSortArrowUp","checkbox","dateInput","numberInput","textInput","defaultOptions","columnDataType","String","columnSortDirection","Ascend","css","getCopyOfArrayAndInsertOrReplaceItem","item","rowKey","array","newArray","rowKeyValue","index","findIndex","i","splice","push","isEditableCell","editingMode","column","rowEditableCells","undefined","isEditable","Cell","find","c","field","isEmpty","value","length","convertToColumnTypes","data","columns","map","d","nd","forEach","dataType","toString","Number","Date","Boolean","toBoolean","Object","toLowerCase","trim","getNextSortDirection","previousSortdirection","Descend","EmptyCells","count","shouldUseTh","Array","key","className","HeadCellContent","props","headCell","sortClick","title","sortDirection","onClick","HeadCell","width","textAlign","scope","style","HeadRow","onOptionChanged","sortingMode","groupColumnsCount","Single","newColumns","newColumn","newColumnIndex","sortUtilsClickHandler","groupMark","convertToFlat","grouped","result","groupValue","groupKey","isArray","concat","getGroupedStructure","groups","expandedDeep","groupsExpanded","group","shift","groupBy","groupExpandedItems","filter","ge","some","newStructure","set","keyGetter","isEmptyValue","Map","collection","get","emptyFunc","CellEditorBoolean","onEvent","onValueChange","rowData","autoFocus","type","ref","elem","indeterminate","checked","onChange","event","currentTarget","onBlur","CloseEditor","CellEditorDate","fieldValue","toISOString","split","targetValue","CellEditorNumber","newValue","CellEditorString","CellEditorDataType","FilterCell","FilterRow","filterRow","reduce","f","isSelectedRow","optionChangeHandler","newFRValue","operator","getCopyOfArrayAndDeleteItem","filterCellValueChangeHandler","GroupRow","emptyColumnsCount","groupRowData","colSpan","newGroupsExpanded","JSON","stringify","groupClick","CellText","OpenEditor","CellContent","getEventListenerEffect","eventName","handler","window","addEventListener","removeEventListener","CellEditorValidationMessage","message","CellEditorState","useState","changeValue","validationValue","validation","getValidationValue","close","useCallback","closeHandler","useEffect","escKeyHandler","enterKeyHandler","keyCode","Esc","Enter","stateProps","eventData","rowValue","CellEditor","editor","CellComponent","onRowDataChanged","Row","editableCells","selectedRows","getRowEditableCells","s","TableBody","None","groupedData","getGroupedData","getExpandedGroups","RowDataChanged","Table","search","realColumns","searchText","initialData","indexOf","includes","searchData","sortedColumn","columnKey","sortFunc","a","b","sort","sortData","searcFunc","filterData","g","tableOnEvent","onDataChanged","getCopyOfArrayAndAddItem","changeCellTextToCellEditorHandler","changeCellEditorToCellTextHandler","newData","RowSelected","RowDeselected","getOnEventHandler","dataArray","fill","_","column1","column2","column3","column4","AlertCell","alert","DeleteRow","tableOption","CommandColumnDemo","option","changeOptions","changeData","id","name","score","passed","nextTry","Right","CustomCellDemo","setValue","defaultValue","CustomEditorDemo","color","Left","CustomHeaderCellDemo","Demo","component","path","fileName","getDemoPage","demo","text","changeText","fetch","then","res","fileText","EditingDemo","events","EventsDemo","e","equals","filterItem","contains","notEqual","more","moreOrEqual","lessOrEqual","blank","notBlank","Error","filterGroup","groupName","items","filterGroupOr","filterGroupAnd","filteredData","fields","caption","operators","FilterExtendedDemo","filterValue","changeFilter","onFilterValueChanged","newFilterValue","FilterRowDemo","country","age","GroupingDemo","SearchDemo","SelectionDemo","SortingDemo","ValidationDemo","demos","cases","demoComponent","defaultDemo","Demos","to","activeClassName","exact","App","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.92829aac.chunk.js","sourcesContent":["export enum DataType {\r\n  Boolean = 'boolean',\r\n  Date = 'date',\r\n  Number = 'number',\r\n  Object = 'object',\r\n  String = 'string',\r\n}\r\n\r\nexport enum EditingMode {\r\n  None = 'none',\r\n  Cell = 'cell',\r\n}\r\n\r\nexport enum Events {\r\n  RowDeselected = 'RowDeselected',\r\n  RowSelected = 'RowSelected',\r\n  CloseEditor = 'CloseEditor',\r\n  OpenEditor = 'OpenEditor',\r\n  RowDataChanged = 'RowDataChanged',\r\n}\r\n\r\nexport enum KeyboardEnum {\r\n  Esc = 27,\r\n  Enter = 13,\r\n}\r\n\r\nexport enum SortDirection {\r\n  Ascend = 'ascend',\r\n  Descend = 'descend',\r\n}\r\n\r\nexport enum SortingMode {\r\n  None = 'none',\r\n  Single = 'single',\r\n}\r\n\r\nexport enum TextAlign {\r\n  Center = 'center',\r\n  Left = 'left',\r\n  Right = 'right',\r\n}\r\n","export class CssClasses {\r\n  public table?: string = 'tc-table';\r\n  public thead?: string = 'tc-thead';\r\n  public theadRow?: string = 'tc-thead-row';\r\n  public theadCell?: string = 'tc-thead-cell';\r\n  public row?: string = 'tc-row';\r\n  public rowSelected?: string = 'tc-row-selected';\r\n  public cell?: string = 'tc-cell';\r\n\r\n  public iconGroupArrowCollapsed?: string = 'tc-icon tc-icon-group-arrow tc-icon-group-arrow-collapsed';\r\n  public iconGroupArrowExpanded?: string = 'tc-icon tc-icon-group-arrow tc-icon-group-arrow-expanded';\r\n  public iconClose?: string = 'tc-icon tc-icon-close';\r\n  public iconSortArrowDown?: string = 'tc-icon tc-icon-sort tc-icon-sort-arrow-down';\r\n  public iconSortArrowUp?: string = 'tc-icon tc-icon-sort tc-icon-sort-arrow-up';\r\n\r\n  public checkbox ?: string;\r\n  public dateInput ?: string;\r\n  public numberInput ?: string;\r\n  public textInput ?: string;\r\n}\r\n","\r\nimport { DataType, SortDirection } from './enums';\r\nimport { CssClasses } from './Models/CssClasses';\r\n\r\nclass DefaultOptions {\r\n  public columnDataType = DataType.String;\r\n  public columnSortDirection: SortDirection = SortDirection.Ascend;\r\n  public css: CssClasses = new CssClasses();\r\n}\r\n\r\nconst defaultOptions = new DefaultOptions();\r\n\r\nexport default defaultOptions;\r\n","export const getCopyOfArrayAndAddItem = (item: any, array: any[] = []): any[] => {\r\n  return array.concat([item]);\r\n};\r\n\r\nexport const getCopyOfArrayAndDeleteItem = (item: any, rowKey: any, array: any[]): any[] => {\r\n  const rowKeyValue = item[rowKey];\r\n  return array.filter((i) => i[rowKey] !== rowKeyValue);\r\n};\r\n\r\nexport const getCopyOfArrayAndInsertOrReplaceItem = (item: any, rowKey: any, array: any[]): any[] => {\r\n  const newArray = [...array];\r\n  const rowKeyValue = item[rowKey];\r\n  const index = newArray.findIndex((i) => i[rowKey] === rowKeyValue);\r\n  index >= 0 ? newArray.splice(index, 1, item) : newArray.push(item);\r\n  return newArray;\r\n};\r\n","import { EditingMode } from '../enums';\r\nimport { Column } from '../models';\r\nimport { Cell } from '../Models/Cell';\r\nimport { OptionChangedFunc } from '../types';\r\nimport { getCopyOfArrayAndAddItem } from './ArrayUtils';\r\n\r\nexport const isEditableCell = (editingMode: EditingMode, column: Column, rowEditableCells: Cell[]): boolean => {\r\n  if (column.isEditable !== undefined) {\r\n    return column.isEditable;\r\n  }\r\n  if (editingMode === EditingMode.Cell) {\r\n    return !!rowEditableCells.find((c) => c.field === column.field);\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const changeCellTextToCellEditorHandler = (\r\n  item: Cell, editableCells: Cell[], onOptionChanged: OptionChangedFunc) => {\r\n    const newEditableCells = getCopyOfArrayAndAddItem(item, editableCells);\r\n    onOptionChanged({ editableCells: newEditableCells });\r\n};\r\n\r\nexport const changeCellEditorToCellTextHandler = (\r\n  item: Cell, editableCells: Cell[], onOptionChanged: OptionChangedFunc) => {\r\n    const newEditableCells = editableCells.filter((c) => c.field !== item.field || c.rowKeyValue !== item.rowKeyValue);\r\n    onOptionChanged({ editableCells: newEditableCells });\r\n};\r\n","export const isEmpty = (value: any): boolean => (value == null || value.length === 0);\r\n","import { DataType } from '../enums';\r\nimport { Column } from '../Models/Column';\r\n\r\nexport const convertToColumnTypes = (data: any[], columns: Column[]) => {\r\n  const newData: any[] = data.map((d) => {\r\n    const nd = {...d};\r\n    columns.forEach((c) => {\r\n      if (nd[c.field] != null) {\r\n        switch (c.dataType) {\r\n          case DataType.String: nd[c.field] = nd[c.field].toString(); break;\r\n          case DataType.Number: nd[c.field] = Number(nd[c.field]); break;\r\n          case DataType.Date: nd[c.field] = new Date(nd[c.field]); break;\r\n          case DataType.Boolean: nd[c.field] = toBoolean(nd[c.field]); break;\r\n          case DataType.Object: nd[c.field] = nd[c.field]; break;\r\n        }\r\n      }\r\n    });\r\n    return nd;\r\n  });\r\n  return newData;\r\n};\r\n\r\nexport const toBoolean = (value: any) => {\r\n  if (typeof value === 'string') {\r\n    switch (value.toLowerCase().trim()) {\r\n      case 'true': case 'yes': case '1': return true;\r\n      case 'false': case 'no': case '0': case null: return false;\r\n    }\r\n  }\r\n  return Boolean(value);\r\n};\r\n","import defaultOptions from '../defaultOptions';\r\nimport { SortDirection } from '../enums';\r\nimport { Column } from '../Models/Column';\r\nimport { OptionChangedFunc } from '../types';\r\n\r\nexport const sortUtilsClickHandler = (\r\n  columns: Column[],\r\n  column: Column,\r\n  onOptionChanged: OptionChangedFunc,\r\n) => {\r\n  const index = columns.findIndex((c) => c === column);\r\n  const newColumns = [...columns];\r\n  const sortDirection = getNextSortDirection(column.sortDirection);\r\n\r\n  newColumns.forEach((newColumn, newColumnIndex) => {\r\n    if (newColumn.sortDirection) {\r\n      newColumns[newColumnIndex] = {...newColumn};\r\n      newColumns[newColumnIndex].sortDirection = undefined;\r\n    }\r\n  });\r\n\r\n  newColumns[index] = {...column};\r\n  newColumns[index].sortDirection = sortDirection;\r\n  onOptionChanged({ columns: newColumns });\r\n};\r\n\r\nconst getNextSortDirection = (previousSortdirection?: SortDirection) => {\r\n  let nextSortDirection;\r\n  if (previousSortdirection) {\r\n    nextSortDirection = previousSortdirection === SortDirection.Ascend\r\n      ? SortDirection.Descend : SortDirection.Ascend;\r\n  } else {\r\n    nextSortDirection = defaultOptions.columnSortDirection;\r\n  }\r\n  return nextSortDirection;\r\n};\r\n","import * as React from 'react';\r\n\r\nexport interface IEmptyCellsProps {\r\n  count: number;\r\n  shouldUseTh?: boolean;\r\n}\r\n\r\nconst EmptyCells: React.FunctionComponent<IEmptyCellsProps> = ({ count, shouldUseTh }) => {\r\n  return (\r\n    <>\r\n      {[...Array(count)].map((item, index) =>\r\n        shouldUseTh ?\r\n          <th key={index} className='tc-empty-cell'/> :\r\n          <td key={index} className='tc-empty-cell'/>)}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EmptyCells;\r\n","import * as React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { SortDirection } from '../../enums';\r\nimport { IHeadCellProps } from '../HeadCell/HeadCell';\r\n\r\nconst HeadCellContent: React.FunctionComponent<IHeadCellProps> = (props) => {\r\n  const {\r\n    column: { headCell },\r\n  } = props;\r\n  if (headCell) {\r\n    return headCell(props);\r\n  }\r\n\r\n  const {\r\n    sortClick, column: { title, sortDirection },\r\n  } = props;\r\n  return (\r\n    <div\r\n      className={`tc-thead-cell-content ${sortClick ? 'tc-pointer' : ''}`}\r\n      onClick={sortClick ? sortClick : undefined}\r\n    >\r\n      <div>{title}</div>\r\n      {\r\n        sortDirection && sortClick && (\r\n          <div\r\n            className={\r\n              sortDirection === SortDirection.Ascend\r\n                ? defaultOptions.css.iconSortArrowDown\r\n                : defaultOptions.css.iconSortArrowUp\r\n            }\r\n          />\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HeadCellContent;\r\n","import * as React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { Column } from '../../Models/Column';\r\nimport HeadCellContent from '../HeadCellContent/HeadCellContent';\r\n\r\nexport interface IHeadCellProps {\r\n  column: Column;\r\n  sortClick?: () => void;\r\n}\r\n\r\nconst HeadCell: React.FunctionComponent<IHeadCellProps> = (props) => {\r\n  const {\r\n    column: { width,  textAlign },\r\n  } = props;\r\n  return (\r\n    <th scope='col' style={{ width, textAlign }} className={defaultOptions.css.theadCell}>\r\n      <HeadCellContent {...props}/>\r\n    </th>\r\n  );\r\n};\r\n\r\nexport default HeadCell;\r\n","import React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { SortingMode } from '../../enums';\r\nimport { Column } from '../../Models/Column';\r\nimport { OptionChangedFunc } from '../../types';\r\nimport { sortUtilsClickHandler } from '../../Utils/HeadRowUtils';\r\nimport EmptyCells from '../EmptyCells/EmptyCells';\r\nimport HeadCell from '../HeadCell/HeadCell';\r\n\r\nexport interface IHeadRowProps {\r\n  columns: Column[];\r\n  sortingMode: SortingMode;\r\n  onOptionChanged: OptionChangedFunc;\r\n  groupColumnsCount: number;\r\n}\r\n\r\nconst HeadRow: React.FunctionComponent<IHeadRowProps> = ({\r\n  columns, onOptionChanged, sortingMode, groupColumnsCount,\r\n}) => {\r\n  return (\r\n    <tr className={defaultOptions.css.theadRow}>\r\n      <EmptyCells count={groupColumnsCount}/>\r\n      {columns.map((column) => {\r\n        const sortClick: any = sortingMode === SortingMode.Single && (() => {\r\n          sortUtilsClickHandler(columns, column, onOptionChanged);\r\n        });\r\n        return (\r\n          <HeadCell\r\n            key={column.key || column.field}\r\n            column={column}\r\n            sortClick={sortClick}\r\n          />\r\n        );\r\n      })}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default HeadRow;\r\n","const groupMark = {};\r\n\r\nexport default groupMark;\r\n","import groupMark from '../groupMark';\r\nimport { Group } from '../Models/Group';\r\nimport { GroupRowData } from '../Models/GroupRowData';\r\nimport { OptionChangedFunc } from '../types';\r\n\r\nexport const groupClick = (groupsExpanded: any[][], groupRowData: GroupRowData, onOptionChanged: OptionChangedFunc) => {\r\n  const newGroupsExpanded =\r\n    groupsExpanded.filter((ge) => JSON.stringify(ge) !== JSON.stringify(groupRowData.key));\r\n  if (newGroupsExpanded.length === groupsExpanded.length) {\r\n    newGroupsExpanded.push(groupRowData.key);\r\n  }\r\n  onOptionChanged({ groupsExpanded: newGroupsExpanded });\r\n};\r\n\r\nexport const getExpandedGroups = (groupedData: any[]): any[][] => {\r\n  const groupsExpanded: any[][] = [];\r\n  for (const value of groupedData) {\r\n    if (value.groupMark === groupMark) {\r\n      groupsExpanded.push(value.key);\r\n    }\r\n  }\r\n  return groupsExpanded;\r\n};\r\n\r\nexport const getGroupedData = (data: any[], groups: Group[], groupsExpanded?: any[]): any[] => {\r\n  const grouped = getGroupedStructure(data, groups, 0, groupsExpanded);\r\n  return convertToFlat(grouped);\r\n};\r\n\r\nexport const convertToFlat = (grouped: any, key: any[] = []) => {\r\n  let result: any[] = [];\r\n  grouped.forEach((value: any, groupValue: any) => {\r\n    const groupKey = [...key];\r\n    groupKey.push(groupValue);\r\n    result.push({ groupMark, key: groupKey, value: groupValue });\r\n    if (Array.isArray(value)) {\r\n      value.forEach((item) => {\r\n        result.push(item);\r\n      });\r\n    } else {\r\n      result = result.concat(convertToFlat(value, groupKey));\r\n    }\r\n  });\r\n  return result;\r\n};\r\n\r\nexport const getGroupedStructure = (\r\n  data: any[],\r\n  groups: Group[],\r\n  expandedDeep: number = 0,\r\n  groupsExpanded?: any[],\r\n): any => {\r\n  groups = [...groups];\r\n  const group = groups.shift();\r\n  if (group) {\r\n    const grouped = groupBy(data, (item: any) => item[group.field]);\r\n    grouped.forEach((value, key) => {\r\n      const groupExpandedItems = groupsExpanded && groupsExpanded.filter((ge) => ge[expandedDeep] === key);\r\n      const isThisGroupExpanded = !groupExpandedItems\r\n        || groupExpandedItems.some((ge) => ge.length === expandedDeep + 1);\r\n      if (isThisGroupExpanded) {\r\n        const newStructure = getGroupedStructure(\r\n          value,\r\n          groups,\r\n          expandedDeep + 1,\r\n          groupExpandedItems && groupExpandedItems.filter((ge) => ge.length > expandedDeep + 1),\r\n        );\r\n        if (newStructure) {\r\n          grouped.set(key, newStructure);\r\n        }\r\n      } else {\r\n        grouped.set(key, []);\r\n      }\r\n    });\r\n    return grouped;\r\n  }\r\n};\r\n\r\nexport const groupBy = (data: any[], keyGetter: any, isEmptyValue: boolean = false) => {\r\n  const map = new Map();\r\n  data.forEach((item) => {\r\n    const key = keyGetter(item);\r\n    if (isEmptyValue) {\r\n      map.set(key, []);\r\n    } else {\r\n      const collection = map.get(key);\r\n      if (!collection) {\r\n          map.set(key, [item]);\r\n      } else {\r\n          collection.push(item);\r\n      }\r\n    }\r\n  });\r\n  return map;\r\n};\r\n","const emptyFunc = () => {};\r\nexport default emptyFunc;\r\n","import React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { Events } from '../../enums';\r\nimport { Cell } from '../../models';\r\nimport { isEmpty } from '../../Utils/CommonUtils';\r\nimport { ICellEditorProps } from '../CellEditor/CellEditor';\r\n\r\nconst CellEditorBoolean: React.FunctionComponent<ICellEditorProps> = ({\r\n  column,\r\n  onEvent,\r\n  onValueChange,\r\n  rowData,\r\n  rowKey,\r\n}) => {\r\n  const value = rowData[column.field];\r\n  return (\r\n    <input autoFocus={true}\r\n      className={defaultOptions.css.checkbox}\r\n      type='checkbox'\r\n      ref={(elem) => elem && (elem.indeterminate = isEmpty(value))}\r\n      checked={value || false}\r\n      onChange={(event) => onValueChange(event.currentTarget.checked)}\r\n      onBlur={() => {\r\n        const cell: Cell = { field: column.field, rowKeyValue: rowData[rowKey] };\r\n        onEvent(Events.CloseEditor, { cell });\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CellEditorBoolean;\r\n","import React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { Events } from '../../enums';\r\nimport { Cell } from '../../models';\r\nimport { ICellEditorProps } from '../CellEditor/CellEditor';\r\n\r\nconst CellEditorDate: React.FunctionComponent<ICellEditorProps> = ({\r\n  column,\r\n  onEvent,\r\n  onValueChange,\r\n  rowData,\r\n  rowKey,\r\n}) => {\r\n  const fieldValue = rowData[column.field];\r\n  const value = fieldValue && fieldValue.toISOString().split('T')[0];\r\n  return (\r\n    <input\r\n      autoFocus={true}\r\n      className={defaultOptions.css.dateInput}\r\n      type='date'\r\n      value={value || ''}\r\n      onChange={(event) => {\r\n        const targetValue: string = event.currentTarget.value;\r\n        onValueChange(targetValue ? new Date(targetValue) : null);\r\n      }}\r\n      onBlur={() => {\r\n        const cell: Cell = { field: column.field, rowKeyValue: rowData[rowKey] };\r\n        onEvent(Events.CloseEditor, { cell });\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CellEditorDate;\r\n","import React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { Events } from '../../enums';\r\nimport { Cell } from '../../models';\r\nimport { ICellEditorProps } from '../CellEditor/CellEditor';\r\n\r\nconst CellEditorNumber: React.FunctionComponent<ICellEditorProps> = ({\r\n  column,\r\n  onEvent,\r\n  onValueChange,\r\n  rowData,\r\n  rowKey,\r\n}) => {\r\n  const value = rowData[column.field];\r\n  return (\r\n    <input autoFocus={true}\r\n      className={defaultOptions.css.numberInput}\r\n      type='number'\r\n      value={value || ''}\r\n      onChange={(event) => {\r\n        const newValue = event.currentTarget.value;\r\n        onValueChange(Number(newValue) || null);\r\n      }}\r\n      onBlur={() => {\r\n        const cell: Cell = { field: column.field, rowKeyValue: rowData[rowKey] };\r\n        onEvent(Events.CloseEditor, { cell });\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CellEditorNumber;\r\n","import React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { Events } from '../../enums';\r\nimport { Cell } from '../../models';\r\nimport { ICellEditorProps } from '../CellEditor/CellEditor';\r\n\r\nconst CellEditorString: React.FunctionComponent<ICellEditorProps> = ({\r\n  column,\r\n  onEvent,\r\n  onValueChange,\r\n  rowData,\r\n  rowKey,\r\n}) => {\r\n  const value = rowData[column.field] || '';\r\n  return (\r\n    <input autoFocus={true}\r\n      type='text'\r\n      className={defaultOptions.css.textInput}\r\n      value={value || ''}\r\n      onChange={(event) => onValueChange(event.currentTarget.value)}\r\n      onBlur={() => {\r\n        const cell: Cell = { field: column.field, rowKeyValue: rowData[rowKey] };\r\n        onEvent(Events.CloseEditor, { cell });\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CellEditorString;\r\n","import React from 'react';\r\n\r\nimport { DataType } from '../../enums';\r\nimport { ICellEditorProps } from '../CellEditor/CellEditor';\r\nimport CellEditorBoolean from '../CellEditorBoolean/CellEditorBoolean';\r\nimport CellEditorDate from '../CellEditorDate/CellEditorDate';\r\nimport CellEditorNumber from '../CellEditorNumber/CellEditorNumber';\r\nimport CellEditorString from '../CellEditorString/CellEditorString';\r\n\r\nconst CellEditorDataType: React.FunctionComponent<ICellEditorProps> = (props) => {\r\n  switch (props.column.dataType) {\r\n    case DataType.Boolean: return <CellEditorBoolean {...props} />;\r\n    case DataType.Date: return <CellEditorDate {...props} />;\r\n    case DataType.Number: return <CellEditorNumber {...props} />;\r\n    default: return <CellEditorString {...props} />;\r\n  }\r\n};\r\n\r\nexport default CellEditorDataType;\r\n","import * as React from 'react';\r\n\r\nimport { ICellEditorProps } from '../CellEditor/CellEditor';\r\nimport CellEditorDataType from '../CellEditorDataType/CellEditorDataType';\r\n\r\nconst FilterCell: React.FunctionComponent<ICellEditorProps> = (props) => {\r\n  const {\r\n    column: { textAlign },\r\n    onValueChange,\r\n  } = props;\r\n  return (\r\n    <td style={{textAlign}}>\r\n      <CellEditorDataType\r\n        {...props}\r\n        onValueChange={onValueChange}\r\n      />\r\n      <div className='tc-filter-row-clear-button' onClick={() => { onValueChange(null); }}>\r\n        Clear\r\n      </div>\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default FilterCell;\r\n","import React from 'react';\r\n\r\nimport emptyFunc from '../../emptyFunc';\r\nimport { Column } from '../../Models/Column';\r\nimport { FilterCondition } from '../../Models/FilterCondition';\r\nimport { OptionChangedFunc } from '../../types';\r\nimport { filterCellValueChangeHandler } from '../../Utils/FilterUtils';\r\nimport FilterCell from '../FilterCell/FilterCell';\r\n\r\nexport interface IFilterRowProps {\r\n  columns: Column[];\r\n  filterRow: FilterCondition[];\r\n  onOptionChanged: OptionChangedFunc;\r\n}\r\n\r\nconst FilterRow: React.FunctionComponent<IFilterRowProps> = ({\r\n  columns,\r\n  filterRow,\r\n  onOptionChanged,\r\n}) => {\r\n  const rowData = filterRow.reduce((c: any, f, i, array) => {\r\n    c[f.field] = f.value;\r\n    return c;\r\n  }, {});\r\n  return (\r\n    <tr className='tc-filter-row'>\r\n      {columns.map((column) => {\r\n        return (\r\n          <FilterCell\r\n            key={column.field}\r\n            column={column}\r\n            rowKey={''}\r\n            isSelectedRow={false}\r\n            onEvent={emptyFunc}\r\n            rowData={rowData}\r\n            onValueChange={(value) => {\r\n              filterCellValueChangeHandler(value, column.field, filterRow, onOptionChanged);\r\n            }}\r\n          />\r\n        );\r\n      })}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default FilterRow;\r\n","import { Cell } from '../Models/Cell';\r\nimport { Column } from '../Models/Column';\r\nimport { FilterCondition } from '../Models/FilterCondition';\r\nimport { OptionChangedFunc } from '../types';\r\nimport { getCopyOfArrayAndDeleteItem, getCopyOfArrayAndInsertOrReplaceItem } from './ArrayUtils';\r\nimport { isEmpty } from './CommonUtils';\r\n\r\nexport const getRowEditableCells = (rowKeyValue: any, editableCells?: Cell[]): Cell[] => {\r\n  return editableCells ? editableCells.filter((c) => c.rowKeyValue === rowKeyValue) : [];\r\n};\r\n\r\nexport const searchData = (columns: Column[], data: any[], searchText: string): any[] => {\r\n  return columns.reduce((initialData: any[], c) => {\r\n    const filterFunction = (item: any) => {\r\n      return c.search ? c.search(searchText, item, c) : initialData.indexOf(item) < 0\r\n        && item[c.field].toString().toLowerCase().includes(searchText.toLowerCase());\r\n    };\r\n    return initialData.concat(data.filter(filterFunction));\r\n  }, []);\r\n};\r\n\r\nexport const filterData = (data: any[], filterRow: FilterCondition[]): any[] => {\r\n  return filterRow.reduce((initialData, f) => {\r\n    const searcFunc = typeof f.value === 'string' ? (d: any) => d[f.field].toLowerCase().includes(f.value.toLowerCase())\r\n      : (d: any) => d[f.field] === f.value;\r\n    return initialData.filter(searcFunc);\r\n  }, data);\r\n};\r\n\r\nexport const filterCellValueChangeHandler = (\r\n    value: any, field: string, filterRow: FilterCondition[], optionChangeHandler: OptionChangedFunc,\r\n  ) => {\r\n  let newFilterRow;\r\n  const newFRValue: FilterCondition = {\r\n    field,\r\n    operator: '=',\r\n    value,\r\n  };\r\n  newFilterRow = isEmpty(value) ? getCopyOfArrayAndDeleteItem(newFRValue, 'field', filterRow)\r\n    : getCopyOfArrayAndInsertOrReplaceItem(newFRValue, 'field', filterRow);\r\n  optionChangeHandler({ filterRow: newFilterRow });\r\n};\r\n","import React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { GroupRowData } from '../../Models/GroupRowData';\r\nimport { OptionChangedFunc } from '../../types';\r\nimport { groupClick } from '../../Utils/GroupUtils';\r\nimport EmptyCells from '../EmptyCells/EmptyCells';\r\n\r\nexport interface IGroupRowProps {\r\n  emptyColumnsCount: number;\r\n  groupRowData: GroupRowData;\r\n  groupsExpanded: any[][];\r\n  onOptionChanged: OptionChangedFunc;\r\n}\r\n\r\nconst GroupRow: React.FunctionComponent<IGroupRowProps> = ({\r\n  emptyColumnsCount,\r\n  groupRowData,\r\n  groupsExpanded,\r\n  onOptionChanged,\r\n}) => {\r\n  return (\r\n    <tr className='tc-group-row'>\r\n      <EmptyCells count={emptyColumnsCount}/>\r\n      <td\r\n        className='tc-group-column'\r\n        colSpan={'100%' as any}>\r\n          <div className='tc-group-column-content'>\r\n            <div\r\n              onClick={() => {\r\n                groupClick(groupsExpanded, groupRowData, onOptionChanged);\r\n              }}\r\n              className={groupsExpanded.some((ge) => JSON.stringify(ge) === JSON.stringify(groupRowData.key))\r\n                ? defaultOptions.css.iconGroupArrowExpanded : defaultOptions.css.iconGroupArrowCollapsed}\r\n            />\r\n            <div className='tc-group-text'>{groupRowData.value.toString()}</div>\r\n          </div>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default GroupRow;\r\n","import * as React from 'react';\r\n\r\nimport { Events } from '../../enums';\r\nimport { Cell } from '../../models';\r\nimport { isEmpty } from '../../Utils/CommonUtils';\r\nimport { ICellContentProps } from '../CellContent/CellContent';\r\n\r\nconst CellText: React.FunctionComponent<ICellContentProps> = ({\r\n  column,\r\n  rowData,\r\n  rowKey,\r\n  onEvent,\r\n}) => {\r\n  const value = rowData[column.field];\r\n  return (\r\n    <div className='tc-cell-text'\r\n      onClick={() => {\r\n        const cell: Cell = { field: column.field, rowKeyValue: rowData[rowKey] };\r\n        onEvent(Events.OpenEditor, { cell });\r\n      }}\r\n    >{!isEmpty(value) ? value.toString() : <>&nbsp;</>}</div>\r\n  );\r\n};\r\n\r\nexport default CellText;\r\n","import * as React from 'react';\r\n\r\nimport { Column } from '../../Models/Column';\r\nimport { EventFunc } from '../../types';\r\nimport CellText from '../CellText/CellText';\r\n\r\nexport interface ICellContentProps {\r\n  column: Column;\r\n  rowData: any;\r\n  rowKey: string;\r\n  onEvent: EventFunc;\r\n}\r\n\r\nconst CellContent: React.FunctionComponent<ICellContentProps> = (props) => {\r\n  const { column: { cell } } = props;\r\n  return cell ? cell(props) :  <CellText {...props}/>;\r\n};\r\n\r\nexport default CellContent;\r\n","import { KeyboardEnum } from '../enums';\r\n\r\n/*\r\n  Used inside effects and returned as result from them,\r\n  it adds listener to esc & enter keys on life cycle of component\r\n*/\r\nexport const addEscEnterKeyEffect = (escKeyHandler: () => void, enterKeyHandler: () => void) => {\r\n  const handleKeyboard = (event: KeyboardEvent) => {\r\n    if (event.keyCode === KeyboardEnum.Esc) {\r\n      escKeyHandler();\r\n    }\r\n\r\n    if (event.keyCode === KeyboardEnum.Enter) {\r\n      enterKeyHandler();\r\n    }\r\n  };\r\n  return getEventListenerEffect('keyup', handleKeyboard);\r\n};\r\n\r\nexport const getEventListenerEffect = (eventName: string, handler: any) => {\r\n  window.addEventListener(eventName, handler);\r\n\r\n  return () => {\r\n    window.removeEventListener(eventName, handler);\r\n  };\r\n};\r\n","import React from 'react';\r\n\r\nexport interface ICellEditorValidationMessageProps {\r\n  message: string;\r\n}\r\n\r\nconst CellEditorValidationMessage: React.FunctionComponent<ICellEditorValidationMessageProps> = (props) => {\r\n  const { message } = props;\r\n\r\n  return (\r\n    <div className='tc-validation-message'>{message}</div>\r\n  );\r\n};\r\n\r\nexport default CellEditorValidationMessage;\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\n\r\nimport { Events } from '../../enums';\r\nimport { Cell } from '../../models';\r\nimport { addEscEnterKeyEffect } from '../../Utils/EffectUtils';\r\nimport { getValidationValue } from '../../Utils/Validation';\r\nimport { ICellEditorProps } from '../CellEditor/CellEditor';\r\nimport CellEditorDataType from '../CellEditorDataType/CellEditorDataType';\r\nimport CellEditorValidationMessage from '../CellEditorValidationMessage/CellEditorValidationMessage';\r\n\r\nconst CellEditorState: React.FunctionComponent<ICellEditorProps> = (props) => {\r\n  const {\r\n    column,\r\n    column: {\r\n      field,\r\n    },\r\n    rowData,\r\n    rowKey,\r\n    onEvent,\r\n    onValueChange,\r\n  } = props;\r\n  const [value, changeValue] = useState(rowData);\r\n\r\n  const validationValue = getValidationValue(value, column.field, column.validation);\r\n  const onValueStateChange = (newValue: any): void => {\r\n    const rowValue = { ...rowData, ...{ [field]: newValue } };\r\n    changeValue(rowValue);\r\n  };\r\n\r\n  const close = useCallback(() => {\r\n    const cell: Cell = { field: column.field, rowKeyValue: rowData[rowKey] };\r\n    onEvent(Events.CloseEditor, { cell });\r\n  }, [onEvent, column, rowData, rowKey]);\r\n\r\n  const closeHandler = useCallback(() => {\r\n    if (!validationValue) {\r\n      if (rowData[field] !== value[field]) {\r\n        onValueChange({ ...rowData, ...{ [field]: value[field] } });\r\n      }\r\n      close();\r\n    }\r\n  }, [validationValue, onValueChange, close, value, field, rowData]);\r\n\r\n  useEffect(() => {\r\n    return addEscEnterKeyEffect(close, closeHandler);\r\n  }, [close, closeHandler]);\r\n\r\n  const onEventHandler = (event: string, eventData: any) => {\r\n    if (event === Events.CloseEditor) {\r\n      closeHandler();\r\n    } else {\r\n      onEvent(event, eventData);\r\n    }\r\n  };\r\n\r\n  const stateProps = { ...props, ...{\r\n    onEvent: onEventHandler,\r\n    onValueChange: onValueStateChange,\r\n    rowData : value,\r\n  }};\r\n\r\n  return (\r\n    <>\r\n      <CellEditorDataType {...stateProps} />\r\n      {validationValue && <CellEditorValidationMessage message={validationValue} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CellEditorState;\r\n","import { ValidationFunc } from '../types';\r\n\r\nexport const getValidationValue = (rowData: any, field: string, validation?: ValidationFunc) => {\r\n  if (validation) {\r\n    return validation(rowData[field], rowData);\r\n  }\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { Column } from '../../Models/Column';\r\nimport { EventFunc, ValueChangeFunc } from '../../types';\r\nimport CellEditorState from '../CellEditorState/CellEditorState';\r\n\r\nexport interface ICellEditorProps {\r\n  column: Column;\r\n  rowData: any;\r\n  rowKey: string;\r\n  isSelectedRow: boolean;\r\n  onEvent: EventFunc;\r\n  onValueChange: ValueChangeFunc;\r\n}\r\n\r\nconst CellEditor: React.FunctionComponent<ICellEditorProps> = (props) => {\r\n  const { editor } = props.column;\r\n  return editor ? editor(props) :  <CellEditorState {...props}/>;\r\n};\r\n\r\nexport default CellEditor;\r\n","import * as React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { EditingMode } from '../../enums';\r\nimport { Column } from '../../Models/Column';\r\nimport { EventFunc, RowDataChangedFunc } from '../../types';\r\nimport CellContent from '../CellContent/CellContent';\r\nimport CellEditor from '../CellEditor/CellEditor';\r\n\r\nexport interface ICellComponentProps {\r\n  column: Column;\r\n  editingMode: EditingMode;\r\n  isEditableCell: boolean;\r\n  isSelectedRow: boolean;\r\n  onEvent: EventFunc;\r\n  onRowDataChanged: RowDataChangedFunc;\r\n  rowData: any;\r\n  rowKey: any;\r\n}\r\n\r\nconst CellComponent: React.FunctionComponent<ICellComponentProps> = (props) => {\r\n  const {\r\n    column: { textAlign },\r\n    isEditableCell,\r\n    onRowDataChanged,\r\n  } = props;\r\n  return (\r\n    <td style={{textAlign}} className={defaultOptions.css.cell}>\r\n      { isEditableCell ? (\r\n          <CellEditor\r\n            {...props}\r\n            onValueChange={onRowDataChanged}\r\n          />\r\n        )\r\n        : (\r\n          <CellContent {...props} />\r\n        )\r\n      }\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default CellComponent;\r\n","import React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { EditingMode } from '../../enums';\r\nimport { Cell } from '../../Models/Cell';\r\nimport { Column } from '../../Models/Column';\r\nimport { EventFunc, RowDataChangedFunc } from '../../types';\r\nimport { isEditableCell } from '../../Utils/CellUtils';\r\nimport { getRowEditableCells } from '../../Utils/FilterUtils';\r\nimport CellComponent from '../CellComponent/CellComponent';\r\nimport EmptyCells from '../EmptyCells/EmptyCells';\r\n\r\nexport interface IRowProps {\r\n  columns: Column[];\r\n  editableCells: Cell[];\r\n  editingMode: EditingMode;\r\n  groupColumnsCount: number;\r\n  onEvent: EventFunc;\r\n  onRowDataChanged: RowDataChangedFunc;\r\n  rowData: any;\r\n  rowKey: any;\r\n  selectedRows: any[];\r\n}\r\n\r\nconst Row: React.FunctionComponent<IRowProps> = ({\r\n  columns,\r\n  editableCells,\r\n  editingMode,\r\n  groupColumnsCount,\r\n  onEvent,\r\n  onRowDataChanged,\r\n  rowData,\r\n  rowKey,\r\n  selectedRows = [],\r\n}) => {\r\n  const rowKeyValue = rowData[rowKey];\r\n  const rowEditableCells = getRowEditableCells(rowKeyValue, editableCells);\r\n  const isSelectedRow = selectedRows.some((s) => s === rowKeyValue);\r\n  return (\r\n    <tr className={`${defaultOptions.css.row} ${isSelectedRow ? defaultOptions.css.rowSelected : ''}`}>\r\n      <EmptyCells count={groupColumnsCount}/>\r\n      {columns.map((column) => (\r\n        <CellComponent\r\n          column={column}\r\n          editingMode={editingMode}\r\n          isEditableCell={isEditableCell(editingMode, column, rowEditableCells)}\r\n          isSelectedRow={isSelectedRow}\r\n          key={column.key || column.field}\r\n          onEvent={onEvent}\r\n          onRowDataChanged={onRowDataChanged}\r\n          rowData={rowData}\r\n          rowKey={rowKey}\r\n        />\r\n      ))}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default Row;\r\n","import * as React from 'react';\r\n\r\nimport { EditingMode, Events } from '../../enums';\r\nimport groupMark from '../../groupMark';\r\nimport { Cell } from '../../Models/Cell';\r\nimport { Column } from '../../Models/Column';\r\nimport { FilterCondition } from '../../Models/FilterCondition';\r\nimport { Group } from '../../Models/Group';\r\nimport { DataChangedFunc, EventFunc, OptionChangedFunc } from '../../types';\r\nimport { getExpandedGroups, getGroupedData } from '../../Utils/GroupUtils';\r\nimport FilterRow from '../FilterRow/FilterRow';\r\nimport GroupRow from '../GroupRow/GroupRow';\r\nimport Row from '../Row/Row';\r\n\r\nexport interface ITableBodyProps {\r\n  columns: Column[];\r\n  data: any[];\r\n  editableCells?: Cell[];\r\n  editingMode?: EditingMode;\r\n  filterRow?: FilterCondition[];\r\n  groupColumnsCount: number;\r\n  groups?: Group[];\r\n  groupsExpanded?: any[][];\r\n  onDataChanged?: DataChangedFunc;\r\n  onEvent: EventFunc;\r\n  onOptionChanged: OptionChangedFunc;\r\n  rowKey: string;\r\n  selectedRows?: any[];\r\n}\r\n\r\nconst TableBody: React.FunctionComponent<ITableBodyProps> = ({\r\n  columns,\r\n  data,\r\n  editableCells = [],\r\n  editingMode = EditingMode.None,\r\n  filterRow,\r\n  groupColumnsCount,\r\n  groups,\r\n  groupsExpanded,\r\n  onEvent,\r\n  onOptionChanged,\r\n  rowKey,\r\n  selectedRows = [],\r\n}) => {\r\n  const groupedData = groups ? getGroupedData(data, groups, groupsExpanded) : data;\r\n\r\n  if (groups && !groupsExpanded) {\r\n    groupsExpanded = getExpandedGroups(groupedData);\r\n  }\r\n  return (\r\n    <tbody>\r\n      {filterRow && <FilterRow columns={columns} filterRow={filterRow} onOptionChanged={onOptionChanged}/>}\r\n      {groupedData.map((d) => {\r\n        return (\r\n          d.groupMark === groupMark\r\n          ? (\r\n            <GroupRow\r\n              key={d.key}\r\n              groupRowData={d}\r\n              emptyColumnsCount={d.key.length - 1}\r\n              groupsExpanded={groupsExpanded || []}\r\n              onOptionChanged={onOptionChanged} />\r\n          ) : (\r\n            <Row\r\n              key={d[rowKey]}\r\n              columns={columns}\r\n              rowData={d}\r\n              rowKey={rowKey}\r\n              editableCells={editableCells}\r\n              editingMode={editingMode}\r\n              groupColumnsCount={groupColumnsCount}\r\n              onEvent={onEvent}\r\n              selectedRows={selectedRows}\r\n              onRowDataChanged={(rowData: any) => {\r\n                onEvent(Events.RowDataChanged, { rowData });\r\n              }}\r\n            />\r\n          )\r\n        );\r\n      })}\r\n    </tbody>\r\n  );\r\n};\r\n\r\nexport default TableBody;\r\n","import * as React from 'react';\r\n\r\nimport defaultOptions from '../../defaultOptions';\r\nimport { EditingMode, SortingMode } from '../../enums';\r\nimport { Cell } from '../../Models/Cell';\r\nimport { Column } from '../../Models/Column';\r\nimport { FilterCondition } from '../../Models/FilterCondition';\r\nimport { Group } from '../../Models/Group';\r\nimport { DataChangedFunc, EventFunc, OptionChangedFunc } from '../../types';\r\nimport { getOnEventHandler } from '../../Utils/EventUtils';\r\nimport { filterData, searchData } from '../../Utils/FilterUtils';\r\nimport { sortData } from '../../Utils/SortUtils';\r\nimport { convertToColumnTypes } from '../../Utils/TypeUtils';\r\nimport HeadRow from '../HeadRow/HeadRow';\r\nimport TableBody from '../TableBody/TableBody';\r\n\r\n/**\r\n * Sets the options of the table which are related to its looks\r\n */\r\nexport interface ITableOption {\r\n  /** Columns in table and their look and behaviour */\r\n  columns: Column[];\r\n  /** Specifies the array of cells which are being edited */\r\n  editableCells?: Cell[];\r\n  /** Sets the editing mode */\r\n  editingMode?: EditingMode;\r\n  /** Sets filters for columns */\r\n  filterRow?: FilterCondition[];\r\n  /** Sets the groups option */\r\n  groups?: Group[];\r\n  /** Sets the expanded groups */\r\n  groupsExpanded?: any[][];\r\n  /** Specifies the column unique field which will be used as a key */\r\n  rowKey: string;\r\n  /** Specifies the array of keys of rows which were selected */\r\n  selectedRows?: any[];\r\n  /** Sets the sorting mode */\r\n  sortingMode?: SortingMode;\r\n  /**\r\n   * Sets the search by data columns\r\n   * (TODO: replace string to any)\r\n   */\r\n  search?: string;\r\n}\r\n\r\nexport interface ITableEvents {\r\n  /** Called each time Data is changed */\r\n  onDataChanged?: DataChangedFunc;\r\n  /** Called each time ITableOption changed */\r\n  onOptionChanged: OptionChangedFunc;\r\n  /** Called each time when some event emited */\r\n  onEvent?: EventFunc;\r\n}\r\n\r\nexport interface ITableAllProps extends ITableEvents, ITableOption {\r\n  /** The data which is shown in Table's rows */\r\n  data: any[];\r\n}\r\n\r\nexport const Table: React.FunctionComponent<ITableAllProps> = (props) => {\r\n  const {\r\n    groups,\r\n    filterRow,\r\n    onOptionChanged,\r\n    search,\r\n    sortingMode = SortingMode.None,\r\n  } = props;\r\n  let { columns, data } = props;\r\n  const realColumns = columns.filter((c) => c.field);\r\n  data = search ? searchData(realColumns, data, search) : data;\r\n  data = convertToColumnTypes(data, realColumns);\r\n  data = filterRow ? filterData(data, filterRow) : data;\r\n  data = sortData(realColumns, data);\r\n\r\n  let groupColumnsCount = 0;\r\n  if (groups) {\r\n    groupColumnsCount = groups.length;\r\n    columns = columns.filter((c) => !groups.some((g) => g.field === c.field));\r\n  }\r\n\r\n  const tableOnEvent = getOnEventHandler(props);\r\n\r\n  return (\r\n    <div className='tc'>\r\n      <table className={defaultOptions.css.table}>\r\n        <thead className={defaultOptions.css.thead}>\r\n          <HeadRow\r\n            groupColumnsCount={groupColumnsCount}\r\n            columns={columns}\r\n            onOptionChanged={onOptionChanged}\r\n            sortingMode={sortingMode}\r\n          />\r\n        </thead>\r\n        <TableBody\r\n            {...props}\r\n            data={data}\r\n            columns={columns}\r\n            onEvent={tableOnEvent}\r\n            groupColumnsCount={groupColumnsCount}\r\n        />\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n","import { SortDirection } from '../enums';\r\nimport { Column } from '../Models/Column';\r\n\r\nexport const sortData = (columns: Column[], data: any): any[] => {\r\n  const sortedColumn = columns.find((column) => column.sortDirection);\r\n  if (!sortedColumn) { return data; }\r\n  const columnKey = sortedColumn.field;\r\n  const sortFunc = sortedColumn.sortDirection === SortDirection.Ascend ?\r\n    ((a: any, b: any) => a[columnKey] < b[columnKey] ? -1 : 1)\r\n    : ((a: any, b: any) => a[columnKey] > b[columnKey] ? -1 : 1);\r\n  const newData = [...data].sort(sortFunc);\r\n  return newData;\r\n};\r\n","\r\nimport { ITableAllProps } from '../';\r\nimport { Events } from '../enums';\r\nimport { getCopyOfArrayAndInsertOrReplaceItem } from './ArrayUtils';\r\nimport { changeCellEditorToCellTextHandler, changeCellTextToCellEditorHandler } from './CellUtils';\r\n\r\nexport const getOnEventHandler = ({\r\n  data,\r\n  editableCells = [],\r\n  onDataChanged = () => {},\r\n  onEvent = () => {},\r\n  onOptionChanged,\r\n  rowKey,\r\n  selectedRows = [],\r\n}: ITableAllProps) => {\r\n  return (event: string, eventData: any) => {\r\n    switch (event) {\r\n      case Events.OpenEditor:\r\n        changeCellTextToCellEditorHandler(\r\n          eventData.cell,\r\n          editableCells,\r\n          onOptionChanged);\r\n        break;\r\n      case Events.CloseEditor:\r\n        changeCellEditorToCellTextHandler(\r\n          eventData.cell,\r\n          editableCells,\r\n          onOptionChanged);\r\n        break;\r\n      case Events.RowDataChanged:\r\n          const newData = getCopyOfArrayAndInsertOrReplaceItem(eventData.rowData, rowKey, data);\r\n          onDataChanged(newData);\r\n          break;\r\n      case Events.RowSelected:\r\n          onOptionChanged({ selectedRows: [...selectedRows, ...[eventData.rowKeyValue]] });\r\n          break;\r\n      case Events.RowDeselected:\r\n          onOptionChanged({ selectedRows: [...selectedRows].filter((s) => s !== eventData.rowKeyValue) });\r\n          break;\r\n    }\r\n    onEvent(event, eventData);\r\n  };\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType } from '../../lib/enums';\r\nimport { CellFuncPropsWithChildren, EventFunc, OptionChangedFunc } from '../../lib/types';\r\n\r\nconst DELETE_EVENT = 'delete';\r\n\r\nconst dataArray = Array(10).fill(undefined).map(\r\n  (_, index) => ({\r\n    column1: `column:1 row:${index}`,\r\n    column2: `column:2 row:${index}`,\r\n    column3: `column:3 row:${index}`,\r\n    column4: `column:4 row:${index}`,\r\n  }),\r\n);\r\n\r\nconst AlertCell: React.FC<CellFuncPropsWithChildren> = ({\r\n   rowData,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <button onClick={() => alert(`row data: ${JSON.stringify(rowData)}`)}>Show allert</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst DeleteRow: React.FC<CellFuncPropsWithChildren> = ({\r\n  rowData, onEvent,\r\n}) => {\r\n return (\r\n   <div>\r\n     <button onClick={() => onEvent(DELETE_EVENT, { rowData })}>Delete</button>\r\n   </div>\r\n );\r\n};\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { key: 'command2', field: '', cell: (props) => <AlertCell {...props}/> },\r\n    { field: 'column1', title: 'Column 1', dataType: DataType.String },\r\n    { field: 'column2', title: 'Column 2', dataType: DataType.String },\r\n    { field: 'column3', title: 'Column 3', dataType: DataType.String },\r\n    { field: 'column4', title: 'Column 4', dataType: DataType.String },\r\n    { key: 'command1', field: '', cell: (props) => <DeleteRow {...props} /> },\r\n  ],\r\n  rowKey: 'column1',\r\n};\r\n\r\nconst CommandColumnDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n\r\n  const [data, changeData] = useState(dataArray);\r\n  const onDataChanged: OptionChangedFunc = (newValue) => {\r\n    changeData(newValue);\r\n  };\r\n\r\n  const onEvent: EventFunc = (event, eventData) => {\r\n    if (event === DELETE_EVENT) {\r\n      const newValue = data.filter((d: any) => d[tableOption.rowKey] !== eventData.rowData[tableOption.rowKey]);\r\n      changeData(newValue);\r\n    }\r\n  };\r\n  return (\r\n    <Table\r\n      {...option}\r\n      data={data}\r\n      onOptionChanged={onOptionChanged}\r\n      onDataChanged={onDataChanged}\r\n      onEvent={onEvent}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CommandColumnDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, EditingMode, Events, TextAlign } from '../../lib/enums';\r\nimport { Cell } from '../../lib/models';\r\nimport { CellFuncPropsWithChildren, OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 55, passed: false, nextTry: new Date(2019, 10, 8, 10) },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false, nextTry: new Date(2019, 11, 8, 10) },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Marshall Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false, nextTry: new Date(2019, 10, 9, 10) },\r\n];\r\n\r\nconst CustomCell: React.FC<CellFuncPropsWithChildren> = ({\r\n  column: { field }, rowData, rowKey, onEvent,\r\n}) => {\r\n  return (\r\n    <div onClick={() => {\r\n      const cell: Cell = { field, rowKeyValue: rowData[rowKey] };\r\n      onEvent(Events.OpenEditor, { cell });\r\n    }}>\r\n      {rowData[field] ? 'Passed' : 'Failed'}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { dataType: DataType.String, field: 'name', title: 'Name', width: '30%' },\r\n    { field: 'score', title: 'Score', dataType: DataType.Number, width: '10%', textAlign: TextAlign.Right },\r\n    {\r\n      cell: CustomCell,\r\n      dataType: DataType.Boolean,\r\n      field: 'passed',\r\n      textAlign: TextAlign.Right,\r\n      title: 'Results',\r\n      width: '10%',\r\n    },\r\n    { field: 'nextTry', title: 'Next Try', dataType: DataType.Date, textAlign: TextAlign.Right  },\r\n  ],\r\n  editingMode: EditingMode.Cell,\r\n  rowKey: 'id',\r\n};\r\n\r\nconst CustomCellDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n\r\n  const [data, changeData] = useState(dataArray);\r\n  const onDataChanged: OptionChangedFunc = (newValue) => {\r\n    changeData(newValue);\r\n  };\r\n  return (\r\n    <Table\r\n      {...option}\r\n      data={data}\r\n      onOptionChanged={onOptionChanged}\r\n      onDataChanged={onDataChanged}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CustomCellDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, EditingMode, Events } from '../../lib/enums';\r\nimport { Cell } from '../../lib/models';\r\nimport { EditorFuncPropsWithChildren, OptionChangedFunc } from '../../lib/types';\r\nimport { toBoolean } from '../../lib/Utils/TypeUtils';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 55, passed: false, nextTry: new Date(2019, 10, 8, 10) },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false, nextTry: new Date(2019, 11, 8, 10) },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Marshall Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false, nextTry: new Date(2019, 10, 9, 10) },\r\n];\r\n\r\nconst CustomEditor: React.FC<EditorFuncPropsWithChildren> = ({\r\n  column: { field }, rowKey, rowData, onEvent, onValueChange,\r\n}) => {\r\n  const close = () => {\r\n    const cell: Cell = { field, rowKeyValue: rowData[rowKey] };\r\n    onEvent(Events.CloseEditor, { cell });\r\n  };\r\n  const [value, setValue] = useState(rowData[field]);\r\n  return (\r\n    <div>\r\n    <input\r\n      className='form-control'\r\n      type='text'\r\n      value={value}\r\n      onChange={(event) => setValue(event.currentTarget.value)}/>\r\n    <button onClick={() => {\r\n      onValueChange({ ...rowData, ...{ [field]: value } });\r\n      close();\r\n    }}>Save</button>\r\n    <button onClick={close}>Cancel</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CustomLookupEditor: React.FC<EditorFuncPropsWithChildren> = ({\r\n  column: { field }, rowData, rowKey, onEvent, onValueChange,\r\n}) => {\r\n  const close = () => {\r\n    const cell: Cell = { field, rowKeyValue: rowData[rowKey] };\r\n    onEvent(Events.CloseEditor, { cell });\r\n  };\r\n  const [value, setValue] = useState(rowData[field]);\r\n  return (\r\n    <div>\r\n      <select\r\n        className='form-control'\r\n        autoFocus={true}\r\n        defaultValue={value}\r\n        onBlur={() => {\r\n          onValueChange({ ...rowData, ...{ [field]: value } });\r\n          close();\r\n        }}\r\n        onChange={(event) => {\r\n          setValue(toBoolean(event.currentTarget.value));\r\n        }}>\r\n        <option value={'true'}>True</option>\r\n        <option value={'false'}>False</option>\r\n      </select>\r\n    </div >\r\n  );\r\n};\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { dataType: DataType.String, field: 'name', title: 'Name', editor: CustomEditor, width: '30%' },\r\n    { field: 'score', title: 'Score', dataType: DataType.Number, width: '10%' },\r\n    { dataType: DataType.Boolean, field: 'passed', title: 'Passed', editor: CustomLookupEditor, width: '10%' },\r\n    { field: 'nextTry', title: 'Next Try', dataType: DataType.Date },\r\n  ],\r\n  editingMode: EditingMode.Cell,\r\n  rowKey: 'id',\r\n};\r\n\r\nconst CustomEditorDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n\r\n  const [data, changeData] = useState(dataArray);\r\n  const onDataChanged: OptionChangedFunc = (newValue) => {\r\n    changeData(newValue);\r\n  };\r\n  return (\r\n    <Table\r\n      {...option}\r\n      data={data}\r\n      onOptionChanged={onOptionChanged}\r\n      onDataChanged={onDataChanged}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CustomEditorDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { TextAlign } from '../../lib/enums';\r\nimport { HeaderCellFuncPropsWithChildren, OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray = Array(7).fill(undefined).map(\r\n  (_, index) => ({\r\n    column1: `column:1 row:${index}`,\r\n    column2: `column:2 row:${index}`,\r\n    id: index,\r\n  }),\r\n);\r\n\r\nconst HeadCell: React.FC<HeaderCellFuncPropsWithChildren> = ({\r\n  column: { title },\r\n}) => {\r\n  return (\r\n    <div style={{color: 'red'}}>\r\n      {title} - (Custom)\r\n    </div>\r\n  );\r\n};\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { field: 'column1', title: 'Column 1', headCell: (props) => <HeadCell {...props}/>, textAlign: TextAlign.Left },\r\n    { field: 'column2', title: 'Column 2' },\r\n  ],\r\n  rowKey: 'id',\r\n};\r\n\r\nconst CustomHeaderCellDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n\r\n  const [data, changeData] = useState(dataArray);\r\n  const onDataChanged: OptionChangedFunc = (newValue) => {\r\n    changeData(newValue);\r\n  };\r\n  return (\r\n    <Table\r\n      {...option}\r\n      data={data}\r\n      onOptionChanged={onOptionChanged}\r\n      onDataChanged={onDataChanged}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CustomHeaderCellDemo;\r\n","\r\nexport default class Demo {\r\n  constructor(\r\n    public component: React.FC,\r\n    public path: string,\r\n    public title: string,\r\n    public fileName: string) {\r\n\r\n  }\r\n}\r\n","import './DemoPage.scss';\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport Highlight from 'react-highlight';\r\n\r\nimport Demo from './Demo';\r\n\r\nconst getDemoPage = (demo: Demo) => {\r\n  return () => {\r\n    const [text, changeText]: [string, any] = useState('');\r\n    useEffect(() => {\r\n      const name = demo.fileName;\r\n      fetch(`demos/${name}/${name}.tsx`)\r\n        .then((res) => res.text())\r\n        .then((fileText) => changeText(fileText));\r\n    }, []);\r\n    return (\r\n      <div>\r\n        <div className='simulator-content'>\r\n          <h1>{demo.title}</h1>\r\n          <demo.component />\r\n        </div>\r\n        <div className='code'>\r\n          <Highlight className='language-typescript'>\r\n            {text}\r\n          </Highlight>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\nexport default getDemoPage;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, EditingMode } from '../../lib/enums';\r\nimport { OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 55, passed: false, nextTry: new Date(2019, 10, 8, 10) },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false, nextTry: new Date(2019, 11, 8, 10) },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Marshall Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false, nextTry: new Date(2019, 10, 9, 10) },\r\n];\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { field: 'name', title: 'Name', dataType: DataType.String, width: '30%' },\r\n    { field: 'score', title: 'Score', dataType: DataType.Number, width: '10%' },\r\n    { field: 'passed', title: 'Passed', dataType: DataType.Boolean, width: '10%' },\r\n    { field: 'nextTry', title: 'Next Try', dataType: DataType.Date },\r\n  ],\r\n  editableCells: [{\r\n    field: 'name',\r\n    rowKeyValue: 2,\r\n  }],\r\n  editingMode: EditingMode.Cell,\r\n  rowKey: 'id',\r\n};\r\n\r\nconst EditingDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n\r\n  const [data, changeData] = useState(dataArray);\r\n  const onDataChanged: OptionChangedFunc = (newValue) => {\r\n    changeData(newValue);\r\n  };\r\n  return (\r\n    <Table\r\n      {...option}\r\n      data={data}\r\n      onOptionChanged={onOptionChanged}\r\n      onDataChanged={onDataChanged}\r\n    />\r\n  );\r\n};\r\n\r\nexport default EditingDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, EditingMode, SortingMode } from '../../lib/enums';\r\nimport { EventFunc, OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray = Array(7).fill(undefined).map(\r\n  (_, index) => ({\r\n    column1: `column:1 row:${index}`,\r\n    column2: `column:2 row:${index}`,\r\n    column3: `column:3 row:${index}`,\r\n    column4: `column:4 row:${index}`,\r\n    id: index,\r\n  }),\r\n);\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { field: 'column1', title: 'Column 1', dataType: DataType.String },\r\n    { field: 'column2', title: 'Column 2', dataType: DataType.String },\r\n    { field: 'column3', title: 'Column 3', dataType: DataType.String },\r\n    { field: 'column4', title: 'Column 4', dataType: DataType.String },\r\n  ],\r\n  editingMode: EditingMode.Cell,\r\n  rowKey: 'id',\r\n  sortingMode: SortingMode.Single,\r\n};\r\n\r\nconst events: string[] = [];\r\nconst EventsDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n\r\n  const [data, changeData] = useState(dataArray);\r\n  const onDataChanged: OptionChangedFunc = (newValue) => {\r\n    changeData(newValue);\r\n  };\r\n\r\n  const onEvent: EventFunc = (event, eventData) => {\r\n    events.push(`event: ${event}, data:${JSON.stringify(eventData)}`);\r\n  };\r\n  return (\r\n    <>\r\n      <Table\r\n        {...option}\r\n        data={data}\r\n        onOptionChanged={onOptionChanged}\r\n        onDataChanged={onDataChanged}\r\n        onEvent={onEvent}\r\n      />\r\n      {events.map((e, i) => (<div key={i}>{e}</div>))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EventsDemo;\r\n","export const isEmpty = (value: any) => (value == null || value.length === 0);\r\n\r\nconst contains = (data: any[], item: any) => data[item.field].includes(item.value);\r\nconst equals = (data: any[], item: any) => ((typeof item.value === 'string')\r\n  ? data[item.field].toLowerCase().includes(item.value.toLowerCase())\r\n  : data[item.field] === item.value);\r\nconst notEqual = (data: any[], item: any) => !equals(data, item);\r\nconst more = (data: any[], item: any) => data[item.field] > item.value;\r\nconst moreOrEqual = (data: any[], item: any) => data[item.field] >= item.value;\r\nconst less = (data: any[], item: any) => data[item.field] < item.value;\r\nconst lessOrEqual = (data: any[], item: any) => data[item.field] < item.value;\r\nconst blank = (data: any[], item: any) => isEmpty(data[item.field]);\r\nconst notBlank = (data: any[], item: any) => !isEmpty(data[item.field]);\r\nexport const filterItem = (data: any[], filter: any) => {\r\n  switch (filter.operator) {\r\n    case 'contains': return contains(data, filter);\r\n    case '=': return equals(data, filter);\r\n    case '<>': return notEqual(data, filter);\r\n    case '>': return more(data, filter);\r\n    case '>=': return moreOrEqual(data, filter);\r\n    case '<': return less(data, filter);\r\n    case '<=': return lessOrEqual(data, filter);\r\n    case 'blank': return blank(data, filter);\r\n    case 'notBlank': return notBlank(data, filter);\r\n    default: throw Error('unknown operator');\r\n  }\r\n};\r\n\r\nexport const filterGroup = (data: any[], groupName: string, items: any[]): any[] =>\r\n  (groupName.toLowerCase() === 'or' ? filterGroupOr(data, items) : filterGroupAnd(data, items));\r\n\r\nexport const filterGroupOr = (data: any[], items: any[]): any[]  => {\r\n  const filteredData = items.reduce((initialData: any, item: any) => {\r\n    if (item.items) {\r\n      const grouped = filterGroup(data, item.groupName, item.items);\r\n      return initialData.concat(grouped.filter((d: any) => initialData.indexOf(d) < 0));\r\n    }\r\n    return initialData.concat(data.filter((d: any) => initialData.indexOf(d) < 0 && filterItem(d, item)));\r\n  }, []);\r\n  return data.filter((d) => filteredData.includes(d));\r\n};\r\n\r\nexport const filterGroupAnd = (data: any[], items: any[]): any[]  => {\r\n  return items.reduce((initialData: any[], item: any) => {\r\n    if (item.items) { return filterGroup(initialData, item.groupName, item.items); }\r\n    return initialData.filter((d: any[]) => filterItem(d, item));\r\n  }, data);\r\n};\r\n\r\nexport const filterData = (data: any[] , filterValue: any): any[]  => {\r\n  return filterGroup(data, filterValue.groupName, filterValue.items);\r\n};\r\n","import React, { useState } from 'react';\r\nimport FilterControl from 'react-filter-control';\r\nimport { IFilterControlFilterValue } from 'react-filter-control/interfaces';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, SortDirection, SortingMode } from '../../lib/enums';\r\nimport { OptionChangedFunc } from '../../lib/types';\r\nimport { filterData } from './filterData';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 55, passed: false },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Tom Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false },\r\n];\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { field: 'name', title: 'Name', dataType: DataType.String, sortDirection: SortDirection.Descend },\r\n    { field: 'score', title: 'Score', dataType: DataType.Number },\r\n    { field: 'passed', title: 'Passed', dataType: DataType.Boolean },\r\n  ],\r\n  rowKey: 'id',\r\n  sortingMode: SortingMode.Single,\r\n};\r\n\r\nexport const fields = [{\r\n  caption: 'Name',\r\n  name: 'name',\r\n  operators: [{\r\n    caption: 'Contains',\r\n    name: 'contains',\r\n  }, {\r\n    caption: 'Does not equal',\r\n    name: '<>',\r\n  }],\r\n}, {\r\n  caption: 'Score',\r\n  name: 'score',\r\n  operators: [{\r\n    caption: 'Equals',\r\n    name: '=',\r\n  }],\r\n}];\r\n\r\nexport const groups = [{\r\n  caption: 'And',\r\n  name: 'and',\r\n}, {\r\n  caption: 'Or',\r\n  name: 'or',\r\n}];\r\nexport const filter: IFilterControlFilterValue = {\r\n  groupName: 'and',\r\n  items: [\r\n    {\r\n      field: 'name',\r\n      key: '1',\r\n      operator: 'contains',\r\n      value: 'Tom',\r\n    },\r\n  ],\r\n};\r\n\r\nconst FilterExtendedDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n  const [filterValue, changeFilter] = useState(filter);\r\n  const onFilterChangedChanged = (newFilterValue: IFilterControlFilterValue) => {\r\n    changeFilter(newFilterValue);\r\n  };\r\n  const filteredData = filterData(dataArray, filterValue);\r\n  return (\r\n    <>\r\n      <FilterControl {...{fields, groups, filterValue,  onFilterValueChanged: onFilterChangedChanged}}/>\r\n      <Table\r\n        {...option}\r\n        data={filteredData}\r\n        onOptionChanged={onOptionChanged}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FilterExtendedDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, SortDirection } from '../../lib/enums';\r\nimport { OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 55, passed: false },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Marshall Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false },\r\n];\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { field: 'name', title: 'Name', dataType: DataType.String, sortDirection: SortDirection.Descend },\r\n    { field: 'score', title: 'Score', dataType: DataType.Number },\r\n    { field: 'passed', title: 'Passed', dataType: DataType.Boolean },\r\n  ],\r\n  filterRow: [{\r\n    field: 'name',\r\n    operator: '=',\r\n    value: 'Billi Bob',\r\n  }],\r\n  rowKey: 'id',\r\n};\r\n\r\nconst FilterRowDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n  return (\r\n    <Table\r\n      {...option}\r\n      data={dataArray}\r\n      onOptionChanged={onOptionChanged}\r\n    />\r\n  );\r\n};\r\n\r\nexport default FilterRowDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, EditingMode } from '../../lib/enums';\r\nimport { OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray = [\r\n  { id: 1, type: 'Cat', name: 'Kas', country: 'Czech Republic', age: 2 },\r\n  { id: 2, type: 'Dog', name: 'Rex', country: 'Montenegro', age: 6 },\r\n  { id: 3, type: 'Cat', name: 'Simba', country: 'France', age: 12 },\r\n  { id: 4, type: 'Dog', name: 'Beethoven', country: 'Czech Republic', age: 3 },\r\n  { id: 5, type: 'Cat', name: 'Hash', country: 'Czech Republic', age: 8 },\r\n];\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { field: 'type', title: 'TYPE', dataType: DataType.String },\r\n    { field: 'name', title: 'NAME', dataType: DataType.String, width: '50%' },\r\n    { field: 'country', title: 'COUNTRY', dataType: DataType.String },\r\n    { field: 'age', title: 'AGE', dataType: DataType.Number, width: '50%' },\r\n  ],\r\n  editingMode: EditingMode.Cell,\r\n  groups: [{ field: 'country' }, { field: 'type' }],\r\n  rowKey: 'id',\r\n};\r\n\r\nconst GroupingDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n  const [data, changeData] = useState(dataArray);\r\n  const onDataChanged: OptionChangedFunc = (newValue) => {\r\n    changeData(newValue);\r\n  };\r\n  return (\r\n    <Table\r\n      {...option}\r\n      data={data}\r\n      onOptionChanged={onOptionChanged}\r\n      onDataChanged={onDataChanged}\r\n    />\r\n  );\r\n};\r\n\r\nexport default GroupingDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType } from '../../lib/enums';\r\nimport { OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 55, passed: false },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Marshall Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false },\r\n];\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { field: 'name', title: 'Name', dataType: DataType.String, width: '40%' },\r\n    { field: 'score', title: 'Score', dataType: DataType.Number, width: '10%' },\r\n    {\r\n      dataType: DataType.Boolean,\r\n      field: 'passed',\r\n      search: (searchText, rowData) => {\r\n        return (searchText === 'false' && !rowData.passed) || (searchText === 'true' && rowData.passed);\r\n      },\r\n      title: 'Passed',\r\n    },\r\n  ],\r\n  rowKey: 'id',\r\n  search: 'Billi Bob',\r\n};\r\n\r\nconst SearchDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n  return (\r\n    <>\r\n      <input defaultValue={option.search} onChange={(event) => {\r\n        onOptionChanged({ search: event.currentTarget.value });\r\n      }}/>\r\n      <Table\r\n        {...option}\r\n        data={dataArray}\r\n        onOptionChanged={onOptionChanged}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, Events, SortDirection, SortingMode } from '../../lib/enums';\r\nimport { EditorFuncPropsWithChildren, OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 55, passed: false },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Marshall Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false },\r\n];\r\n\r\nconst SelectionCell: React.FC<EditorFuncPropsWithChildren> = ({\r\n  rowData, rowKey, onEvent, isSelectedRow,\r\n}) => {\r\n  return (\r\n    <input\r\n      type='checkbox'\r\n      checked={isSelectedRow}\r\n      onChange={(event) => {\r\n        const rowKeyValue = rowData[rowKey];\r\n        if (event.currentTarget.checked) {\r\n          onEvent(Events.RowSelected, { rowKeyValue });\r\n        } else {\r\n          onEvent(Events.RowDeselected, { rowKeyValue });\r\n        }\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { key: 'commandColumn:selection', field: '', editor: SelectionCell, isEditable: true },\r\n    { field: 'name', title: 'Name', dataType: DataType.String, width: '33%', sortDirection: SortDirection.Descend },\r\n    { field: 'score', title: 'Score', width: '10%', dataType: DataType.Number },\r\n    { field: 'passed', title: 'Passed', dataType: DataType.Boolean },\r\n  ],\r\n  rowKey: 'id',\r\n  selectedRows: [3, 5],\r\n  sortingMode: SortingMode.Single,\r\n};\r\n\r\nconst SelectionDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n  return (\r\n    <Table\r\n      {...option}\r\n      data={dataArray}\r\n      onOptionChanged={onOptionChanged}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SelectionDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, SortDirection, SortingMode } from '../../lib/enums';\r\nimport { OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 55, passed: false },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Marshall Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false },\r\n];\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { field: 'name', title: 'Name', dataType: DataType.String, width: '33%', sortDirection: SortDirection.Descend },\r\n    { field: 'score', title: 'Score', width: '10%', dataType: DataType.Number },\r\n    { field: 'passed', title: 'Passed', dataType: DataType.Boolean },\r\n  ],\r\n  rowKey: 'id',\r\n  sortingMode: SortingMode.Single,\r\n};\r\n\r\nconst SortingDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({...option, ...value });\r\n  };\r\n  return (\r\n    <Table\r\n      {...option}\r\n      data={dataArray}\r\n      onOptionChanged={onOptionChanged}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SortingDemo;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITableOption, Table } from '../../lib';\r\nimport { DataType, EditingMode } from '../../lib/enums';\r\nimport { OptionChangedFunc } from '../../lib/types';\r\n\r\nconst dataArray: any[] = [\r\n  { id: 1, name: 'Mike Wazowski', score: 80, passed: true },\r\n  { id: 2, name: 'Billi Bob', score: 155, passed: false },\r\n  { id: 3, name: 'Tom Williams', score: 45, passed: false },\r\n  { id: 4, name: 'Kurt Cobain', score: 75, passed: true },\r\n  { id: 5, name: 'Marshall Bruce', score: 77, passed: true },\r\n  { id: 6, name: 'Sunny Fox', score: 33, passed: false },\r\n];\r\n\r\nconst tableOption: ITableOption = {\r\n  columns: [\r\n    { field: 'name', title: 'Name', dataType: DataType.String, width: '40%' },\r\n    {\r\n      dataType: DataType.Number,\r\n      field: 'score',\r\n      title: 'Score',\r\n      validation: (value: any, rowData: any) => {\r\n        if (value > 100) {\r\n          return `Value can't be more than 100`;\r\n        }\r\n      },\r\n      width: '10%',\r\n    },\r\n    {\r\n      dataType: DataType.Boolean,\r\n      field: 'passed',\r\n      title: 'Passed',\r\n    },\r\n  ],\r\n  editableCells: [{\r\n    field: 'score',\r\n    rowKeyValue: 2,\r\n  }],\r\n  editingMode: EditingMode.Cell,\r\n  rowKey: 'id',\r\n};\r\n\r\nconst ValidationDemo: React.FC = () => {\r\n  const [option, changeOptions] = useState(tableOption);\r\n  const onOptionChanged: OptionChangedFunc = (value) => {\r\n    changeOptions({ ...option, ...value });\r\n  };\r\n\r\n  const [data, changeData] = useState(dataArray);\r\n  const onDataChanged: OptionChangedFunc = (newValue) => {\r\n    changeData(newValue);\r\n  };\r\n  return (\r\n    <>\r\n      <Table\r\n        {...option}\r\n        data={data}\r\n        onOptionChanged={onOptionChanged}\r\n        onDataChanged={onDataChanged}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ValidationDemo;\r\n","import './Demos.scss';\r\n\r\nimport React from 'react';\r\nimport { HashRouter, Link, NavLink, Route } from 'react-router-dom';\r\n\r\nimport CommandColumnDemo from './CommandColumnDemo/CommandColumnDemo';\r\nimport CustomCellDemo from './CustomCellDemo/CustomCellDemo';\r\nimport CustomEditorDemo from './CustomEditorDemo/CustomEditorDemo';\r\nimport CustomHeaderCellDemo from './CustomHeaderCellDemo/CustomHeaderCellDemo';\r\nimport Demo from './Demo';\r\nimport getDemoPage from './DemoPage';\r\nimport EditingDemo from './EditingDemo/EditingDemo';\r\nimport EventsDemo from './EventsDemo/EventsDemo';\r\nimport FilterExtendedDemo from './FilterExtendedDemo/FilterExtendedDemo';\r\nimport FilterRowDemo from './FilterRowDemo/FilterRowDemo';\r\nimport GroupingDemo from './GroupingDemo/GroupingDemo';\r\nimport SearchDemo from './SearchDemo/SearchDemo';\r\nimport SelectionDemo from './SelectionDemo/SelectionDemo';\r\nimport SortingDemo from './SortingDemo/SortingDemo';\r\nimport ValidationDemo from './ValidationDemo/ValidationDemo';\r\n\r\nconst demos: Demo[] = [\r\n  new Demo(CommandColumnDemo, '/command-column', 'Command Column', 'CommandColumnDemo'),\r\n  new Demo(CustomCellDemo, '/custom-cell', 'Custom Cell', 'CustomCellDemo'),\r\n  new Demo(CustomEditorDemo, '/custom-editor', 'Custom Editor', 'CustomEditorDemo'),\r\n  new Demo(CustomHeaderCellDemo, '/custom-header-cell', 'Custom Header Cell', 'CustomHeaderCellDemo'),\r\n  new Demo(EditingDemo, '/editing', 'Editing', 'EditingDemo'),\r\n  new Demo(EventsDemo, '/events', 'Events', 'EventsDemo'),\r\n  new Demo(FilterExtendedDemo, '/filter-extended', 'Filter Extended', 'FilterExtendedDemo'),\r\n  new Demo(FilterRowDemo, '/filter-row', 'Filter Row', 'FilterRowDemo'),\r\n  new Demo(GroupingDemo, '/grouping', 'Grouping', 'GroupingDemo'),\r\n  new Demo(SearchDemo, '/search', 'Search', 'SearchDemo'),\r\n  new Demo(SelectionDemo, '/selection', 'Selection', 'SelectionDemo'),\r\n  new Demo(SortingDemo, '/sorting', 'Sorting', 'SortingDemo'),\r\n  new Demo(ValidationDemo, '/validation', 'Validation', 'ValidationDemo'),\r\n];\r\n\r\nconst cases = demos.map((d: Demo) => {\r\n  return ({ demoComponent: getDemoPage(d), name: d.fileName, title: d.title, path: d.path });\r\n});\r\n\r\nconst defaultDemo: Demo = demos.find((d) => d.component === SelectionDemo) || demos[0];\r\n\r\nconst Demos: React.FC = () => {\r\n  return (\r\n    <HashRouter>\r\n      <div className='demos'>\r\n        <nav>\r\n          <div className='logo-container'>\r\n            <b>react-table-control</b>\r\n          </div>\r\n          <ul className='menu'>\r\n          {\r\n            cases.map((c) => (\r\n              <li key={c.name}>\r\n                  <NavLink to={c.path} activeClassName='active'>\r\n                    <span className='menu-button'>\r\n                      <span className='menu-button-inner'>{c.title}</span>\r\n                    </span>\r\n                  </NavLink>\r\n              </li>\r\n            ))\r\n          }\r\n          </ul>\r\n        </nav>\r\n        <main>\r\n          <Route exact={true} path='/' component={getDemoPage(defaultDemo)} />\r\n          {\r\n            cases.map((c) => (\r\n                <Route key={c.name} path={c.path} component={c.demoComponent} />\r\n              ),\r\n            )\r\n          }\r\n        </main>\r\n      </div>\r\n    </HashRouter>\r\n  );\r\n};\r\n\r\nexport default Demos;\r\n","import './App.css';\r\nimport './lib/styles.scss';\r\n\r\nimport React from 'react';\r\n\r\nimport Demos from './Demos/Demos';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Demos />\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}